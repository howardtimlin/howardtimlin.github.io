(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))n(i);new MutationObserver(i=>{for(const s of i)if(s.type==="childList")for(const r of s.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&n(r)}).observe(document,{childList:!0,subtree:!0});function t(i){const s={};return i.integrity&&(s.integrity=i.integrity),i.referrerpolicy&&(s.referrerPolicy=i.referrerpolicy),i.crossorigin==="use-credentials"?s.credentials="include":i.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(i){if(i.ep)return;i.ep=!0;const s=t(i);fetch(i.href,s)}})();/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const c7="145",I8=0,X7=1,N8=2,Ot=1,z8=2,R5=3,d5=0,C1=1,l2=2,u2=0,u5=1,J7=2,Y7=3,Z7=4,F8=5,a5=100,O8=101,U8=102,$7=103,K7=104,B8=200,k8=201,V8=202,G8=203,Ut=204,Bt=205,H8=206,W8=207,q8=208,X8=209,J8=210,Y8=0,Z8=1,$8=2,Z4=3,K8=4,Q8=5,j8=6,e6=7,Z3=0,t6=1,n6=2,$1=0,i6=1,s6=2,r6=3,a6=4,o6=5,h7=300,A2=301,E2=302,O3=303,U3=304,W5=306,B3=1e3,E1=1001,k3=1002,l1=1003,$4=1004,K4=1005,y1=1006,kt=1007,q5=1008,C2=1009,l6=1010,c6=1011,Vt=1012,h6=1013,S2=1014,c2=1015,U5=1016,u6=1017,f6=1018,f5=1020,d6=1021,p6=1022,F1=1023,m6=1024,g6=1025,w2=1026,p5=1027,x6=1028,_6=1029,v6=1030,y6=1031,M6=1033,l4=33776,c4=33777,h4=33778,u4=33779,Q7=35840,j7=35841,ee=35842,te=35843,S6=36196,ne=37492,ie=37496,se=37808,re=37809,ae=37810,oe=37811,le=37812,ce=37813,he=37814,ue=37815,fe=37816,de=37817,pe=37818,me=37819,ge=37820,xe=37821,_e=36492,V3=2300,G3=2301,f4=2302,ve=2400,ye=2401,Me=2402,b6=2500,L2=3e3,j0=3001,w6=3200,T6=3201,D2=0,A6=1,Z1="srgb",b2="srgb-linear",d4=7680,E6=519,Q4=35044,Se="300 es",j4=1035;class I2{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){if(this._listeners===void 0)return!1;const n=this._listeners;return n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const i=this._listeners[e];if(i!==void 0){const s=i.indexOf(t);s!==-1&&i.splice(s,1)}}dispatchEvent(e){if(this._listeners===void 0)return;const n=this._listeners[e.type];if(n!==void 0){e.target=this;const i=n.slice(0);for(let s=0,r=i.length;s<r;s++)i[s].call(this,e);e.target=null}}}const h1=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],I3=Math.PI/180,e7=180/Math.PI;function O1(){const a=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(h1[a&255]+h1[a>>8&255]+h1[a>>16&255]+h1[a>>24&255]+"-"+h1[e&255]+h1[e>>8&255]+"-"+h1[e>>16&15|64]+h1[e>>24&255]+"-"+h1[t&63|128]+h1[t>>8&255]+"-"+h1[t>>16&255]+h1[t>>24&255]+h1[n&255]+h1[n>>8&255]+h1[n>>16&255]+h1[n>>24&255]).toLowerCase()}function c1(a,e,t){return Math.max(e,Math.min(t,a))}function C6(a,e){return(a%e+e)%e}function p4(a,e,t){return(1-t)*a+t*e}function be(a){return(a&a-1)===0&&a!==0}function L6(a){return Math.pow(2,Math.ceil(Math.log(a)/Math.LN2))}function t7(a){return Math.pow(2,Math.floor(Math.log(a)/Math.LN2))}function h2(a,e){switch(e.constructor){case Float32Array:return a;case Uint16Array:return a/65535;case Uint8Array:return a/255;case Int16Array:return Math.max(a/32767,-1);case Int8Array:return Math.max(a/127,-1);default:throw new Error("Invalid component type.")}}function q0(a,e){switch(e.constructor){case Float32Array:return a;case Uint16Array:return Math.round(a*65535);case Uint8Array:return Math.round(a*255);case Int16Array:return Math.round(a*32767);case Int8Array:return Math.round(a*127);default:throw new Error("Invalid component type.")}}class ${constructor(e=0,t=0){$.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6],this.y=i[1]*t+i[4]*n+i[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),i=Math.sin(t),s=this.x-e.x,r=this.y-e.y;return this.x=s*n-r*i+e.x,this.y=s*i+r*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class M1{constructor(){M1.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1]}set(e,t,n,i,s,r,o,l,c){const h=this.elements;return h[0]=e,h[1]=i,h[2]=o,h[3]=t,h[4]=s,h[5]=l,h[6]=n,h[7]=r,h[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,s=this.elements,r=n[0],o=n[3],l=n[6],c=n[1],h=n[4],u=n[7],f=n[2],d=n[5],g=n[8],m=i[0],p=i[3],x=i[6],_=i[1],M=i[4],y=i[7],S=i[2],T=i[5],L=i[8];return s[0]=r*m+o*_+l*S,s[3]=r*p+o*M+l*T,s[6]=r*x+o*y+l*L,s[1]=c*m+h*_+u*S,s[4]=c*p+h*M+u*T,s[7]=c*x+h*y+u*L,s[2]=f*m+d*_+g*S,s[5]=f*p+d*M+g*T,s[8]=f*x+d*y+g*L,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],r=e[4],o=e[5],l=e[6],c=e[7],h=e[8];return t*r*h-t*o*c-n*s*h+n*o*l+i*s*c-i*r*l}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],r=e[4],o=e[5],l=e[6],c=e[7],h=e[8],u=h*r-o*c,f=o*l-h*s,d=c*s-r*l,g=t*u+n*f+i*d;if(g===0)return this.set(0,0,0,0,0,0,0,0,0);const m=1/g;return e[0]=u*m,e[1]=(i*c-h*n)*m,e[2]=(o*n-i*r)*m,e[3]=f*m,e[4]=(h*t-i*l)*m,e[5]=(i*s-o*t)*m,e[6]=d*m,e[7]=(n*l-c*t)*m,e[8]=(r*t-n*s)*m,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,i,s,r,o){const l=Math.cos(s),c=Math.sin(s);return this.set(n*l,n*c,-n*(l*r+c*o)+r+e,-i*c,i*l,-i*(-c*r+l*o)+o+t,0,0,1),this}scale(e,t){const n=this.elements;return n[0]*=e,n[3]*=e,n[6]*=e,n[1]*=t,n[4]*=t,n[7]*=t,this}rotate(e){const t=Math.cos(e),n=Math.sin(e),i=this.elements,s=i[0],r=i[3],o=i[6],l=i[1],c=i[4],h=i[7];return i[0]=t*s+n*l,i[3]=t*r+n*c,i[6]=t*o+n*h,i[1]=-n*s+t*l,i[4]=-n*r+t*c,i[7]=-n*o+t*h,this}translate(e,t){const n=this.elements;return n[0]+=e*n[2],n[3]+=e*n[5],n[6]+=e*n[8],n[1]+=t*n[2],n[4]+=t*n[5],n[7]+=t*n[8],this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<9;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return new this.constructor().fromArray(this.elements)}}function Gt(a){for(let e=a.length-1;e>=0;--e)if(a[e]>=65535)return!0;return!1}const P6={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function o5(a,e){return new P6[a](e)}function B5(a){return document.createElementNS("http://www.w3.org/1999/xhtml",a)}function T2(a){return a<.04045?a*.0773993808:Math.pow(a*.9478672986+.0521327014,2.4)}function N3(a){return a<.0031308?a*12.92:1.055*Math.pow(a,.41666)-.055}const m4={[Z1]:{[b2]:T2},[b2]:{[Z1]:N3}},P1={legacyMode:!0,get workingColorSpace(){return b2},set workingColorSpace(a){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(a,e,t){if(this.legacyMode||e===t||!e||!t)return a;if(m4[e]&&m4[e][t]!==void 0){const n=m4[e][t];return a.r=n(a.r),a.g=n(a.g),a.b=n(a.b),a}throw new Error("Unsupported color space conversion.")},fromWorkingColorSpace:function(a,e){return this.convert(a,this.workingColorSpace,e)},toWorkingColorSpace:function(a,e){return this.convert(a,e,this.workingColorSpace)}},Ht={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},i1={r:0,g:0,b:0},R1={h:0,s:0,l:0},Q5={h:0,s:0,l:0};function g4(a,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?a+(e-a)*6*t:t<1/2?e:t<2/3?a+(e-a)*6*(2/3-t):a}function j5(a,e){return e.r=a.r,e.g=a.g,e.b=a.b,e}class M0{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,t===void 0&&n===void 0?this.set(e):this.setRGB(e,t,n)}set(e){return e&&e.isColor?this.copy(e):typeof e=="number"?this.setHex(e):typeof e=="string"&&this.setStyle(e),this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=Z1){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,P1.toWorkingColorSpace(this,t),this}setRGB(e,t,n,i=b2){return this.r=e,this.g=t,this.b=n,P1.toWorkingColorSpace(this,i),this}setHSL(e,t,n,i=b2){if(e=C6(e,1),t=c1(t,0,1),n=c1(n,0,1),t===0)this.r=this.g=this.b=n;else{const s=n<=.5?n*(1+t):n+t-n*t,r=2*n-s;this.r=g4(r,s,e+1/3),this.g=g4(r,s,e),this.b=g4(r,s,e-1/3)}return P1.toWorkingColorSpace(this,i),this}setStyle(e,t=Z1){function n(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let i;if(i=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(e)){let s;const r=i[1],o=i[2];switch(r){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return this.r=Math.min(255,parseInt(s[1],10))/255,this.g=Math.min(255,parseInt(s[2],10))/255,this.b=Math.min(255,parseInt(s[3],10))/255,P1.toWorkingColorSpace(this,t),n(s[4]),this;if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return this.r=Math.min(100,parseInt(s[1],10))/100,this.g=Math.min(100,parseInt(s[2],10))/100,this.b=Math.min(100,parseInt(s[3],10))/100,P1.toWorkingColorSpace(this,t),n(s[4]),this;break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)){const l=parseFloat(s[1])/360,c=parseFloat(s[2])/100,h=parseFloat(s[3])/100;return n(s[4]),this.setHSL(l,c,h,t)}break}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(e)){const s=i[1],r=s.length;if(r===3)return this.r=parseInt(s.charAt(0)+s.charAt(0),16)/255,this.g=parseInt(s.charAt(1)+s.charAt(1),16)/255,this.b=parseInt(s.charAt(2)+s.charAt(2),16)/255,P1.toWorkingColorSpace(this,t),this;if(r===6)return this.r=parseInt(s.charAt(0)+s.charAt(1),16)/255,this.g=parseInt(s.charAt(2)+s.charAt(3),16)/255,this.b=parseInt(s.charAt(4)+s.charAt(5),16)/255,P1.toWorkingColorSpace(this,t),this}return e&&e.length>0?this.setColorName(e,t):this}setColorName(e,t=Z1){const n=Ht[e.toLowerCase()];return n!==void 0?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=T2(e.r),this.g=T2(e.g),this.b=T2(e.b),this}copyLinearToSRGB(e){return this.r=N3(e.r),this.g=N3(e.g),this.b=N3(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=Z1){return P1.fromWorkingColorSpace(j5(this,i1),e),c1(i1.r*255,0,255)<<16^c1(i1.g*255,0,255)<<8^c1(i1.b*255,0,255)<<0}getHexString(e=Z1){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=b2){P1.fromWorkingColorSpace(j5(this,i1),t);const n=i1.r,i=i1.g,s=i1.b,r=Math.max(n,i,s),o=Math.min(n,i,s);let l,c;const h=(o+r)/2;if(o===r)l=0,c=0;else{const u=r-o;switch(c=h<=.5?u/(r+o):u/(2-r-o),r){case n:l=(i-s)/u+(i<s?6:0);break;case i:l=(s-n)/u+2;break;case s:l=(n-i)/u+4;break}l/=6}return e.h=l,e.s=c,e.l=h,e}getRGB(e,t=b2){return P1.fromWorkingColorSpace(j5(this,i1),t),e.r=i1.r,e.g=i1.g,e.b=i1.b,e}getStyle(e=Z1){return P1.fromWorkingColorSpace(j5(this,i1),e),e!==Z1?`color(${e} ${i1.r} ${i1.g} ${i1.b})`:`rgb(${i1.r*255|0},${i1.g*255|0},${i1.b*255|0})`}offsetHSL(e,t,n){return this.getHSL(R1),R1.h+=e,R1.s+=t,R1.l+=n,this.setHSL(R1.h,R1.s,R1.l),this}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(R1),e.getHSL(Q5);const n=p4(R1.h,Q5.h,t),i=p4(R1.s,Q5.s,t),s=p4(R1.l,Q5.l,t);return this.setHSL(n,i,s),this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}M0.NAMES=Ht;let V2;class Wt{static getDataURL(e){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{V2===void 0&&(V2=B5("canvas")),V2.width=e.width,V2.height=e.height;const n=V2.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=V2}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const t=B5("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const i=n.getImageData(0,0,e.width,e.height),s=i.data;for(let r=0;r<s.length;r++)s[r]=T2(s[r]/255)*255;return n.putImageData(i,0,0),t}else if(e.data){const t=e.data.slice(0);for(let n=0;n<t.length;n++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[n]=Math.floor(T2(t[n]/255)*255):t[n]=T2(t[n]);return{data:t,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}class l5{constructor(e=null){this.isSource=!0,this.uuid=O1(),this.data=e,this.version=0}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(i!==null){let s;if(Array.isArray(i)){s=[];for(let r=0,o=i.length;r<o;r++)i[r].isDataTexture?s.push(x4(i[r].image)):s.push(x4(i[r]))}else s=x4(i);n.url=s}return t||(e.images[this.uuid]=n),n}}function x4(a){return typeof HTMLImageElement<"u"&&a instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&a instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&a instanceof ImageBitmap?Wt.getDataURL(a):a.data?{data:Array.from(a.data),width:a.width,height:a.height,type:a.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let R6=0;class b1 extends I2{constructor(e=b1.DEFAULT_IMAGE,t=b1.DEFAULT_MAPPING,n=E1,i=E1,s=y1,r=q5,o=F1,l=C2,c=1,h=L2){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:R6++}),this.uuid=O1(),this.name="",this.source=new l5(e),this.mipmaps=[],this.mapping=t,this.wrapS=n,this.wrapT=i,this.magFilter=s,this.minFilter=r,this.anisotropy=c,this.format=o,this.internalFormat=null,this.type=l,this.offset=new $(0,0),this.repeat=new $(1,1),this.center=new $(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new M1,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=h,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(e){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return JSON.stringify(this.userData)!=="{}"&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==h7)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case B3:e.x=e.x-Math.floor(e.x);break;case E1:e.x=e.x<0?0:1;break;case k3:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case B3:e.y=e.y-Math.floor(e.y);break;case E1:e.y=e.y<0?0:1;break;case k3:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}}b1.DEFAULT_IMAGE=null;b1.DEFAULT_MAPPING=h7;class H0{constructor(e=0,t=0,n=0,i=1){H0.prototype.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=i}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,s=this.w,r=e.elements;return this.x=r[0]*t+r[4]*n+r[8]*i+r[12]*s,this.y=r[1]*t+r[5]*n+r[9]*i+r[13]*s,this.z=r[2]*t+r[6]*n+r[10]*i+r[14]*s,this.w=r[3]*t+r[7]*n+r[11]*i+r[15]*s,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,i,s;const l=e.elements,c=l[0],h=l[4],u=l[8],f=l[1],d=l[5],g=l[9],m=l[2],p=l[6],x=l[10];if(Math.abs(h-f)<.01&&Math.abs(u-m)<.01&&Math.abs(g-p)<.01){if(Math.abs(h+f)<.1&&Math.abs(u+m)<.1&&Math.abs(g+p)<.1&&Math.abs(c+d+x-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const M=(c+1)/2,y=(d+1)/2,S=(x+1)/2,T=(h+f)/4,L=(u+m)/4,v=(g+p)/4;return M>y&&M>S?M<.01?(n=0,i=.707106781,s=.707106781):(n=Math.sqrt(M),i=T/n,s=L/n):y>S?y<.01?(n=.707106781,i=0,s=.707106781):(i=Math.sqrt(y),n=T/i,s=v/i):S<.01?(n=.707106781,i=.707106781,s=0):(s=Math.sqrt(S),n=L/s,i=v/s),this.set(n,i,s,t),this}let _=Math.sqrt((p-g)*(p-g)+(u-m)*(u-m)+(f-h)*(f-h));return Math.abs(_)<.001&&(_=1),this.x=(p-g)/_,this.y=(u-m)/_,this.z=(f-h)/_,this.w=Math.acos((c+d+x-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class P2 extends I2{constructor(e,t,n={}){super(),this.isWebGLRenderTarget=!0,this.width=e,this.height=t,this.depth=1,this.scissor=new H0(0,0,e,t),this.scissorTest=!1,this.viewport=new H0(0,0,e,t);const i={width:e,height:t,depth:1};this.texture=new b1(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=n.generateMipmaps!==void 0?n.generateMipmaps:!1,this.texture.internalFormat=n.internalFormat!==void 0?n.internalFormat:null,this.texture.minFilter=n.minFilter!==void 0?n.minFilter:y1,this.depthBuffer=n.depthBuffer!==void 0?n.depthBuffer:!0,this.stencilBuffer=n.stencilBuffer!==void 0?n.stencilBuffer:!1,this.depthTexture=n.depthTexture!==void 0?n.depthTexture:null,this.samples=n.samples!==void 0?n.samples:0}setSize(e,t,n=1){(this.width!==e||this.height!==t||this.depth!==n)&&(this.width=e,this.height=t,this.depth=n,this.texture.image.width=e,this.texture.image.height=t,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.texture.isRenderTargetTexture=!0;const t=Object.assign({},e.texture.image);return this.texture.source=new l5(t),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class qt extends b1{constructor(e=null,t=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=l1,this.minFilter=l1,this.wrapR=E1,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class D6 extends b1{constructor(e=null,t=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=l1,this.minFilter=l1,this.wrapR=E1,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class N2{constructor(e=0,t=0,n=0,i=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=i}static slerpFlat(e,t,n,i,s,r,o){let l=n[i+0],c=n[i+1],h=n[i+2],u=n[i+3];const f=s[r+0],d=s[r+1],g=s[r+2],m=s[r+3];if(o===0){e[t+0]=l,e[t+1]=c,e[t+2]=h,e[t+3]=u;return}if(o===1){e[t+0]=f,e[t+1]=d,e[t+2]=g,e[t+3]=m;return}if(u!==m||l!==f||c!==d||h!==g){let p=1-o;const x=l*f+c*d+h*g+u*m,_=x>=0?1:-1,M=1-x*x;if(M>Number.EPSILON){const S=Math.sqrt(M),T=Math.atan2(S,x*_);p=Math.sin(p*T)/S,o=Math.sin(o*T)/S}const y=o*_;if(l=l*p+f*y,c=c*p+d*y,h=h*p+g*y,u=u*p+m*y,p===1-o){const S=1/Math.sqrt(l*l+c*c+h*h+u*u);l*=S,c*=S,h*=S,u*=S}}e[t]=l,e[t+1]=c,e[t+2]=h,e[t+3]=u}static multiplyQuaternionsFlat(e,t,n,i,s,r){const o=n[i],l=n[i+1],c=n[i+2],h=n[i+3],u=s[r],f=s[r+1],d=s[r+2],g=s[r+3];return e[t]=o*g+h*u+l*d-c*f,e[t+1]=l*g+h*f+c*u-o*d,e[t+2]=c*g+h*d+o*f-l*u,e[t+3]=h*g-o*u-l*f-c*d,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t){const n=e._x,i=e._y,s=e._z,r=e._order,o=Math.cos,l=Math.sin,c=o(n/2),h=o(i/2),u=o(s/2),f=l(n/2),d=l(i/2),g=l(s/2);switch(r){case"XYZ":this._x=f*h*u+c*d*g,this._y=c*d*u-f*h*g,this._z=c*h*g+f*d*u,this._w=c*h*u-f*d*g;break;case"YXZ":this._x=f*h*u+c*d*g,this._y=c*d*u-f*h*g,this._z=c*h*g-f*d*u,this._w=c*h*u+f*d*g;break;case"ZXY":this._x=f*h*u-c*d*g,this._y=c*d*u+f*h*g,this._z=c*h*g+f*d*u,this._w=c*h*u-f*d*g;break;case"ZYX":this._x=f*h*u-c*d*g,this._y=c*d*u+f*h*g,this._z=c*h*g-f*d*u,this._w=c*h*u+f*d*g;break;case"YZX":this._x=f*h*u+c*d*g,this._y=c*d*u+f*h*g,this._z=c*h*g-f*d*u,this._w=c*h*u-f*d*g;break;case"XZY":this._x=f*h*u-c*d*g,this._y=c*d*u-f*h*g,this._z=c*h*g+f*d*u,this._w=c*h*u+f*d*g;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+r)}return t!==!1&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,i=Math.sin(n);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],s=t[8],r=t[1],o=t[5],l=t[9],c=t[2],h=t[6],u=t[10],f=n+o+u;if(f>0){const d=.5/Math.sqrt(f+1);this._w=.25/d,this._x=(h-l)*d,this._y=(s-c)*d,this._z=(r-i)*d}else if(n>o&&n>u){const d=2*Math.sqrt(1+n-o-u);this._w=(h-l)/d,this._x=.25*d,this._y=(i+r)/d,this._z=(s+c)/d}else if(o>u){const d=2*Math.sqrt(1+o-n-u);this._w=(s-c)/d,this._x=(i+r)/d,this._y=.25*d,this._z=(l+h)/d}else{const d=2*Math.sqrt(1+u-n-o);this._w=(r-i)/d,this._x=(s+c)/d,this._y=(l+h)/d,this._z=.25*d}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(c1(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const i=Math.min(1,t/n);return this.slerp(e,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,i=e._y,s=e._z,r=e._w,o=t._x,l=t._y,c=t._z,h=t._w;return this._x=n*h+r*o+i*c-s*l,this._y=i*h+r*l+s*o-n*c,this._z=s*h+r*c+n*l-i*o,this._w=r*h-n*o-i*l-s*c,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,i=this._y,s=this._z,r=this._w;let o=r*e._w+n*e._x+i*e._y+s*e._z;if(o<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,o=-o):this.copy(e),o>=1)return this._w=r,this._x=n,this._y=i,this._z=s,this;const l=1-o*o;if(l<=Number.EPSILON){const d=1-t;return this._w=d*r+t*this._w,this._x=d*n+t*this._x,this._y=d*i+t*this._y,this._z=d*s+t*this._z,this.normalize(),this._onChangeCallback(),this}const c=Math.sqrt(l),h=Math.atan2(c,o),u=Math.sin((1-t)*h)/c,f=Math.sin(t*h)/c;return this._w=r*u+this._w*f,this._x=n*u+this._x*f,this._y=i*u+this._y*f,this._z=s*u+this._z*f,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=Math.random(),t=Math.sqrt(1-e),n=Math.sqrt(e),i=2*Math.PI*Math.random(),s=2*Math.PI*Math.random();return this.set(t*Math.cos(i),n*Math.sin(s),n*Math.cos(s),t*Math.sin(i))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class A{constructor(e=0,t=0,n=0){A.prototype.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(we.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(we.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,i=this.z,s=e.elements;return this.x=s[0]*t+s[3]*n+s[6]*i,this.y=s[1]*t+s[4]*n+s[7]*i,this.z=s[2]*t+s[5]*n+s[8]*i,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,s=e.elements,r=1/(s[3]*t+s[7]*n+s[11]*i+s[15]);return this.x=(s[0]*t+s[4]*n+s[8]*i+s[12])*r,this.y=(s[1]*t+s[5]*n+s[9]*i+s[13])*r,this.z=(s[2]*t+s[6]*n+s[10]*i+s[14])*r,this}applyQuaternion(e){const t=this.x,n=this.y,i=this.z,s=e.x,r=e.y,o=e.z,l=e.w,c=l*t+r*i-o*n,h=l*n+o*t-s*i,u=l*i+s*n-r*t,f=-s*t-r*n-o*i;return this.x=c*l+f*-s+h*-o-u*-r,this.y=h*l+f*-r+u*-s-c*-o,this.z=u*l+f*-o+c*-r-h*-s,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,i=this.z,s=e.elements;return this.x=s[0]*t+s[4]*n+s[8]*i,this.y=s[1]*t+s[5]*n+s[9]*i,this.z=s[2]*t+s[6]*n+s[10]*i,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,i=e.y,s=e.z,r=t.x,o=t.y,l=t.z;return this.x=i*l-s*o,this.y=s*r-n*l,this.z=n*o-i*r,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return _4.copy(this).projectOnVector(e),this.sub(_4)}reflect(e){return this.sub(_4.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(c1(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=i,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=(Math.random()-.5)*2,t=Math.random()*Math.PI*2,n=Math.sqrt(1-e**2);return this.x=n*Math.cos(t),this.y=n*Math.sin(t),this.z=e,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const _4=new A,we=new N2;class X5{constructor(e=new A(1/0,1/0,1/0),t=new A(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){let t=1/0,n=1/0,i=1/0,s=-1/0,r=-1/0,o=-1/0;for(let l=0,c=e.length;l<c;l+=3){const h=e[l],u=e[l+1],f=e[l+2];h<t&&(t=h),u<n&&(n=u),f<i&&(i=f),h>s&&(s=h),u>r&&(r=u),f>o&&(o=f)}return this.min.set(t,n,i),this.max.set(s,r,o),this}setFromBufferAttribute(e){let t=1/0,n=1/0,i=1/0,s=-1/0,r=-1/0,o=-1/0;for(let l=0,c=e.count;l<c;l++){const h=e.getX(l),u=e.getY(l),f=e.getZ(l);h<t&&(t=h),u<n&&(n=u),f<i&&(i=f),h>s&&(s=h),u>r&&(r=u),f>o&&(o=f)}return this.min.set(t,n,i),this.max.set(s,r,o),this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=g2.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(n!==void 0)if(t&&n.attributes!=null&&n.attributes.position!==void 0){const s=n.attributes.position;for(let r=0,o=s.count;r<o;r++)g2.fromBufferAttribute(s,r).applyMatrix4(e.matrixWorld),this.expandByPoint(g2)}else n.boundingBox===null&&n.computeBoundingBox(),v4.copy(n.boundingBox),v4.applyMatrix4(e.matrixWorld),this.union(v4);const i=e.children;for(let s=0,r=i.length;s<r;s++)this.expandByObject(i[s],t);return this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return this.clampPoint(e.center,g2),g2.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(b5),e3.subVectors(this.max,b5),G2.subVectors(e.a,b5),H2.subVectors(e.b,b5),W2.subVectors(e.c,b5),e2.subVectors(H2,G2),t2.subVectors(W2,H2),x2.subVectors(G2,W2);let t=[0,-e2.z,e2.y,0,-t2.z,t2.y,0,-x2.z,x2.y,e2.z,0,-e2.x,t2.z,0,-t2.x,x2.z,0,-x2.x,-e2.y,e2.x,0,-t2.y,t2.x,0,-x2.y,x2.x,0];return!y4(t,G2,H2,W2,e3)||(t=[1,0,0,0,1,0,0,0,1],!y4(t,G2,H2,W2,e3))?!1:(t3.crossVectors(e2,t2),t=[t3.x,t3.y,t3.z],y4(t,G2,H2,W2,e3))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return g2.copy(e).clamp(this.min,this.max).sub(e).length()}getBoundingSphere(e){return this.getCenter(e.center),e.radius=this.getSize(g2).length()*.5,e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(H1[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),H1[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),H1[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),H1[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),H1[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),H1[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),H1[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),H1[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(H1),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const H1=[new A,new A,new A,new A,new A,new A,new A,new A],g2=new A,v4=new X5,G2=new A,H2=new A,W2=new A,e2=new A,t2=new A,x2=new A,b5=new A,e3=new A,t3=new A,_2=new A;function y4(a,e,t,n,i){for(let s=0,r=a.length-3;s<=r;s+=3){_2.fromArray(a,s);const o=i.x*Math.abs(_2.x)+i.y*Math.abs(_2.y)+i.z*Math.abs(_2.z),l=e.dot(_2),c=t.dot(_2),h=n.dot(_2);if(Math.max(-Math.max(l,c,h),Math.min(l,c,h))>o)return!1}return!0}const I6=new X5,Te=new A,n3=new A,M4=new A;class x5{constructor(e=new A,t=-1){this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==void 0?n.copy(t):I6.setFromPoints(e).getCenter(n);let i=0;for(let s=0,r=e.length;s<r;s++)i=Math.max(i,n.distanceToSquared(e[s]));return this.radius=Math.sqrt(i),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;M4.subVectors(e,this.center);const t=M4.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t),i=(n-this.radius)*.5;this.center.add(M4.multiplyScalar(i/n)),this.radius+=i}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?n3.set(0,0,1).multiplyScalar(e.radius):n3.subVectors(e.center,this.center).normalize().multiplyScalar(e.radius),this.expandByPoint(Te.copy(e.center).add(n3)),this.expandByPoint(Te.copy(e.center).sub(n3)),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const W1=new A,S4=new A,i3=new A,n2=new A,b4=new A,s3=new A,w4=new A;class $3{constructor(e=new A,t=new A(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.direction).multiplyScalar(e).add(this.origin)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,W1)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=W1.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(W1.copy(this.direction).multiplyScalar(t).add(this.origin),W1.distanceToSquared(e))}distanceSqToSegment(e,t,n,i){S4.copy(e).add(t).multiplyScalar(.5),i3.copy(t).sub(e).normalize(),n2.copy(this.origin).sub(S4);const s=e.distanceTo(t)*.5,r=-this.direction.dot(i3),o=n2.dot(this.direction),l=-n2.dot(i3),c=n2.lengthSq(),h=Math.abs(1-r*r);let u,f,d,g;if(h>0)if(u=r*l-o,f=r*o-l,g=s*h,u>=0)if(f>=-g)if(f<=g){const m=1/h;u*=m,f*=m,d=u*(u+r*f+2*o)+f*(r*u+f+2*l)+c}else f=s,u=Math.max(0,-(r*f+o)),d=-u*u+f*(f+2*l)+c;else f=-s,u=Math.max(0,-(r*f+o)),d=-u*u+f*(f+2*l)+c;else f<=-g?(u=Math.max(0,-(-r*s+o)),f=u>0?-s:Math.min(Math.max(-s,-l),s),d=-u*u+f*(f+2*l)+c):f<=g?(u=0,f=Math.min(Math.max(-s,-l),s),d=f*(f+2*l)+c):(u=Math.max(0,-(r*s+o)),f=u>0?s:Math.min(Math.max(-s,-l),s),d=-u*u+f*(f+2*l)+c);else f=r>0?-s:s,u=Math.max(0,-(r*f+o)),d=-u*u+f*(f+2*l)+c;return n&&n.copy(this.direction).multiplyScalar(u).add(this.origin),i&&i.copy(i3).multiplyScalar(f).add(S4),d}intersectSphere(e,t){W1.subVectors(e.center,this.origin);const n=W1.dot(this.direction),i=W1.dot(W1)-n*n,s=e.radius*e.radius;if(i>s)return null;const r=Math.sqrt(s-i),o=n-r,l=n+r;return o<0&&l<0?null:o<0?this.at(l,t):this.at(o,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,i,s,r,o,l;const c=1/this.direction.x,h=1/this.direction.y,u=1/this.direction.z,f=this.origin;return c>=0?(n=(e.min.x-f.x)*c,i=(e.max.x-f.x)*c):(n=(e.max.x-f.x)*c,i=(e.min.x-f.x)*c),h>=0?(s=(e.min.y-f.y)*h,r=(e.max.y-f.y)*h):(s=(e.max.y-f.y)*h,r=(e.min.y-f.y)*h),n>r||s>i||((s>n||n!==n)&&(n=s),(r<i||i!==i)&&(i=r),u>=0?(o=(e.min.z-f.z)*u,l=(e.max.z-f.z)*u):(o=(e.max.z-f.z)*u,l=(e.min.z-f.z)*u),n>l||o>i)||((o>n||n!==n)&&(n=o),(l<i||i!==i)&&(i=l),i<0)?null:this.at(n>=0?n:i,t)}intersectsBox(e){return this.intersectBox(e,W1)!==null}intersectTriangle(e,t,n,i,s){b4.subVectors(t,e),s3.subVectors(n,e),w4.crossVectors(b4,s3);let r=this.direction.dot(w4),o;if(r>0){if(i)return null;o=1}else if(r<0)o=-1,r=-r;else return null;n2.subVectors(this.origin,e);const l=o*this.direction.dot(s3.crossVectors(n2,s3));if(l<0)return null;const c=o*this.direction.dot(b4.cross(n2));if(c<0||l+c>r)return null;const h=-o*n2.dot(w4);return h<0?null:this.at(h/r,s)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class O0{constructor(){O0.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}set(e,t,n,i,s,r,o,l,c,h,u,f,d,g,m,p){const x=this.elements;return x[0]=e,x[4]=t,x[8]=n,x[12]=i,x[1]=s,x[5]=r,x[9]=o,x[13]=l,x[2]=c,x[6]=h,x[10]=u,x[14]=f,x[3]=d,x[7]=g,x[11]=m,x[15]=p,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new O0().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,i=1/q2.setFromMatrixColumn(e,0).length(),s=1/q2.setFromMatrixColumn(e,1).length(),r=1/q2.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*s,t[5]=n[5]*s,t[6]=n[6]*s,t[7]=0,t[8]=n[8]*r,t[9]=n[9]*r,t[10]=n[10]*r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,n=e.x,i=e.y,s=e.z,r=Math.cos(n),o=Math.sin(n),l=Math.cos(i),c=Math.sin(i),h=Math.cos(s),u=Math.sin(s);if(e.order==="XYZ"){const f=r*h,d=r*u,g=o*h,m=o*u;t[0]=l*h,t[4]=-l*u,t[8]=c,t[1]=d+g*c,t[5]=f-m*c,t[9]=-o*l,t[2]=m-f*c,t[6]=g+d*c,t[10]=r*l}else if(e.order==="YXZ"){const f=l*h,d=l*u,g=c*h,m=c*u;t[0]=f+m*o,t[4]=g*o-d,t[8]=r*c,t[1]=r*u,t[5]=r*h,t[9]=-o,t[2]=d*o-g,t[6]=m+f*o,t[10]=r*l}else if(e.order==="ZXY"){const f=l*h,d=l*u,g=c*h,m=c*u;t[0]=f-m*o,t[4]=-r*u,t[8]=g+d*o,t[1]=d+g*o,t[5]=r*h,t[9]=m-f*o,t[2]=-r*c,t[6]=o,t[10]=r*l}else if(e.order==="ZYX"){const f=r*h,d=r*u,g=o*h,m=o*u;t[0]=l*h,t[4]=g*c-d,t[8]=f*c+m,t[1]=l*u,t[5]=m*c+f,t[9]=d*c-g,t[2]=-c,t[6]=o*l,t[10]=r*l}else if(e.order==="YZX"){const f=r*l,d=r*c,g=o*l,m=o*c;t[0]=l*h,t[4]=m-f*u,t[8]=g*u+d,t[1]=u,t[5]=r*h,t[9]=-o*h,t[2]=-c*h,t[6]=d*u+g,t[10]=f-m*u}else if(e.order==="XZY"){const f=r*l,d=r*c,g=o*l,m=o*c;t[0]=l*h,t[4]=-u,t[8]=c*h,t[1]=f*u+m,t[5]=r*h,t[9]=d*u-g,t[2]=g*u-d,t[6]=o*h,t[10]=m*u+f}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(N6,e,z6)}lookAt(e,t,n){const i=this.elements;return _1.subVectors(e,t),_1.lengthSq()===0&&(_1.z=1),_1.normalize(),i2.crossVectors(n,_1),i2.lengthSq()===0&&(Math.abs(n.z)===1?_1.x+=1e-4:_1.z+=1e-4,_1.normalize(),i2.crossVectors(n,_1)),i2.normalize(),r3.crossVectors(_1,i2),i[0]=i2.x,i[4]=r3.x,i[8]=_1.x,i[1]=i2.y,i[5]=r3.y,i[9]=_1.y,i[2]=i2.z,i[6]=r3.z,i[10]=_1.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,s=this.elements,r=n[0],o=n[4],l=n[8],c=n[12],h=n[1],u=n[5],f=n[9],d=n[13],g=n[2],m=n[6],p=n[10],x=n[14],_=n[3],M=n[7],y=n[11],S=n[15],T=i[0],L=i[4],v=i[8],E=i[12],P=i[1],B=i[5],Q=i[9],F=i[13],D=i[2],V=i[6],Z=i[10],K=i[14],H=i[3],N=i[7],O=i[11],j=i[15];return s[0]=r*T+o*P+l*D+c*H,s[4]=r*L+o*B+l*V+c*N,s[8]=r*v+o*Q+l*Z+c*O,s[12]=r*E+o*F+l*K+c*j,s[1]=h*T+u*P+f*D+d*H,s[5]=h*L+u*B+f*V+d*N,s[9]=h*v+u*Q+f*Z+d*O,s[13]=h*E+u*F+f*K+d*j,s[2]=g*T+m*P+p*D+x*H,s[6]=g*L+m*B+p*V+x*N,s[10]=g*v+m*Q+p*Z+x*O,s[14]=g*E+m*F+p*K+x*j,s[3]=_*T+M*P+y*D+S*H,s[7]=_*L+M*B+y*V+S*N,s[11]=_*v+M*Q+y*Z+S*O,s[15]=_*E+M*F+y*K+S*j,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],i=e[8],s=e[12],r=e[1],o=e[5],l=e[9],c=e[13],h=e[2],u=e[6],f=e[10],d=e[14],g=e[3],m=e[7],p=e[11],x=e[15];return g*(+s*l*u-i*c*u-s*o*f+n*c*f+i*o*d-n*l*d)+m*(+t*l*d-t*c*f+s*r*f-i*r*d+i*c*h-s*l*h)+p*(+t*c*u-t*o*d-s*r*u+n*r*d+s*o*h-n*c*h)+x*(-i*o*h-t*l*u+t*o*f+i*r*u-n*r*f+n*l*h)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const i=this.elements;return e.isVector3?(i[12]=e.x,i[13]=e.y,i[14]=e.z):(i[12]=e,i[13]=t,i[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],r=e[4],o=e[5],l=e[6],c=e[7],h=e[8],u=e[9],f=e[10],d=e[11],g=e[12],m=e[13],p=e[14],x=e[15],_=u*p*c-m*f*c+m*l*d-o*p*d-u*l*x+o*f*x,M=g*f*c-h*p*c-g*l*d+r*p*d+h*l*x-r*f*x,y=h*m*c-g*u*c+g*o*d-r*m*d-h*o*x+r*u*x,S=g*u*l-h*m*l-g*o*f+r*m*f+h*o*p-r*u*p,T=t*_+n*M+i*y+s*S;if(T===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const L=1/T;return e[0]=_*L,e[1]=(m*f*s-u*p*s-m*i*d+n*p*d+u*i*x-n*f*x)*L,e[2]=(o*p*s-m*l*s+m*i*c-n*p*c-o*i*x+n*l*x)*L,e[3]=(u*l*s-o*f*s-u*i*c+n*f*c+o*i*d-n*l*d)*L,e[4]=M*L,e[5]=(h*p*s-g*f*s+g*i*d-t*p*d-h*i*x+t*f*x)*L,e[6]=(g*l*s-r*p*s-g*i*c+t*p*c+r*i*x-t*l*x)*L,e[7]=(r*f*s-h*l*s+h*i*c-t*f*c-r*i*d+t*l*d)*L,e[8]=y*L,e[9]=(g*u*s-h*m*s-g*n*d+t*m*d+h*n*x-t*u*x)*L,e[10]=(r*m*s-g*o*s+g*n*c-t*m*c-r*n*x+t*o*x)*L,e[11]=(h*o*s-r*u*s-h*n*c+t*u*c+r*n*d-t*o*d)*L,e[12]=S*L,e[13]=(h*m*i-g*u*i+g*n*f-t*m*f-h*n*p+t*u*p)*L,e[14]=(g*o*i-r*m*i-g*n*l+t*m*l+r*n*p-t*o*p)*L,e[15]=(r*u*i-h*o*i+h*n*l-t*u*l-r*n*f+t*o*f)*L,this}scale(e){const t=this.elements,n=e.x,i=e.y,s=e.z;return t[0]*=n,t[4]*=i,t[8]*=s,t[1]*=n,t[5]*=i,t[9]*=s,t[2]*=n,t[6]*=i,t[10]*=s,t[3]*=n,t[7]*=i,t[11]*=s,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))}makeTranslation(e,t,n){return this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),i=Math.sin(t),s=1-n,r=e.x,o=e.y,l=e.z,c=s*r,h=s*o;return this.set(c*r+n,c*o-i*l,c*l+i*o,0,c*o+i*l,h*o+n,h*l-i*r,0,c*l-i*o,h*l+i*r,s*l*l+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,i,s,r){return this.set(1,n,s,0,e,1,r,0,t,i,1,0,0,0,0,1),this}compose(e,t,n){const i=this.elements,s=t._x,r=t._y,o=t._z,l=t._w,c=s+s,h=r+r,u=o+o,f=s*c,d=s*h,g=s*u,m=r*h,p=r*u,x=o*u,_=l*c,M=l*h,y=l*u,S=n.x,T=n.y,L=n.z;return i[0]=(1-(m+x))*S,i[1]=(d+y)*S,i[2]=(g-M)*S,i[3]=0,i[4]=(d-y)*T,i[5]=(1-(f+x))*T,i[6]=(p+_)*T,i[7]=0,i[8]=(g+M)*L,i[9]=(p-_)*L,i[10]=(1-(f+m))*L,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this}decompose(e,t,n){const i=this.elements;let s=q2.set(i[0],i[1],i[2]).length();const r=q2.set(i[4],i[5],i[6]).length(),o=q2.set(i[8],i[9],i[10]).length();this.determinant()<0&&(s=-s),e.x=i[12],e.y=i[13],e.z=i[14],D1.copy(this);const c=1/s,h=1/r,u=1/o;return D1.elements[0]*=c,D1.elements[1]*=c,D1.elements[2]*=c,D1.elements[4]*=h,D1.elements[5]*=h,D1.elements[6]*=h,D1.elements[8]*=u,D1.elements[9]*=u,D1.elements[10]*=u,t.setFromRotationMatrix(D1),n.x=s,n.y=r,n.z=o,this}makePerspective(e,t,n,i,s,r){const o=this.elements,l=2*s/(t-e),c=2*s/(n-i),h=(t+e)/(t-e),u=(n+i)/(n-i),f=-(r+s)/(r-s),d=-2*r*s/(r-s);return o[0]=l,o[4]=0,o[8]=h,o[12]=0,o[1]=0,o[5]=c,o[9]=u,o[13]=0,o[2]=0,o[6]=0,o[10]=f,o[14]=d,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this}makeOrthographic(e,t,n,i,s,r){const o=this.elements,l=1/(t-e),c=1/(n-i),h=1/(r-s),u=(t+e)*l,f=(n+i)*c,d=(r+s)*h;return o[0]=2*l,o[4]=0,o[8]=0,o[12]=-u,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-f,o[2]=0,o[6]=0,o[10]=-2*h,o[14]=-d,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<16;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}const q2=new A,D1=new O0,N6=new A(0,0,0),z6=new A(1,1,1),i2=new A,r3=new A,_1=new A,Ae=new O0,Ee=new N2;class _5{constructor(e=0,t=0,n=0,i=_5.DefaultOrder){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=i}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,i=this._order){return this._x=e,this._y=t,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const i=e.elements,s=i[0],r=i[4],o=i[8],l=i[1],c=i[5],h=i[9],u=i[2],f=i[6],d=i[10];switch(t){case"XYZ":this._y=Math.asin(c1(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-h,d),this._z=Math.atan2(-r,s)):(this._x=Math.atan2(f,c),this._z=0);break;case"YXZ":this._x=Math.asin(-c1(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(o,d),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-u,s),this._z=0);break;case"ZXY":this._x=Math.asin(c1(f,-1,1)),Math.abs(f)<.9999999?(this._y=Math.atan2(-u,d),this._z=Math.atan2(-r,c)):(this._y=0,this._z=Math.atan2(l,s));break;case"ZYX":this._y=Math.asin(-c1(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(f,d),this._z=Math.atan2(l,s)):(this._x=0,this._z=Math.atan2(-r,c));break;case"YZX":this._z=Math.asin(c1(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-u,s)):(this._x=0,this._y=Math.atan2(o,d));break;case"XZY":this._z=Math.asin(-c1(r,-1,1)),Math.abs(r)<.9999999?(this._x=Math.atan2(f,c),this._y=Math.atan2(o,s)):(this._x=Math.atan2(-h,d),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return Ae.makeRotationFromQuaternion(e),this.setFromRotationMatrix(Ae,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return Ee.setFromEuler(this),this.setFromQuaternion(Ee,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}toVector3(){console.error("THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead")}}_5.DefaultOrder="XYZ";_5.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class u7{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let F6=0;const Ce=new A,X2=new N2,q1=new O0,a3=new A,w5=new A,O6=new A,U6=new N2,Le=new A(1,0,0),Pe=new A(0,1,0),Re=new A(0,0,1),B6={type:"added"},De={type:"removed"};class X0 extends I2{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:F6++}),this.uuid=O1(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=X0.DefaultUp.clone();const e=new A,t=new _5,n=new N2,i=new A(1,1,1);function s(){n.setFromEuler(t,!1)}function r(){t.setFromQuaternion(n,void 0,!1)}t._onChange(s),n._onChange(r),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new O0},normalMatrix:{value:new M1}}),this.matrix=new O0,this.matrixWorld=new O0,this.matrixAutoUpdate=X0.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.matrixWorldAutoUpdate=X0.DefaultMatrixWorldAutoUpdate,this.layers=new u7,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return X2.setFromAxisAngle(e,t),this.quaternion.multiply(X2),this}rotateOnWorldAxis(e,t){return X2.setFromAxisAngle(e,t),this.quaternion.premultiply(X2),this}rotateX(e){return this.rotateOnAxis(Le,e)}rotateY(e){return this.rotateOnAxis(Pe,e)}rotateZ(e){return this.rotateOnAxis(Re,e)}translateOnAxis(e,t){return Ce.copy(e).applyQuaternion(this.quaternion),this.position.add(Ce.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(Le,e)}translateY(e){return this.translateOnAxis(Pe,e)}translateZ(e){return this.translateOnAxis(Re,e)}localToWorld(e){return e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return e.applyMatrix4(q1.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?a3.copy(e):a3.set(e,t,n);const i=this.parent;this.updateWorldMatrix(!0,!1),w5.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?q1.lookAt(w5,a3,this.up):q1.lookAt(a3,w5,this.up),this.quaternion.setFromRotationMatrix(q1),i&&(q1.extractRotation(i.matrixWorld),X2.setFromRotationMatrix(q1),this.quaternion.premultiply(X2.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.parent!==null&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(B6)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(De)),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){for(let e=0;e<this.children.length;e++){const t=this.children[e];t.parent=null,t.dispatchEvent(De)}return this.children.length=0,this}attach(e){return this.updateWorldMatrix(!0,!1),q1.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),q1.multiply(e.parent.matrixWorld)),e.applyMatrix4(q1),this.add(e),e.updateWorldMatrix(!1,!0),this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,i=this.children.length;n<i;n++){const r=this.children[n].getObjectByProperty(e,t);if(r!==void 0)return r}}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(w5,e,O6),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(w5,U6,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,i=t.length;n<i;n++){const s=t[n];(s.matrixWorldAutoUpdate===!0||e===!0)&&s.updateMatrixWorld(e)}}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.matrixWorldAutoUpdate===!0&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),t===!0){const i=this.children;for(let s=0,r=i.length;s<r;s++){const o=i[s];o.matrixWorldAutoUpdate===!0&&o.updateWorldMatrix(!1,!0)}}}toJSON(e){const t=e===void 0||typeof e=="string",n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),JSON.stringify(this.userData)!=="{}"&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON()));function s(o,l){return o[l.uuid]===void 0&&(o[l.uuid]=l.toJSON(e)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(i.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=s(e.geometries,this.geometry);const o=this.geometry.parameters;if(o!==void 0&&o.shapes!==void 0){const l=o.shapes;if(Array.isArray(l))for(let c=0,h=l.length;c<h;c++){const u=l[c];s(e.shapes,u)}else s(e.shapes,l)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(e.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const o=[];for(let l=0,c=this.material.length;l<c;l++)o.push(s(e.materials,this.material[l]));i.material=o}else i.material=s(e.materials,this.material);if(this.children.length>0){i.children=[];for(let o=0;o<this.children.length;o++)i.children.push(this.children[o].toJSON(e).object)}if(this.animations.length>0){i.animations=[];for(let o=0;o<this.animations.length;o++){const l=this.animations[o];i.animations.push(s(e.animations,l))}}if(t){const o=r(e.geometries),l=r(e.materials),c=r(e.textures),h=r(e.images),u=r(e.shapes),f=r(e.skeletons),d=r(e.animations),g=r(e.nodes);o.length>0&&(n.geometries=o),l.length>0&&(n.materials=l),c.length>0&&(n.textures=c),h.length>0&&(n.images=h),u.length>0&&(n.shapes=u),f.length>0&&(n.skeletons=f),d.length>0&&(n.animations=d),g.length>0&&(n.nodes=g)}return n.object=i,n;function r(o){const l=[];for(const c in o){const h=o[c];delete h.metadata,l.push(h)}return l}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let n=0;n<e.children.length;n++){const i=e.children[n];this.add(i.clone())}return this}}X0.DefaultUp=new A(0,1,0);X0.DefaultMatrixAutoUpdate=!0;X0.DefaultMatrixWorldAutoUpdate=!0;const I1=new A,X1=new A,T4=new A,J1=new A,J2=new A,Y2=new A,Ie=new A,A4=new A,E4=new A,C4=new A;class z1{constructor(e=new A,t=new A,n=new A){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,i){i.subVectors(n,t),I1.subVectors(e,t),i.cross(I1);const s=i.lengthSq();return s>0?i.multiplyScalar(1/Math.sqrt(s)):i.set(0,0,0)}static getBarycoord(e,t,n,i,s){I1.subVectors(i,t),X1.subVectors(n,t),T4.subVectors(e,t);const r=I1.dot(I1),o=I1.dot(X1),l=I1.dot(T4),c=X1.dot(X1),h=X1.dot(T4),u=r*c-o*o;if(u===0)return s.set(-2,-1,-1);const f=1/u,d=(c*l-o*h)*f,g=(r*h-o*l)*f;return s.set(1-d-g,g,d)}static containsPoint(e,t,n,i){return this.getBarycoord(e,t,n,i,J1),J1.x>=0&&J1.y>=0&&J1.x+J1.y<=1}static getUV(e,t,n,i,s,r,o,l){return this.getBarycoord(e,t,n,i,J1),l.set(0,0),l.addScaledVector(s,J1.x),l.addScaledVector(r,J1.y),l.addScaledVector(o,J1.z),l}static isFrontFacing(e,t,n,i){return I1.subVectors(n,t),X1.subVectors(e,t),I1.cross(X1).dot(i)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,i){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[i]),this}setFromAttributeAndIndices(e,t,n,i){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,i),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return I1.subVectors(this.c,this.b),X1.subVectors(this.a,this.b),I1.cross(X1).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return z1.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return z1.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,n,i,s){return z1.getUV(e,this.a,this.b,this.c,t,n,i,s)}containsPoint(e){return z1.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return z1.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,i=this.b,s=this.c;let r,o;J2.subVectors(i,n),Y2.subVectors(s,n),A4.subVectors(e,n);const l=J2.dot(A4),c=Y2.dot(A4);if(l<=0&&c<=0)return t.copy(n);E4.subVectors(e,i);const h=J2.dot(E4),u=Y2.dot(E4);if(h>=0&&u<=h)return t.copy(i);const f=l*u-h*c;if(f<=0&&l>=0&&h<=0)return r=l/(l-h),t.copy(n).addScaledVector(J2,r);C4.subVectors(e,s);const d=J2.dot(C4),g=Y2.dot(C4);if(g>=0&&d<=g)return t.copy(s);const m=d*c-l*g;if(m<=0&&c>=0&&g<=0)return o=c/(c-g),t.copy(n).addScaledVector(Y2,o);const p=h*g-d*u;if(p<=0&&u-h>=0&&d-g>=0)return Ie.subVectors(s,i),o=(u-h)/(u-h+(d-g)),t.copy(i).addScaledVector(Ie,o);const x=1/(p+m+f);return r=m*x,o=f*x,t.copy(n).addScaledVector(J2,r).addScaledVector(Y2,o)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}let k6=0;class g1 extends I2{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:k6++}),this.uuid=O1(),this.name="",this.type="Material",this.blending=u5,this.side=d5,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=Ut,this.blendDst=Bt,this.blendEquation=a5,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=Z4,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=E6,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=d4,this.stencilZFail=d4,this.stencilZPass=d4,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const n=e[t];if(n===void 0){console.warn("THREE.Material: '"+t+"' parameter is undefined.");continue}const i=this[t];if(i===void 0){console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.");continue}i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[t]=n}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==u5&&(n.blending=this.blending),this.side!==d5&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.colorWrite=this.colorWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaToCoverage===!0&&(n.alphaToCoverage=this.alphaToCoverage),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=this.flatShading),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),JSON.stringify(this.userData)!=="{}"&&(n.userData=this.userData);function i(s){const r=[];for(const o in s){const l=s[o];delete l.metadata,r.push(l)}return r}if(t){const s=i(e.textures),r=i(e.images);s.length>0&&(n.textures=s),r.length>0&&(n.images=r)}return n}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const i=t.length;n=new Array(i);for(let s=0;s!==i;++s)n[s]=t[s].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}}class f7 extends g1{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new M0(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Z3,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const n1=new A,o3=new $;class m1{constructor(e,t,n){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n===!0,this.usage=Q4,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let i=0,s=this.itemSize;i<s;i++)this.array[e+i]=t.array[n+i];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)o3.fromBufferAttribute(this,t),o3.applyMatrix3(e),this.setXY(t,o3.x,o3.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)n1.fromBufferAttribute(this,t),n1.applyMatrix3(e),this.setXYZ(t,n1.x,n1.y,n1.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)n1.fromBufferAttribute(this,t),n1.applyMatrix4(e),this.setXYZ(t,n1.x,n1.y,n1.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)n1.fromBufferAttribute(this,t),n1.applyNormalMatrix(e),this.setXYZ(t,n1.x,n1.y,n1.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)n1.fromBufferAttribute(this,t),n1.transformDirection(e),this.setXYZ(t,n1.x,n1.y,n1.z);return this}set(e,t=0){return this.array.set(e,t),this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=h2(t,this.array)),t}setX(e,t){return this.normalized&&(t=q0(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=h2(t,this.array)),t}setY(e,t){return this.normalized&&(t=q0(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=h2(t,this.array)),t}setZ(e,t){return this.normalized&&(t=q0(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=h2(t,this.array)),t}setW(e,t){return this.normalized&&(t=q0(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=q0(t,this.array),n=q0(n,this.array)),this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,i){return e*=this.itemSize,this.normalized&&(t=q0(t,this.array),n=q0(n,this.array),i=q0(i,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this}setXYZW(e,t,n,i,s){return e*=this.itemSize,this.normalized&&(t=q0(t,this.array),n=q0(n,this.array),i=q0(i,this.array),s=q0(s,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this.array[e+3]=s,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==Q4&&(e.usage=this.usage),(this.updateRange.offset!==0||this.updateRange.count!==-1)&&(e.updateRange=this.updateRange),e}copyColorsArray(){console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.")}copyVector2sArray(){console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.")}copyVector3sArray(){console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.")}copyVector4sArray(){console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.")}}class Xt extends m1{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class Jt extends m1{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class L0 extends m1{constructor(e,t,n){super(new Float32Array(e),t,n)}}let V6=0;const A1=new O0,L4=new X0,Z2=new A,v1=new X5,T5=new X5,a1=new A;class Z0 extends I2{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:V6++}),this.uuid=O1(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(Gt(e)?Jt:Xt)(e,1):this.index=e,this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const s=new M1().getNormalMatrix(e);n.applyNormalMatrix(s),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(e),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return A1.makeRotationFromQuaternion(e),this.applyMatrix4(A1),this}rotateX(e){return A1.makeRotationX(e),this.applyMatrix4(A1),this}rotateY(e){return A1.makeRotationY(e),this.applyMatrix4(A1),this}rotateZ(e){return A1.makeRotationZ(e),this.applyMatrix4(A1),this}translate(e,t,n){return A1.makeTranslation(e,t,n),this.applyMatrix4(A1),this}scale(e,t,n){return A1.makeScale(e,t,n),this.applyMatrix4(A1),this}lookAt(e){return L4.lookAt(e),L4.updateMatrix(),this.applyMatrix4(L4.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Z2).negate(),this.translate(Z2.x,Z2.y,Z2.z),this}setFromPoints(e){const t=[];for(let n=0,i=e.length;n<i;n++){const s=e[n];t.push(s.x,s.y,s.z||0)}return this.setAttribute("position",new L0(t,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new X5);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new A(-1/0,-1/0,-1/0),new A(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,i=t.length;n<i;n++){const s=t[n];v1.setFromBufferAttribute(s),this.morphTargetsRelative?(a1.addVectors(this.boundingBox.min,v1.min),this.boundingBox.expandByPoint(a1),a1.addVectors(this.boundingBox.max,v1.max),this.boundingBox.expandByPoint(a1)):(this.boundingBox.expandByPoint(v1.min),this.boundingBox.expandByPoint(v1.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new x5);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new A,1/0);return}if(e){const n=this.boundingSphere.center;if(v1.setFromBufferAttribute(e),t)for(let s=0,r=t.length;s<r;s++){const o=t[s];T5.setFromBufferAttribute(o),this.morphTargetsRelative?(a1.addVectors(v1.min,T5.min),v1.expandByPoint(a1),a1.addVectors(v1.max,T5.max),v1.expandByPoint(a1)):(v1.expandByPoint(T5.min),v1.expandByPoint(T5.max))}v1.getCenter(n);let i=0;for(let s=0,r=e.count;s<r;s++)a1.fromBufferAttribute(e,s),i=Math.max(i,n.distanceToSquared(a1));if(t)for(let s=0,r=t.length;s<r;s++){const o=t[s],l=this.morphTargetsRelative;for(let c=0,h=o.count;c<h;c++)a1.fromBufferAttribute(o,c),l&&(Z2.fromBufferAttribute(e,c),a1.add(Z2)),i=Math.max(i,n.distanceToSquared(a1))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.array,i=t.position.array,s=t.normal.array,r=t.uv.array,o=i.length/3;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new m1(new Float32Array(4*o),4));const l=this.getAttribute("tangent").array,c=[],h=[];for(let P=0;P<o;P++)c[P]=new A,h[P]=new A;const u=new A,f=new A,d=new A,g=new $,m=new $,p=new $,x=new A,_=new A;function M(P,B,Q){u.fromArray(i,P*3),f.fromArray(i,B*3),d.fromArray(i,Q*3),g.fromArray(r,P*2),m.fromArray(r,B*2),p.fromArray(r,Q*2),f.sub(u),d.sub(u),m.sub(g),p.sub(g);const F=1/(m.x*p.y-p.x*m.y);!isFinite(F)||(x.copy(f).multiplyScalar(p.y).addScaledVector(d,-m.y).multiplyScalar(F),_.copy(d).multiplyScalar(m.x).addScaledVector(f,-p.x).multiplyScalar(F),c[P].add(x),c[B].add(x),c[Q].add(x),h[P].add(_),h[B].add(_),h[Q].add(_))}let y=this.groups;y.length===0&&(y=[{start:0,count:n.length}]);for(let P=0,B=y.length;P<B;++P){const Q=y[P],F=Q.start,D=Q.count;for(let V=F,Z=F+D;V<Z;V+=3)M(n[V+0],n[V+1],n[V+2])}const S=new A,T=new A,L=new A,v=new A;function E(P){L.fromArray(s,P*3),v.copy(L);const B=c[P];S.copy(B),S.sub(L.multiplyScalar(L.dot(B))).normalize(),T.crossVectors(v,B);const F=T.dot(h[P])<0?-1:1;l[P*4]=S.x,l[P*4+1]=S.y,l[P*4+2]=S.z,l[P*4+3]=F}for(let P=0,B=y.length;P<B;++P){const Q=y[P],F=Q.start,D=Q.count;for(let V=F,Z=F+D;V<Z;V+=3)E(n[V+0]),E(n[V+1]),E(n[V+2])}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new m1(new Float32Array(t.count*3),3),this.setAttribute("normal",n);else for(let f=0,d=n.count;f<d;f++)n.setXYZ(f,0,0,0);const i=new A,s=new A,r=new A,o=new A,l=new A,c=new A,h=new A,u=new A;if(e)for(let f=0,d=e.count;f<d;f+=3){const g=e.getX(f+0),m=e.getX(f+1),p=e.getX(f+2);i.fromBufferAttribute(t,g),s.fromBufferAttribute(t,m),r.fromBufferAttribute(t,p),h.subVectors(r,s),u.subVectors(i,s),h.cross(u),o.fromBufferAttribute(n,g),l.fromBufferAttribute(n,m),c.fromBufferAttribute(n,p),o.add(h),l.add(h),c.add(h),n.setXYZ(g,o.x,o.y,o.z),n.setXYZ(m,l.x,l.y,l.z),n.setXYZ(p,c.x,c.y,c.z)}else for(let f=0,d=t.count;f<d;f+=3)i.fromBufferAttribute(t,f+0),s.fromBufferAttribute(t,f+1),r.fromBufferAttribute(t,f+2),h.subVectors(r,s),u.subVectors(i,s),h.cross(u),n.setXYZ(f+0,h.x,h.y,h.z),n.setXYZ(f+1,h.x,h.y,h.z),n.setXYZ(f+2,h.x,h.y,h.z);this.normalizeNormals(),n.needsUpdate=!0}}merge(){return console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeBufferGeometries() instead."),this}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)a1.fromBufferAttribute(e,t),a1.normalize(),e.setXYZ(t,a1.x,a1.y,a1.z)}toNonIndexed(){function e(o,l){const c=o.array,h=o.itemSize,u=o.normalized,f=new c.constructor(l.length*h);let d=0,g=0;for(let m=0,p=l.length;m<p;m++){o.isInterleavedBufferAttribute?d=l[m]*o.data.stride+o.offset:d=l[m]*h;for(let x=0;x<h;x++)f[g++]=c[d++]}return new m1(f,h,u)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new Z0,n=this.index.array,i=this.attributes;for(const o in i){const l=i[o],c=e(l,n);t.setAttribute(o,c)}const s=this.morphAttributes;for(const o in s){const l=[],c=s[o];for(let h=0,u=c.length;h<u;h++){const f=c[h],d=e(f,n);l.push(d)}t.morphAttributes[o]=l}t.morphTargetsRelative=this.morphTargetsRelative;const r=this.groups;for(let o=0,l=r.length;o<l;o++){const c=r[o];t.addGroup(c.start,c.count,c.materialIndex)}return t}toJSON(){const e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const c in l)l[c]!==void 0&&(e[c]=l[c]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const l in n){const c=n[l];e.data.attributes[l]=c.toJSON(e.data)}const i={};let s=!1;for(const l in this.morphAttributes){const c=this.morphAttributes[l],h=[];for(let u=0,f=c.length;u<f;u++){const d=c[u];h.push(d.toJSON(e.data))}h.length>0&&(i[l]=h,s=!0)}s&&(e.data.morphAttributes=i,e.data.morphTargetsRelative=this.morphTargetsRelative);const r=this.groups;r.length>0&&(e.data.groups=JSON.parse(JSON.stringify(r)));const o=this.boundingSphere;return o!==null&&(e.data.boundingSphere={center:o.center.toArray(),radius:o.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone(t));const i=e.attributes;for(const c in i){const h=i[c];this.setAttribute(c,h.clone(t))}const s=e.morphAttributes;for(const c in s){const h=[],u=s[c];for(let f=0,d=u.length;f<d;f++)h.push(u[f].clone(t));this.morphAttributes[c]=h}this.morphTargetsRelative=e.morphTargetsRelative;const r=e.groups;for(let c=0,h=r.length;c<h;c++){const u=r[c];this.addGroup(u.start,u.count,u.materialIndex)}const o=e.boundingBox;o!==null&&(this.boundingBox=o.clone());const l=e.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,e.parameters!==void 0&&(this.parameters=Object.assign({},e.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}const Ne=new O0,$2=new $3,P4=new x5,s2=new A,r2=new A,a2=new A,R4=new A,D4=new A,I4=new A,l3=new A,c3=new A,h3=new A,u3=new $,f3=new $,d3=new $,N4=new A,p3=new A;class S1 extends X0{constructor(e=new Z0,t=new f7){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=e.material,this.geometry=e.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,r=i.length;s<r;s++){const o=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=s}}}}raycast(e,t){const n=this.geometry,i=this.material,s=this.matrixWorld;if(i===void 0||(n.boundingSphere===null&&n.computeBoundingSphere(),P4.copy(n.boundingSphere),P4.applyMatrix4(s),e.ray.intersectsSphere(P4)===!1)||(Ne.copy(s).invert(),$2.copy(e.ray).applyMatrix4(Ne),n.boundingBox!==null&&$2.intersectsBox(n.boundingBox)===!1))return;let r;const o=n.index,l=n.attributes.position,c=n.morphAttributes.position,h=n.morphTargetsRelative,u=n.attributes.uv,f=n.attributes.uv2,d=n.groups,g=n.drawRange;if(o!==null)if(Array.isArray(i))for(let m=0,p=d.length;m<p;m++){const x=d[m],_=i[x.materialIndex],M=Math.max(x.start,g.start),y=Math.min(o.count,Math.min(x.start+x.count,g.start+g.count));for(let S=M,T=y;S<T;S+=3){const L=o.getX(S),v=o.getX(S+1),E=o.getX(S+2);r=m3(this,_,e,$2,l,c,h,u,f,L,v,E),r&&(r.faceIndex=Math.floor(S/3),r.face.materialIndex=x.materialIndex,t.push(r))}}else{const m=Math.max(0,g.start),p=Math.min(o.count,g.start+g.count);for(let x=m,_=p;x<_;x+=3){const M=o.getX(x),y=o.getX(x+1),S=o.getX(x+2);r=m3(this,i,e,$2,l,c,h,u,f,M,y,S),r&&(r.faceIndex=Math.floor(x/3),t.push(r))}}else if(l!==void 0)if(Array.isArray(i))for(let m=0,p=d.length;m<p;m++){const x=d[m],_=i[x.materialIndex],M=Math.max(x.start,g.start),y=Math.min(l.count,Math.min(x.start+x.count,g.start+g.count));for(let S=M,T=y;S<T;S+=3){const L=S,v=S+1,E=S+2;r=m3(this,_,e,$2,l,c,h,u,f,L,v,E),r&&(r.faceIndex=Math.floor(S/3),r.face.materialIndex=x.materialIndex,t.push(r))}}else{const m=Math.max(0,g.start),p=Math.min(l.count,g.start+g.count);for(let x=m,_=p;x<_;x+=3){const M=x,y=x+1,S=x+2;r=m3(this,i,e,$2,l,c,h,u,f,M,y,S),r&&(r.faceIndex=Math.floor(x/3),t.push(r))}}}}function G6(a,e,t,n,i,s,r,o){let l;if(e.side===C1?l=n.intersectTriangle(r,s,i,!0,o):l=n.intersectTriangle(i,s,r,e.side!==l2,o),l===null)return null;p3.copy(o),p3.applyMatrix4(a.matrixWorld);const c=t.ray.origin.distanceTo(p3);return c<t.near||c>t.far?null:{distance:c,point:p3.clone(),object:a}}function m3(a,e,t,n,i,s,r,o,l,c,h,u){s2.fromBufferAttribute(i,c),r2.fromBufferAttribute(i,h),a2.fromBufferAttribute(i,u);const f=a.morphTargetInfluences;if(s&&f){l3.set(0,0,0),c3.set(0,0,0),h3.set(0,0,0);for(let g=0,m=s.length;g<m;g++){const p=f[g],x=s[g];p!==0&&(R4.fromBufferAttribute(x,c),D4.fromBufferAttribute(x,h),I4.fromBufferAttribute(x,u),r?(l3.addScaledVector(R4,p),c3.addScaledVector(D4,p),h3.addScaledVector(I4,p)):(l3.addScaledVector(R4.sub(s2),p),c3.addScaledVector(D4.sub(r2),p),h3.addScaledVector(I4.sub(a2),p)))}s2.add(l3),r2.add(c3),a2.add(h3)}a.isSkinnedMesh&&(a.boneTransform(c,s2),a.boneTransform(h,r2),a.boneTransform(u,a2));const d=G6(a,e,t,n,s2,r2,a2,N4);if(d){o&&(u3.fromBufferAttribute(o,c),f3.fromBufferAttribute(o,h),d3.fromBufferAttribute(o,u),d.uv=z1.getUV(N4,s2,r2,a2,u3,f3,d3,new $)),l&&(u3.fromBufferAttribute(l,c),f3.fromBufferAttribute(l,h),d3.fromBufferAttribute(l,u),d.uv2=z1.getUV(N4,s2,r2,a2,u3,f3,d3,new $));const g={a:c,b:h,c:u,normal:new A,materialIndex:0};z1.getNormal(s2,r2,a2,g.normal),d.face=g}return d}class z2 extends Z0{constructor(e=1,t=1,n=1,i=1,s=1,r=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:s,depthSegments:r};const o=this;i=Math.floor(i),s=Math.floor(s),r=Math.floor(r);const l=[],c=[],h=[],u=[];let f=0,d=0;g("z","y","x",-1,-1,n,t,e,r,s,0),g("z","y","x",1,-1,n,t,-e,r,s,1),g("x","z","y",1,1,e,n,t,i,r,2),g("x","z","y",1,-1,e,n,-t,i,r,3),g("x","y","z",1,-1,e,t,n,i,s,4),g("x","y","z",-1,-1,e,t,-n,i,s,5),this.setIndex(l),this.setAttribute("position",new L0(c,3)),this.setAttribute("normal",new L0(h,3)),this.setAttribute("uv",new L0(u,2));function g(m,p,x,_,M,y,S,T,L,v,E){const P=y/L,B=S/v,Q=y/2,F=S/2,D=T/2,V=L+1,Z=v+1;let K=0,H=0;const N=new A;for(let O=0;O<Z;O++){const j=O*B-F;for(let e0=0;e0<V;e0++){const t0=e0*P-Q;N[m]=t0*_,N[p]=j*M,N[x]=D,c.push(N.x,N.y,N.z),N[m]=0,N[p]=0,N[x]=T>0?1:-1,h.push(N.x,N.y,N.z),u.push(e0/L),u.push(1-O/v),K+=1}}for(let O=0;O<v;O++)for(let j=0;j<L;j++){const e0=f+j+V*O,t0=f+j+V*(O+1),f0=f+(j+1)+V*(O+1),T0=f+(j+1)+V*O;l.push(e0,t0,T0),l.push(t0,f0,T0),H+=6}o.addGroup(d,H,E),d+=H,f+=K}}static fromJSON(e){return new z2(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function m5(a){const e={};for(const t in a){e[t]={};for(const n in a[t]){const i=a[t][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?e[t][n]=i.clone():Array.isArray(i)?e[t][n]=i.slice():e[t][n]=i}}return e}function u1(a){const e={};for(let t=0;t<a.length;t++){const n=m5(a[t]);for(const i in n)e[i]=n[i]}return e}function H6(a){const e=[];for(let t=0;t<a.length;t++)e.push(a[t].clone());return e}const W6={clone:m5,merge:u1};var q6=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,X6=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class K1 extends g1{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=q6,this.fragmentShader=X6,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=m5(e.uniforms),this.uniformsGroups=H6(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const i in this.uniforms){const r=this.uniforms[i].value;r&&r.isTexture?t.uniforms[i]={type:"t",value:r.toJSON(e).uuid}:r&&r.isColor?t.uniforms[i]={type:"c",value:r.getHex()}:r&&r.isVector2?t.uniforms[i]={type:"v2",value:r.toArray()}:r&&r.isVector3?t.uniforms[i]={type:"v3",value:r.toArray()}:r&&r.isVector4?t.uniforms[i]={type:"v4",value:r.toArray()}:r&&r.isMatrix3?t.uniforms[i]={type:"m3",value:r.toArray()}:r&&r.isMatrix4?t.uniforms[i]={type:"m4",value:r.toArray()}:t.uniforms[i]={value:r}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}}class Yt extends X0{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new O0,this.projectionMatrix=new O0,this.projectionMatrixInverse=new O0}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}class p1 extends Yt{constructor(e=50,t=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=e7*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(I3*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return e7*2*Math.atan(Math.tan(I3*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(e,t,n,i,s,r){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=r,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(I3*.5*this.fov)/this.zoom,n=2*t,i=this.aspect*n,s=-.5*i;const r=this.view;if(this.view!==null&&this.view.enabled){const l=r.fullWidth,c=r.fullHeight;s+=r.offsetX*i/l,t-=r.offsetY*n/c,i*=r.width/l,n*=r.height/c}const o=this.filmOffset;o!==0&&(s+=e*o/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+i,t,t-n,e,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const K2=90,Q2=1;class J6 extends X0{constructor(e,t,n){super(),this.type="CubeCamera",this.renderTarget=n;const i=new p1(K2,Q2,e,t);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new A(1,0,0)),this.add(i);const s=new p1(K2,Q2,e,t);s.layers=this.layers,s.up.set(0,-1,0),s.lookAt(new A(-1,0,0)),this.add(s);const r=new p1(K2,Q2,e,t);r.layers=this.layers,r.up.set(0,0,1),r.lookAt(new A(0,1,0)),this.add(r);const o=new p1(K2,Q2,e,t);o.layers=this.layers,o.up.set(0,0,-1),o.lookAt(new A(0,-1,0)),this.add(o);const l=new p1(K2,Q2,e,t);l.layers=this.layers,l.up.set(0,-1,0),l.lookAt(new A(0,0,1)),this.add(l);const c=new p1(K2,Q2,e,t);c.layers=this.layers,c.up.set(0,-1,0),c.lookAt(new A(0,0,-1)),this.add(c)}update(e,t){this.parent===null&&this.updateMatrixWorld();const n=this.renderTarget,[i,s,r,o,l,c]=this.children,h=e.getRenderTarget(),u=e.toneMapping,f=e.xr.enabled;e.toneMapping=$1,e.xr.enabled=!1;const d=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0),e.render(t,i),e.setRenderTarget(n,1),e.render(t,s),e.setRenderTarget(n,2),e.render(t,r),e.setRenderTarget(n,3),e.render(t,o),e.setRenderTarget(n,4),e.render(t,l),n.texture.generateMipmaps=d,e.setRenderTarget(n,5),e.render(t,c),e.setRenderTarget(h),e.toneMapping=u,e.xr.enabled=f,n.texture.needsPMREMUpdate=!0}}class d7 extends b1{constructor(e,t,n,i,s,r,o,l,c,h){e=e!==void 0?e:[],t=t!==void 0?t:A2,super(e,t,n,i,s,r,o,l,c,h),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class Y6 extends P2{constructor(e,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const n={width:e,height:e,depth:1},i=[n,n,n,n,n,n];this.texture=new d7(i,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:!1,this.texture.minFilter=t.minFilter!==void 0?t.minFilter:y1}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.encoding=t.encoding,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new z2(5,5,5),s=new K1({name:"CubemapFromEquirect",uniforms:m5(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:C1,blending:u2});s.uniforms.tEquirect.value=t;const r=new S1(i,s),o=t.minFilter;return t.minFilter===q5&&(t.minFilter=y1),new J6(1,10,this).update(e,r),t.minFilter=o,r.geometry.dispose(),r.material.dispose(),this}clear(e,t,n,i){const s=e.getRenderTarget();for(let r=0;r<6;r++)e.setRenderTarget(this,r),e.clear(t,n,i);e.setRenderTarget(s)}}const z4=new A,Z6=new A,$6=new M1;class v2{constructor(e=new A(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,i){return this.normal.set(e,t,n),this.constant=i,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const i=z4.subVectors(n,t).cross(Z6.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(i,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)}intersectLine(e,t){const n=e.delta(z4),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const s=-(e.start.dot(this.normal)+this.constant)/i;return s<0||s>1?null:t.copy(n).multiplyScalar(s).add(e.start)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||$6.getNormalMatrix(e),i=this.coplanarPoint(z4).applyMatrix4(e),s=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(s),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const j2=new x5,g3=new A;class p7{constructor(e=new v2,t=new v2,n=new v2,i=new v2,s=new v2,r=new v2){this.planes=[e,t,n,i,s,r]}set(e,t,n,i,s,r){const o=this.planes;return o[0].copy(e),o[1].copy(t),o[2].copy(n),o[3].copy(i),o[4].copy(s),o[5].copy(r),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e){const t=this.planes,n=e.elements,i=n[0],s=n[1],r=n[2],o=n[3],l=n[4],c=n[5],h=n[6],u=n[7],f=n[8],d=n[9],g=n[10],m=n[11],p=n[12],x=n[13],_=n[14],M=n[15];return t[0].setComponents(o-i,u-l,m-f,M-p).normalize(),t[1].setComponents(o+i,u+l,m+f,M+p).normalize(),t[2].setComponents(o+s,u+c,m+d,M+x).normalize(),t[3].setComponents(o-s,u-c,m-d,M-x).normalize(),t[4].setComponents(o-r,u-h,m-g,M-_).normalize(),t[5].setComponents(o+r,u+h,m+g,M+_).normalize(),this}intersectsObject(e){const t=e.geometry;return t.boundingSphere===null&&t.computeBoundingSphere(),j2.copy(t.boundingSphere).applyMatrix4(e.matrixWorld),this.intersectsSphere(j2)}intersectsSprite(e){return j2.center.set(0,0,0),j2.radius=.7071067811865476,j2.applyMatrix4(e.matrixWorld),this.intersectsSphere(j2)}intersectsSphere(e){const t=this.planes,n=e.center,i=-e.radius;for(let s=0;s<6;s++)if(t[s].distanceToPoint(n)<i)return!1;return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const i=t[n];if(g3.x=i.normal.x>0?e.max.x:e.min.x,g3.y=i.normal.y>0?e.max.y:e.min.y,g3.z=i.normal.z>0?e.max.z:e.min.z,i.distanceToPoint(g3)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function Zt(){let a=null,e=!1,t=null,n=null;function i(s,r){t(s,r),n=a.requestAnimationFrame(i)}return{start:function(){e!==!0&&t!==null&&(n=a.requestAnimationFrame(i),e=!0)},stop:function(){a.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(s){t=s},setContext:function(s){a=s}}}function K6(a,e){const t=e.isWebGL2,n=new WeakMap;function i(c,h){const u=c.array,f=c.usage,d=a.createBuffer();a.bindBuffer(h,d),a.bufferData(h,u,f),c.onUploadCallback();let g;if(u instanceof Float32Array)g=5126;else if(u instanceof Uint16Array)if(c.isFloat16BufferAttribute)if(t)g=5131;else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");else g=5123;else if(u instanceof Int16Array)g=5122;else if(u instanceof Uint32Array)g=5125;else if(u instanceof Int32Array)g=5124;else if(u instanceof Int8Array)g=5120;else if(u instanceof Uint8Array)g=5121;else if(u instanceof Uint8ClampedArray)g=5121;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+u);return{buffer:d,type:g,bytesPerElement:u.BYTES_PER_ELEMENT,version:c.version}}function s(c,h,u){const f=h.array,d=h.updateRange;a.bindBuffer(u,c),d.count===-1?a.bufferSubData(u,0,f):(t?a.bufferSubData(u,d.offset*f.BYTES_PER_ELEMENT,f,d.offset,d.count):a.bufferSubData(u,d.offset*f.BYTES_PER_ELEMENT,f.subarray(d.offset,d.offset+d.count)),d.count=-1)}function r(c){return c.isInterleavedBufferAttribute&&(c=c.data),n.get(c)}function o(c){c.isInterleavedBufferAttribute&&(c=c.data);const h=n.get(c);h&&(a.deleteBuffer(h.buffer),n.delete(c))}function l(c,h){if(c.isGLBufferAttribute){const f=n.get(c);(!f||f.version<c.version)&&n.set(c,{buffer:c.buffer,type:c.type,bytesPerElement:c.elementSize,version:c.version});return}c.isInterleavedBufferAttribute&&(c=c.data);const u=n.get(c);u===void 0?n.set(c,i(c,h)):u.version<c.version&&(s(u.buffer,c,h),u.version=c.version)}return{get:r,remove:o,update:l}}class K3 extends Z0{constructor(e=1,t=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i};const s=e/2,r=t/2,o=Math.floor(n),l=Math.floor(i),c=o+1,h=l+1,u=e/o,f=t/l,d=[],g=[],m=[],p=[];for(let x=0;x<h;x++){const _=x*f-r;for(let M=0;M<c;M++){const y=M*u-s;g.push(y,-_,0),m.push(0,0,1),p.push(M/o),p.push(1-x/l)}}for(let x=0;x<l;x++)for(let _=0;_<o;_++){const M=_+c*x,y=_+c*(x+1),S=_+1+c*(x+1),T=_+1+c*x;d.push(M,y,T),d.push(y,S,T)}this.setIndex(d),this.setAttribute("position",new L0(g,3)),this.setAttribute("normal",new L0(m,3)),this.setAttribute("uv",new L0(p,2))}static fromJSON(e){return new K3(e.width,e.height,e.widthSegments,e.heightSegments)}}var Q6=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vUv ).g;
#endif`,j6=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,e9=`#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,t9=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,n9=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,i9=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,s9="vec3 transformed = vec3( position );",r9=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,a9=`vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
#ifdef USE_IRIDESCENCE
	vec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = mix( F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif`,o9=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			 return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float R21 = R12;
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,l9=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vUv );
		vec2 dSTdy = dFdy( vUv );
		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = dFdx( surf_pos.xyz );
		vec3 vSigmaY = dFdy( surf_pos.xyz );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,c9=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,h9=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,u9=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,f9=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,d9=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,p9=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,m9=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,g9=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,x9=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}`,_9=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_v0 0.339
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_v1 0.276
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_v4 0.046
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_v5 0.016
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_v6 0.0038
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,v9=`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,y9=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,M9=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );
#endif`,S9=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,b9=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,w9="gl_FragColor = linearToOutputTexel( gl_FragColor );",T9=`vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,A9=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,E9=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,C9=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,L9=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,P9=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,R9=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,D9=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,I9=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,N9=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,z9=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,F9=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vUv2 );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,O9=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,U9=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,B9=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert
#define Material_LightProbeLOD( material )	(0)`,k9=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( PHYSICALLY_CORRECT_LIGHTS )
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#else
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,V9=`#if defined( USE_ENVMAP )
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`,G9=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,H9=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon
#define Material_LightProbeLOD( material )	(0)`,W9=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,q9=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong
#define Material_LightProbeLOD( material )	(0)`,X9=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULARINTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;
		#endif
		#ifdef USE_SPECULARCOLORMAP
			specularColorFactor *= texture2D( specularColorMap, vUv ).rgb;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEENCOLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEENROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;
	#endif
#endif`,J9=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
	#endif
	#ifdef USE_IRIDESCENCE
		reflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );
	#else
		reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );
	#endif
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,Y9=`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometry.viewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,Z9=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry.normal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,$9=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,K9=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,Q9=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,j9=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,en=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,tn=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,nn=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,sn=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,rn=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	uniform mat3 uvTransform;
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,an=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vUv );
	metalnessFactor *= texelMetalness.b;
#endif`,on=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,ln=`#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,cn=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`,hn=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`,un=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`,fn=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	#ifdef USE_TANGENT
		vec3 tangent = normalize( vTangent );
		vec3 bitangent = normalize( vBitangent );
		#ifdef DOUBLE_SIDED
			tangent = tangent * faceDirection;
			bitangent = bitangent * faceDirection;
		#endif
		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )
			mat3 vTBN = mat3( tangent, bitangent, normal );
		#endif
	#endif
#endif
vec3 geometryNormal = normal;`,dn=`#ifdef OBJECTSPACE_NORMALMAP
	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( TANGENTSPACE_NORMALMAP )
	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	#ifdef USE_TANGENT
		normal = normalize( vTBN * mapN );
	#else
		normal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );
	#endif
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,pn=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,mn=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,gn=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,xn=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef OBJECTSPACE_NORMALMAP
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( vUv.st );
		vec2 st1 = dFdy( vUv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );
		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );
	}
#endif`,_n=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,vn=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	#ifdef USE_TANGENT
		clearcoatNormal = normalize( vTBN * clearcoatMapN );
	#else
		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );
	#endif
#endif`,yn=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif`,Mn=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,Sn=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,bn=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
	return linearClipZ * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * invClipZ - far );
}`,wn=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,Tn=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,An=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,En=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,Cn=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vUv );
	roughnessFactor *= texelRoughness.g;
#endif`,Ln=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,Pn=`#if NUM_SPOT_LIGHT_COORDS > 0
  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
  uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );
		bool inFrustum = all( inFrustumVec );
		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );
		bool frustumTest = all( frustumTestVec );
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,Rn=`#if NUM_SPOT_LIGHT_COORDS > 0
  uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,Dn=`#if defined( USE_SHADOWMAP ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_COORDS > 0 || NUM_POINT_LIGHT_SHADOWS > 0
		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		vec4 shadowWorldPosition;
	#endif
	#if NUM_DIR_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
#endif`,In=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,Nn=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,zn=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	uniform int boneTextureSize;
	mat4 getBoneMatrix( const in float i ) {
		float j = i * 4.0;
		float x = mod( j, float( boneTextureSize ) );
		float y = floor( j / float( boneTextureSize ) );
		float dx = 1.0 / float( boneTextureSize );
		float dy = 1.0 / float( boneTextureSize );
		y = dy * ( y + 0.5 );
		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
		mat4 bone = mat4( v1, v2, v3, v4 );
		return bone;
	}
#endif`,Fn=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,On=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,Un=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,Bn=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,kn=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,Vn=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,Gn=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );
#endif`,Hn=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		#ifdef texture2DLodEXT
			return texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#else
			return texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#endif
	}
	vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`,Wn=`#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )
	varying vec2 vUv;
#endif`,qn=`#ifdef USE_UV
	#ifdef UVS_VERTEX_ONLY
		vec2 vUv;
	#else
		varying vec2 vUv;
	#endif
	uniform mat3 uvTransform;
#endif`,Xn=`#ifdef USE_UV
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
#endif`,Jn=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	varying vec2 vUv2;
#endif`,Yn=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	attribute vec2 uv2;
	varying vec2 vUv2;
	uniform mat3 uv2Transform;
#endif`,Zn=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;
#endif`,$n=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const Kn=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,Qn=`uniform sampler2D t2D;
varying vec2 vUv;
void main() {
	gl_FragColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		gl_FragColor = vec4( mix( pow( gl_FragColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), gl_FragColor.rgb * 0.0773993808, vec3( lessThanEqual( gl_FragColor.rgb, vec3( 0.04045 ) ) ) ), gl_FragColor.w );
	#endif
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,jn=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,ei=`#include <envmap_common_pars_fragment>
uniform float opacity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	vec3 vReflect = vWorldDirection;
	#include <envmap_fragment>
	gl_FragColor = envColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,ti=`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,ni=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,ii=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,si=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,ri=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,ai=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,oi=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,li=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,ci=`#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,hi=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,ui=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,fi=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,di=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,pi=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,mi=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	vViewPosition = - mvPosition.xyz;
#endif
}`,gi=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,xi=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,_i=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,vi=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,yi=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULARINTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
	#ifdef USE_SPECULARCOLORMAP
		uniform sampler2D specularColorMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEENCOLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEENROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <bsdfs>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Mi=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Si=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,bi=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,wi=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Ti=`#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Ai=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,Ei=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,Ci=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,z0={alphamap_fragment:Q6,alphamap_pars_fragment:j6,alphatest_fragment:e9,alphatest_pars_fragment:t9,aomap_fragment:n9,aomap_pars_fragment:i9,begin_vertex:s9,beginnormal_vertex:r9,bsdfs:a9,iridescence_fragment:o9,bumpmap_pars_fragment:l9,clipping_planes_fragment:c9,clipping_planes_pars_fragment:h9,clipping_planes_pars_vertex:u9,clipping_planes_vertex:f9,color_fragment:d9,color_pars_fragment:p9,color_pars_vertex:m9,color_vertex:g9,common:x9,cube_uv_reflection_fragment:_9,defaultnormal_vertex:v9,displacementmap_pars_vertex:y9,displacementmap_vertex:M9,emissivemap_fragment:S9,emissivemap_pars_fragment:b9,encodings_fragment:w9,encodings_pars_fragment:T9,envmap_fragment:A9,envmap_common_pars_fragment:E9,envmap_pars_fragment:C9,envmap_pars_vertex:L9,envmap_physical_pars_fragment:V9,envmap_vertex:P9,fog_vertex:R9,fog_pars_vertex:D9,fog_fragment:I9,fog_pars_fragment:N9,gradientmap_pars_fragment:z9,lightmap_fragment:F9,lightmap_pars_fragment:O9,lights_lambert_fragment:U9,lights_lambert_pars_fragment:B9,lights_pars_begin:k9,lights_toon_fragment:G9,lights_toon_pars_fragment:H9,lights_phong_fragment:W9,lights_phong_pars_fragment:q9,lights_physical_fragment:X9,lights_physical_pars_fragment:J9,lights_fragment_begin:Y9,lights_fragment_maps:Z9,lights_fragment_end:$9,logdepthbuf_fragment:K9,logdepthbuf_pars_fragment:Q9,logdepthbuf_pars_vertex:j9,logdepthbuf_vertex:en,map_fragment:tn,map_pars_fragment:nn,map_particle_fragment:sn,map_particle_pars_fragment:rn,metalnessmap_fragment:an,metalnessmap_pars_fragment:on,morphcolor_vertex:ln,morphnormal_vertex:cn,morphtarget_pars_vertex:hn,morphtarget_vertex:un,normal_fragment_begin:fn,normal_fragment_maps:dn,normal_pars_fragment:pn,normal_pars_vertex:mn,normal_vertex:gn,normalmap_pars_fragment:xn,clearcoat_normal_fragment_begin:_n,clearcoat_normal_fragment_maps:vn,clearcoat_pars_fragment:yn,iridescence_pars_fragment:Mn,output_fragment:Sn,packing:bn,premultiplied_alpha_fragment:wn,project_vertex:Tn,dithering_fragment:An,dithering_pars_fragment:En,roughnessmap_fragment:Cn,roughnessmap_pars_fragment:Ln,shadowmap_pars_fragment:Pn,shadowmap_pars_vertex:Rn,shadowmap_vertex:Dn,shadowmask_pars_fragment:In,skinbase_vertex:Nn,skinning_pars_vertex:zn,skinning_vertex:Fn,skinnormal_vertex:On,specularmap_fragment:Un,specularmap_pars_fragment:Bn,tonemapping_fragment:kn,tonemapping_pars_fragment:Vn,transmission_fragment:Gn,transmission_pars_fragment:Hn,uv_pars_fragment:Wn,uv_pars_vertex:qn,uv_vertex:Xn,uv2_pars_fragment:Jn,uv2_pars_vertex:Yn,uv2_vertex:Zn,worldpos_vertex:$n,background_vert:Kn,background_frag:Qn,cube_vert:jn,cube_frag:ei,depth_vert:ti,depth_frag:ni,distanceRGBA_vert:ii,distanceRGBA_frag:si,equirect_vert:ri,equirect_frag:ai,linedashed_vert:oi,linedashed_frag:li,meshbasic_vert:ci,meshbasic_frag:hi,meshlambert_vert:ui,meshlambert_frag:fi,meshmatcap_vert:di,meshmatcap_frag:pi,meshnormal_vert:mi,meshnormal_frag:gi,meshphong_vert:xi,meshphong_frag:_i,meshphysical_vert:vi,meshphysical_frag:yi,meshtoon_vert:Mi,meshtoon_frag:Si,points_vert:bi,points_frag:wi,shadow_vert:Ti,shadow_frag:Ai,sprite_vert:Ei,sprite_frag:Ci},a0={common:{diffuse:{value:new M0(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new M1},uv2Transform:{value:new M1},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new $(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new M0(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new M0(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new M1}},sprite:{diffuse:{value:new M0(16777215)},opacity:{value:1},center:{value:new $(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new M1}}},B1={basic:{uniforms:u1([a0.common,a0.specularmap,a0.envmap,a0.aomap,a0.lightmap,a0.fog]),vertexShader:z0.meshbasic_vert,fragmentShader:z0.meshbasic_frag},lambert:{uniforms:u1([a0.common,a0.specularmap,a0.envmap,a0.aomap,a0.lightmap,a0.emissivemap,a0.bumpmap,a0.normalmap,a0.displacementmap,a0.fog,a0.lights,{emissive:{value:new M0(0)}}]),vertexShader:z0.meshlambert_vert,fragmentShader:z0.meshlambert_frag},phong:{uniforms:u1([a0.common,a0.specularmap,a0.envmap,a0.aomap,a0.lightmap,a0.emissivemap,a0.bumpmap,a0.normalmap,a0.displacementmap,a0.fog,a0.lights,{emissive:{value:new M0(0)},specular:{value:new M0(1118481)},shininess:{value:30}}]),vertexShader:z0.meshphong_vert,fragmentShader:z0.meshphong_frag},standard:{uniforms:u1([a0.common,a0.envmap,a0.aomap,a0.lightmap,a0.emissivemap,a0.bumpmap,a0.normalmap,a0.displacementmap,a0.roughnessmap,a0.metalnessmap,a0.fog,a0.lights,{emissive:{value:new M0(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:z0.meshphysical_vert,fragmentShader:z0.meshphysical_frag},toon:{uniforms:u1([a0.common,a0.aomap,a0.lightmap,a0.emissivemap,a0.bumpmap,a0.normalmap,a0.displacementmap,a0.gradientmap,a0.fog,a0.lights,{emissive:{value:new M0(0)}}]),vertexShader:z0.meshtoon_vert,fragmentShader:z0.meshtoon_frag},matcap:{uniforms:u1([a0.common,a0.bumpmap,a0.normalmap,a0.displacementmap,a0.fog,{matcap:{value:null}}]),vertexShader:z0.meshmatcap_vert,fragmentShader:z0.meshmatcap_frag},points:{uniforms:u1([a0.points,a0.fog]),vertexShader:z0.points_vert,fragmentShader:z0.points_frag},dashed:{uniforms:u1([a0.common,a0.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:z0.linedashed_vert,fragmentShader:z0.linedashed_frag},depth:{uniforms:u1([a0.common,a0.displacementmap]),vertexShader:z0.depth_vert,fragmentShader:z0.depth_frag},normal:{uniforms:u1([a0.common,a0.bumpmap,a0.normalmap,a0.displacementmap,{opacity:{value:1}}]),vertexShader:z0.meshnormal_vert,fragmentShader:z0.meshnormal_frag},sprite:{uniforms:u1([a0.sprite,a0.fog]),vertexShader:z0.sprite_vert,fragmentShader:z0.sprite_frag},background:{uniforms:{uvTransform:{value:new M1},t2D:{value:null}},vertexShader:z0.background_vert,fragmentShader:z0.background_frag},cube:{uniforms:u1([a0.envmap,{opacity:{value:1}}]),vertexShader:z0.cube_vert,fragmentShader:z0.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:z0.equirect_vert,fragmentShader:z0.equirect_frag},distanceRGBA:{uniforms:u1([a0.common,a0.displacementmap,{referencePosition:{value:new A},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:z0.distanceRGBA_vert,fragmentShader:z0.distanceRGBA_frag},shadow:{uniforms:u1([a0.lights,a0.fog,{color:{value:new M0(0)},opacity:{value:1}}]),vertexShader:z0.shadow_vert,fragmentShader:z0.shadow_frag}};B1.physical={uniforms:u1([B1.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new $(1,1)},clearcoatNormalMap:{value:null},iridescence:{value:0},iridescenceMap:{value:null},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},sheen:{value:0},sheenColor:{value:new M0(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new $},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new M0(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new M0(1,1,1)},specularColorMap:{value:null}}]),vertexShader:z0.meshphysical_vert,fragmentShader:z0.meshphysical_frag};function Li(a,e,t,n,i,s){const r=new M0(0);let o=i===!0?0:1,l,c,h=null,u=0,f=null;function d(m,p){let x=!1,_=p.isScene===!0?p.background:null;_&&_.isTexture&&(_=e.get(_));const M=a.xr,y=M.getSession&&M.getSession();y&&y.environmentBlendMode==="additive"&&(_=null),_===null?g(r,o):_&&_.isColor&&(g(_,1),x=!0),(a.autoClear||x)&&a.clear(a.autoClearColor,a.autoClearDepth,a.autoClearStencil),_&&(_.isCubeTexture||_.mapping===W5)?(c===void 0&&(c=new S1(new z2(1,1,1),new K1({name:"BackgroundCubeMaterial",uniforms:m5(B1.cube.uniforms),vertexShader:B1.cube.vertexShader,fragmentShader:B1.cube.fragmentShader,side:C1,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),c.geometry.deleteAttribute("uv"),c.onBeforeRender=function(S,T,L){this.matrixWorld.copyPosition(L.matrixWorld)},Object.defineProperty(c.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),n.update(c)),c.material.uniforms.envMap.value=_,c.material.uniforms.flipEnvMap.value=_.isCubeTexture&&_.isRenderTargetTexture===!1?-1:1,(h!==_||u!==_.version||f!==a.toneMapping)&&(c.material.needsUpdate=!0,h=_,u=_.version,f=a.toneMapping),c.layers.enableAll(),m.unshift(c,c.geometry,c.material,0,0,null)):_&&_.isTexture&&(l===void 0&&(l=new S1(new K3(2,2),new K1({name:"BackgroundMaterial",uniforms:m5(B1.background.uniforms),vertexShader:B1.background.vertexShader,fragmentShader:B1.background.fragmentShader,side:d5,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),Object.defineProperty(l.material,"map",{get:function(){return this.uniforms.t2D.value}}),n.update(l)),l.material.uniforms.t2D.value=_,_.matrixAutoUpdate===!0&&_.updateMatrix(),l.material.uniforms.uvTransform.value.copy(_.matrix),(h!==_||u!==_.version||f!==a.toneMapping)&&(l.material.needsUpdate=!0,h=_,u=_.version,f=a.toneMapping),l.layers.enableAll(),m.unshift(l,l.geometry,l.material,0,0,null))}function g(m,p){t.buffers.color.setClear(m.r,m.g,m.b,p,s)}return{getClearColor:function(){return r},setClearColor:function(m,p=1){r.set(m),o=p,g(r,o)},getClearAlpha:function(){return o},setClearAlpha:function(m){o=m,g(r,o)},render:d}}function Pi(a,e,t,n){const i=a.getParameter(34921),s=n.isWebGL2?null:e.get("OES_vertex_array_object"),r=n.isWebGL2||s!==null,o={},l=p(null);let c=l,h=!1;function u(D,V,Z,K,H){let N=!1;if(r){const O=m(K,Z,V);c!==O&&(c=O,d(c.object)),N=x(D,K,Z,H),N&&_(D,K,Z,H)}else{const O=V.wireframe===!0;(c.geometry!==K.id||c.program!==Z.id||c.wireframe!==O)&&(c.geometry=K.id,c.program=Z.id,c.wireframe=O,N=!0)}H!==null&&t.update(H,34963),(N||h)&&(h=!1,v(D,V,Z,K),H!==null&&a.bindBuffer(34963,t.get(H).buffer))}function f(){return n.isWebGL2?a.createVertexArray():s.createVertexArrayOES()}function d(D){return n.isWebGL2?a.bindVertexArray(D):s.bindVertexArrayOES(D)}function g(D){return n.isWebGL2?a.deleteVertexArray(D):s.deleteVertexArrayOES(D)}function m(D,V,Z){const K=Z.wireframe===!0;let H=o[D.id];H===void 0&&(H={},o[D.id]=H);let N=H[V.id];N===void 0&&(N={},H[V.id]=N);let O=N[K];return O===void 0&&(O=p(f()),N[K]=O),O}function p(D){const V=[],Z=[],K=[];for(let H=0;H<i;H++)V[H]=0,Z[H]=0,K[H]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:V,enabledAttributes:Z,attributeDivisors:K,object:D,attributes:{},index:null}}function x(D,V,Z,K){const H=c.attributes,N=V.attributes;let O=0;const j=Z.getAttributes();for(const e0 in j)if(j[e0].location>=0){const f0=H[e0];let T0=N[e0];if(T0===void 0&&(e0==="instanceMatrix"&&D.instanceMatrix&&(T0=D.instanceMatrix),e0==="instanceColor"&&D.instanceColor&&(T0=D.instanceColor)),f0===void 0||f0.attribute!==T0||T0&&f0.data!==T0.data)return!0;O++}return c.attributesNum!==O||c.index!==K}function _(D,V,Z,K){const H={},N=V.attributes;let O=0;const j=Z.getAttributes();for(const e0 in j)if(j[e0].location>=0){let f0=N[e0];f0===void 0&&(e0==="instanceMatrix"&&D.instanceMatrix&&(f0=D.instanceMatrix),e0==="instanceColor"&&D.instanceColor&&(f0=D.instanceColor));const T0={};T0.attribute=f0,f0&&f0.data&&(T0.data=f0.data),H[e0]=T0,O++}c.attributes=H,c.attributesNum=O,c.index=K}function M(){const D=c.newAttributes;for(let V=0,Z=D.length;V<Z;V++)D[V]=0}function y(D){S(D,0)}function S(D,V){const Z=c.newAttributes,K=c.enabledAttributes,H=c.attributeDivisors;Z[D]=1,K[D]===0&&(a.enableVertexAttribArray(D),K[D]=1),H[D]!==V&&((n.isWebGL2?a:e.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](D,V),H[D]=V)}function T(){const D=c.newAttributes,V=c.enabledAttributes;for(let Z=0,K=V.length;Z<K;Z++)V[Z]!==D[Z]&&(a.disableVertexAttribArray(Z),V[Z]=0)}function L(D,V,Z,K,H,N){n.isWebGL2===!0&&(Z===5124||Z===5125)?a.vertexAttribIPointer(D,V,Z,H,N):a.vertexAttribPointer(D,V,Z,K,H,N)}function v(D,V,Z,K){if(n.isWebGL2===!1&&(D.isInstancedMesh||K.isInstancedBufferGeometry)&&e.get("ANGLE_instanced_arrays")===null)return;M();const H=K.attributes,N=Z.getAttributes(),O=V.defaultAttributeValues;for(const j in N){const e0=N[j];if(e0.location>=0){let t0=H[j];if(t0===void 0&&(j==="instanceMatrix"&&D.instanceMatrix&&(t0=D.instanceMatrix),j==="instanceColor"&&D.instanceColor&&(t0=D.instanceColor)),t0!==void 0){const f0=t0.normalized,T0=t0.itemSize,q=t.get(t0);if(q===void 0)continue;const I0=q.buffer,v0=q.type,A0=q.bytesPerElement;if(t0.isInterleavedBufferAttribute){const c0=t0.data,F0=c0.stride,J=t0.offset;if(c0.isInstancedInterleavedBuffer){for(let W=0;W<e0.locationSize;W++)S(e0.location+W,c0.meshPerAttribute);D.isInstancedMesh!==!0&&K._maxInstanceCount===void 0&&(K._maxInstanceCount=c0.meshPerAttribute*c0.count)}else for(let W=0;W<e0.locationSize;W++)y(e0.location+W);a.bindBuffer(34962,I0);for(let W=0;W<e0.locationSize;W++)L(e0.location+W,T0/e0.locationSize,v0,f0,F0*A0,(J+T0/e0.locationSize*W)*A0)}else{if(t0.isInstancedBufferAttribute){for(let c0=0;c0<e0.locationSize;c0++)S(e0.location+c0,t0.meshPerAttribute);D.isInstancedMesh!==!0&&K._maxInstanceCount===void 0&&(K._maxInstanceCount=t0.meshPerAttribute*t0.count)}else for(let c0=0;c0<e0.locationSize;c0++)y(e0.location+c0);a.bindBuffer(34962,I0);for(let c0=0;c0<e0.locationSize;c0++)L(e0.location+c0,T0/e0.locationSize,v0,f0,T0*A0,T0/e0.locationSize*c0*A0)}}else if(O!==void 0){const f0=O[j];if(f0!==void 0)switch(f0.length){case 2:a.vertexAttrib2fv(e0.location,f0);break;case 3:a.vertexAttrib3fv(e0.location,f0);break;case 4:a.vertexAttrib4fv(e0.location,f0);break;default:a.vertexAttrib1fv(e0.location,f0)}}}}T()}function E(){Q();for(const D in o){const V=o[D];for(const Z in V){const K=V[Z];for(const H in K)g(K[H].object),delete K[H];delete V[Z]}delete o[D]}}function P(D){if(o[D.id]===void 0)return;const V=o[D.id];for(const Z in V){const K=V[Z];for(const H in K)g(K[H].object),delete K[H];delete V[Z]}delete o[D.id]}function B(D){for(const V in o){const Z=o[V];if(Z[D.id]===void 0)continue;const K=Z[D.id];for(const H in K)g(K[H].object),delete K[H];delete Z[D.id]}}function Q(){F(),h=!0,c!==l&&(c=l,d(c.object))}function F(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:u,reset:Q,resetDefaultState:F,dispose:E,releaseStatesOfGeometry:P,releaseStatesOfProgram:B,initAttributes:M,enableAttribute:y,disableUnusedAttributes:T}}function Ri(a,e,t,n){const i=n.isWebGL2;let s;function r(c){s=c}function o(c,h){a.drawArrays(s,c,h),t.update(h,s,1)}function l(c,h,u){if(u===0)return;let f,d;if(i)f=a,d="drawArraysInstanced";else if(f=e.get("ANGLE_instanced_arrays"),d="drawArraysInstancedANGLE",f===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}f[d](s,c,h,u),t.update(h,s,u)}this.setMode=r,this.render=o,this.renderInstances=l}function Di(a,e,t){let n;function i(){if(n!==void 0)return n;if(e.has("EXT_texture_filter_anisotropic")===!0){const L=e.get("EXT_texture_filter_anisotropic");n=a.getParameter(L.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n}function s(L){if(L==="highp"){if(a.getShaderPrecisionFormat(35633,36338).precision>0&&a.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";L="mediump"}return L==="mediump"&&a.getShaderPrecisionFormat(35633,36337).precision>0&&a.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const r=typeof WebGL2RenderingContext<"u"&&a instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext<"u"&&a instanceof WebGL2ComputeRenderingContext;let o=t.precision!==void 0?t.precision:"highp";const l=s(o);l!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",l,"instead."),o=l);const c=r||e.has("WEBGL_draw_buffers"),h=t.logarithmicDepthBuffer===!0,u=a.getParameter(34930),f=a.getParameter(35660),d=a.getParameter(3379),g=a.getParameter(34076),m=a.getParameter(34921),p=a.getParameter(36347),x=a.getParameter(36348),_=a.getParameter(36349),M=f>0,y=r||e.has("OES_texture_float"),S=M&&y,T=r?a.getParameter(36183):0;return{isWebGL2:r,drawBuffers:c,getMaxAnisotropy:i,getMaxPrecision:s,precision:o,logarithmicDepthBuffer:h,maxTextures:u,maxVertexTextures:f,maxTextureSize:d,maxCubemapSize:g,maxAttributes:m,maxVertexUniforms:p,maxVaryings:x,maxFragmentUniforms:_,vertexTextures:M,floatFragmentTextures:y,floatVertexTextures:S,maxSamples:T}}function Ii(a){const e=this;let t=null,n=0,i=!1,s=!1;const r=new v2,o=new M1,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(u,f,d){const g=u.length!==0||f||n!==0||i;return i=f,t=h(u,d,0),n=u.length,g},this.beginShadows=function(){s=!0,h(null)},this.endShadows=function(){s=!1,c()},this.setState=function(u,f,d){const g=u.clippingPlanes,m=u.clipIntersection,p=u.clipShadows,x=a.get(u);if(!i||g===null||g.length===0||s&&!p)s?h(null):c();else{const _=s?0:n,M=_*4;let y=x.clippingState||null;l.value=y,y=h(g,f,M,d);for(let S=0;S!==M;++S)y[S]=t[S];x.clippingState=y,this.numIntersection=m?this.numPlanes:0,this.numPlanes+=_}};function c(){l.value!==t&&(l.value=t,l.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function h(u,f,d,g){const m=u!==null?u.length:0;let p=null;if(m!==0){if(p=l.value,g!==!0||p===null){const x=d+m*4,_=f.matrixWorldInverse;o.getNormalMatrix(_),(p===null||p.length<x)&&(p=new Float32Array(x));for(let M=0,y=d;M!==m;++M,y+=4)r.copy(u[M]).applyMatrix4(_,o),r.normal.toArray(p,y),p[y+3]=r.constant}l.value=p,l.needsUpdate=!0}return e.numPlanes=m,e.numIntersection=0,p}}function Ni(a){let e=new WeakMap;function t(r,o){return o===O3?r.mapping=A2:o===U3&&(r.mapping=E2),r}function n(r){if(r&&r.isTexture&&r.isRenderTargetTexture===!1){const o=r.mapping;if(o===O3||o===U3)if(e.has(r)){const l=e.get(r).texture;return t(l,r.mapping)}else{const l=r.image;if(l&&l.height>0){const c=new Y6(l.height/2);return c.fromEquirectangularTexture(a,r),e.set(r,c),r.addEventListener("dispose",i),t(c.texture,r.mapping)}else return null}}return r}function i(r){const o=r.target;o.removeEventListener("dispose",i);const l=e.get(o);l!==void 0&&(e.delete(o),l.dispose())}function s(){e=new WeakMap}return{get:n,dispose:s}}class m7 extends Yt{constructor(e=-1,t=1,n=1,i=-1,s=.1,r=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=i,this.near=s,this.far=r,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,i,s,r){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=r,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let s=n-e,r=n+e,o=i+t,l=i-t;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,h=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=c*this.view.offsetX,r=s+c*this.view.width,o-=h*this.view.offsetY,l=o-h*this.view.height}this.projectionMatrix.makeOrthographic(s,r,o,l,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}const c5=4,ze=[.125,.215,.35,.446,.526,.582],M2=20,F4=new m7,Fe=new M0;let O4=null;const y2=(1+Math.sqrt(5))/2,e5=1/y2,Oe=[new A(1,1,1),new A(-1,1,1),new A(1,1,-1),new A(-1,1,-1),new A(0,y2,e5),new A(0,y2,-e5),new A(e5,0,y2),new A(-e5,0,y2),new A(y2,e5,0),new A(-y2,e5,0)];class Ue{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,i=100){O4=this._renderer.getRenderTarget(),this._setSize(256);const s=this._allocateTargets();return s.depthBuffer=!0,this._sceneToCubeUV(e,n,i,s),t>0&&this._blur(s,0,0,t),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=Ve(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=ke(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(O4),e.scissorTest=!1,x3(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===A2||e.mapping===E2?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),O4=this._renderer.getRenderTarget();const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:y1,minFilter:y1,generateMipmaps:!1,type:U5,format:F1,encoding:L2,depthBuffer:!1},i=Be(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=Be(e,t,n);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=zi(s)),this._blurMaterial=Fi(s,e,t)}return i}_compileMaterial(e){const t=new S1(this._lodPlanes[0],e);this._renderer.compile(t,F4)}_sceneToCubeUV(e,t,n,i){const o=new p1(90,1,t,n),l=[1,-1,1,1,1,1],c=[1,1,1,-1,-1,-1],h=this._renderer,u=h.autoClear,f=h.toneMapping;h.getClearColor(Fe),h.toneMapping=$1,h.autoClear=!1;const d=new f7({name:"PMREM.Background",side:C1,depthWrite:!1,depthTest:!1}),g=new S1(new z2,d);let m=!1;const p=e.background;p?p.isColor&&(d.color.copy(p),e.background=null,m=!0):(d.color.copy(Fe),m=!0);for(let x=0;x<6;x++){const _=x%3;_===0?(o.up.set(0,l[x],0),o.lookAt(c[x],0,0)):_===1?(o.up.set(0,0,l[x]),o.lookAt(0,c[x],0)):(o.up.set(0,l[x],0),o.lookAt(0,0,c[x]));const M=this._cubeSize;x3(i,_*M,x>2?M:0,M,M),h.setRenderTarget(i),m&&h.render(g,o),h.render(e,o)}g.geometry.dispose(),g.material.dispose(),h.toneMapping=f,h.autoClear=u,e.background=p}_textureToCubeUV(e,t){const n=this._renderer,i=e.mapping===A2||e.mapping===E2;i?(this._cubemapMaterial===null&&(this._cubemapMaterial=Ve()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=ke());const s=i?this._cubemapMaterial:this._equirectMaterial,r=new S1(this._lodPlanes[0],s),o=s.uniforms;o.envMap.value=e;const l=this._cubeSize;x3(t,0,0,3*l,2*l),n.setRenderTarget(t),n.render(r,F4)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;for(let i=1;i<this._lodPlanes.length;i++){const s=Math.sqrt(this._sigmas[i]*this._sigmas[i]-this._sigmas[i-1]*this._sigmas[i-1]),r=Oe[(i-1)%Oe.length];this._blur(e,i-1,i,s,r)}t.autoClear=n}_blur(e,t,n,i,s){const r=this._pingPongRenderTarget;this._halfBlur(e,r,t,n,i,"latitudinal",s),this._halfBlur(r,e,n,n,i,"longitudinal",s)}_halfBlur(e,t,n,i,s,r,o){const l=this._renderer,c=this._blurMaterial;r!=="latitudinal"&&r!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const h=3,u=new S1(this._lodPlanes[i],c),f=c.uniforms,d=this._sizeLods[n]-1,g=isFinite(s)?Math.PI/(2*d):2*Math.PI/(2*M2-1),m=s/g,p=isFinite(s)?1+Math.floor(h*m):M2;p>M2&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${p} samples when the maximum is set to ${M2}`);const x=[];let _=0;for(let L=0;L<M2;++L){const v=L/m,E=Math.exp(-v*v/2);x.push(E),L===0?_+=E:L<p&&(_+=2*E)}for(let L=0;L<x.length;L++)x[L]=x[L]/_;f.envMap.value=e.texture,f.samples.value=p,f.weights.value=x,f.latitudinal.value=r==="latitudinal",o&&(f.poleAxis.value=o);const{_lodMax:M}=this;f.dTheta.value=g,f.mipInt.value=M-n;const y=this._sizeLods[i],S=3*y*(i>M-c5?i-M+c5:0),T=4*(this._cubeSize-y);x3(t,S,T,3*y,2*y),l.setRenderTarget(t),l.render(u,F4)}}function zi(a){const e=[],t=[],n=[];let i=a;const s=a-c5+1+ze.length;for(let r=0;r<s;r++){const o=Math.pow(2,i);t.push(o);let l=1/o;r>a-c5?l=ze[r-a+c5-1]:r===0&&(l=0),n.push(l);const c=1/(o-2),h=-c,u=1+c,f=[h,h,u,h,u,u,h,h,u,u,h,u],d=6,g=6,m=3,p=2,x=1,_=new Float32Array(m*g*d),M=new Float32Array(p*g*d),y=new Float32Array(x*g*d);for(let T=0;T<d;T++){const L=T%3*2/3-1,v=T>2?0:-1,E=[L,v,0,L+2/3,v,0,L+2/3,v+1,0,L,v,0,L+2/3,v+1,0,L,v+1,0];_.set(E,m*g*T),M.set(f,p*g*T);const P=[T,T,T,T,T,T];y.set(P,x*g*T)}const S=new Z0;S.setAttribute("position",new m1(_,m)),S.setAttribute("uv",new m1(M,p)),S.setAttribute("faceIndex",new m1(y,x)),e.push(S),i>c5&&i--}return{lodPlanes:e,sizeLods:t,sigmas:n}}function Be(a,e,t){const n=new P2(a,e,t);return n.texture.mapping=W5,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function x3(a,e,t,n,i){a.viewport.set(e,t,n,i),a.scissor.set(e,t,n,i)}function Fi(a,e,t){const n=new Float32Array(M2),i=new A(0,1,0);return new K1({name:"SphericalGaussianBlur",defines:{n:M2,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${a}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:i}},vertexShader:g7(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:u2,depthTest:!1,depthWrite:!1})}function ke(){return new K1({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:g7(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:u2,depthTest:!1,depthWrite:!1})}function Ve(){return new K1({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:g7(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:u2,depthTest:!1,depthWrite:!1})}function g7(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function Oi(a){let e=new WeakMap,t=null;function n(o){if(o&&o.isTexture){const l=o.mapping,c=l===O3||l===U3,h=l===A2||l===E2;if(c||h)if(o.isRenderTargetTexture&&o.needsPMREMUpdate===!0){o.needsPMREMUpdate=!1;let u=e.get(o);return t===null&&(t=new Ue(a)),u=c?t.fromEquirectangular(o,u):t.fromCubemap(o,u),e.set(o,u),u.texture}else{if(e.has(o))return e.get(o).texture;{const u=o.image;if(c&&u&&u.height>0||h&&u&&i(u)){t===null&&(t=new Ue(a));const f=c?t.fromEquirectangular(o):t.fromCubemap(o);return e.set(o,f),o.addEventListener("dispose",s),f.texture}else return null}}}return o}function i(o){let l=0;const c=6;for(let h=0;h<c;h++)o[h]!==void 0&&l++;return l===c}function s(o){const l=o.target;l.removeEventListener("dispose",s);const c=e.get(l);c!==void 0&&(e.delete(l),c.dispose())}function r(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:n,dispose:r}}function Ui(a){const e={};function t(n){if(e[n]!==void 0)return e[n];let i;switch(n){case"WEBGL_depth_texture":i=a.getExtension("WEBGL_depth_texture")||a.getExtension("MOZ_WEBGL_depth_texture")||a.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=a.getExtension("EXT_texture_filter_anisotropic")||a.getExtension("MOZ_EXT_texture_filter_anisotropic")||a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=a.getExtension("WEBGL_compressed_texture_s3tc")||a.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=a.getExtension("WEBGL_compressed_texture_pvrtc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=a.getExtension(n)}return e[n]=i,i}return{has:function(n){return t(n)!==null},init:function(n){n.isWebGL2?t("EXT_color_buffer_float"):(t("WEBGL_depth_texture"),t("OES_texture_float"),t("OES_texture_half_float"),t("OES_texture_half_float_linear"),t("OES_standard_derivatives"),t("OES_element_index_uint"),t("OES_vertex_array_object"),t("ANGLE_instanced_arrays")),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture")},get:function(n){const i=t(n);return i===null&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),i}}}function Bi(a,e,t,n){const i={},s=new WeakMap;function r(u){const f=u.target;f.index!==null&&e.remove(f.index);for(const g in f.attributes)e.remove(f.attributes[g]);f.removeEventListener("dispose",r),delete i[f.id];const d=s.get(f);d&&(e.remove(d),s.delete(f)),n.releaseStatesOfGeometry(f),f.isInstancedBufferGeometry===!0&&delete f._maxInstanceCount,t.memory.geometries--}function o(u,f){return i[f.id]===!0||(f.addEventListener("dispose",r),i[f.id]=!0,t.memory.geometries++),f}function l(u){const f=u.attributes;for(const g in f)e.update(f[g],34962);const d=u.morphAttributes;for(const g in d){const m=d[g];for(let p=0,x=m.length;p<x;p++)e.update(m[p],34962)}}function c(u){const f=[],d=u.index,g=u.attributes.position;let m=0;if(d!==null){const _=d.array;m=d.version;for(let M=0,y=_.length;M<y;M+=3){const S=_[M+0],T=_[M+1],L=_[M+2];f.push(S,T,T,L,L,S)}}else{const _=g.array;m=g.version;for(let M=0,y=_.length/3-1;M<y;M+=3){const S=M+0,T=M+1,L=M+2;f.push(S,T,T,L,L,S)}}const p=new(Gt(f)?Jt:Xt)(f,1);p.version=m;const x=s.get(u);x&&e.remove(x),s.set(u,p)}function h(u){const f=s.get(u);if(f){const d=u.index;d!==null&&f.version<d.version&&c(u)}else c(u);return s.get(u)}return{get:o,update:l,getWireframeAttribute:h}}function ki(a,e,t,n){const i=n.isWebGL2;let s;function r(f){s=f}let o,l;function c(f){o=f.type,l=f.bytesPerElement}function h(f,d){a.drawElements(s,d,o,f*l),t.update(d,s,1)}function u(f,d,g){if(g===0)return;let m,p;if(i)m=a,p="drawElementsInstanced";else if(m=e.get("ANGLE_instanced_arrays"),p="drawElementsInstancedANGLE",m===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}m[p](s,d,o,f*l,g),t.update(d,s,g)}this.setMode=r,this.setIndex=c,this.render=h,this.renderInstances=u}function Vi(a){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(s,r,o){switch(t.calls++,r){case 4:t.triangles+=o*(s/3);break;case 1:t.lines+=o*(s/2);break;case 3:t.lines+=o*(s-1);break;case 2:t.lines+=o*s;break;case 0:t.points+=o*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",r);break}}function i(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:i,update:n}}function Gi(a,e){return a[0]-e[0]}function Hi(a,e){return Math.abs(e[1])-Math.abs(a[1])}function Wi(a,e,t){const n={},i=new Float32Array(8),s=new WeakMap,r=new H0,o=[];for(let c=0;c<8;c++)o[c]=[c,0];function l(c,h,u,f){const d=c.morphTargetInfluences;if(e.isWebGL2===!0){const m=h.morphAttributes.position||h.morphAttributes.normal||h.morphAttributes.color,p=m!==void 0?m.length:0;let x=s.get(h);if(x===void 0||x.count!==p){let Z=function(){D.dispose(),s.delete(h),h.removeEventListener("dispose",Z)};var g=Z;x!==void 0&&x.texture.dispose();const y=h.morphAttributes.position!==void 0,S=h.morphAttributes.normal!==void 0,T=h.morphAttributes.color!==void 0,L=h.morphAttributes.position||[],v=h.morphAttributes.normal||[],E=h.morphAttributes.color||[];let P=0;y===!0&&(P=1),S===!0&&(P=2),T===!0&&(P=3);let B=h.attributes.position.count*P,Q=1;B>e.maxTextureSize&&(Q=Math.ceil(B/e.maxTextureSize),B=e.maxTextureSize);const F=new Float32Array(B*Q*4*p),D=new qt(F,B,Q,p);D.type=c2,D.needsUpdate=!0;const V=P*4;for(let K=0;K<p;K++){const H=L[K],N=v[K],O=E[K],j=B*Q*4*K;for(let e0=0;e0<H.count;e0++){const t0=e0*V;y===!0&&(r.fromBufferAttribute(H,e0),F[j+t0+0]=r.x,F[j+t0+1]=r.y,F[j+t0+2]=r.z,F[j+t0+3]=0),S===!0&&(r.fromBufferAttribute(N,e0),F[j+t0+4]=r.x,F[j+t0+5]=r.y,F[j+t0+6]=r.z,F[j+t0+7]=0),T===!0&&(r.fromBufferAttribute(O,e0),F[j+t0+8]=r.x,F[j+t0+9]=r.y,F[j+t0+10]=r.z,F[j+t0+11]=O.itemSize===4?r.w:1)}}x={count:p,texture:D,size:new $(B,Q)},s.set(h,x),h.addEventListener("dispose",Z)}let _=0;for(let y=0;y<d.length;y++)_+=d[y];const M=h.morphTargetsRelative?1:1-_;f.getUniforms().setValue(a,"morphTargetBaseInfluence",M),f.getUniforms().setValue(a,"morphTargetInfluences",d),f.getUniforms().setValue(a,"morphTargetsTexture",x.texture,t),f.getUniforms().setValue(a,"morphTargetsTextureSize",x.size)}else{const m=d===void 0?0:d.length;let p=n[h.id];if(p===void 0||p.length!==m){p=[];for(let S=0;S<m;S++)p[S]=[S,0];n[h.id]=p}for(let S=0;S<m;S++){const T=p[S];T[0]=S,T[1]=d[S]}p.sort(Hi);for(let S=0;S<8;S++)S<m&&p[S][1]?(o[S][0]=p[S][0],o[S][1]=p[S][1]):(o[S][0]=Number.MAX_SAFE_INTEGER,o[S][1]=0);o.sort(Gi);const x=h.morphAttributes.position,_=h.morphAttributes.normal;let M=0;for(let S=0;S<8;S++){const T=o[S],L=T[0],v=T[1];L!==Number.MAX_SAFE_INTEGER&&v?(x&&h.getAttribute("morphTarget"+S)!==x[L]&&h.setAttribute("morphTarget"+S,x[L]),_&&h.getAttribute("morphNormal"+S)!==_[L]&&h.setAttribute("morphNormal"+S,_[L]),i[S]=v,M+=v):(x&&h.hasAttribute("morphTarget"+S)===!0&&h.deleteAttribute("morphTarget"+S),_&&h.hasAttribute("morphNormal"+S)===!0&&h.deleteAttribute("morphNormal"+S),i[S]=0)}const y=h.morphTargetsRelative?1:1-M;f.getUniforms().setValue(a,"morphTargetBaseInfluence",y),f.getUniforms().setValue(a,"morphTargetInfluences",i)}}return{update:l}}function qi(a,e,t,n){let i=new WeakMap;function s(l){const c=n.render.frame,h=l.geometry,u=e.get(l,h);return i.get(u)!==c&&(e.update(u),i.set(u,c)),l.isInstancedMesh&&(l.hasEventListener("dispose",o)===!1&&l.addEventListener("dispose",o),t.update(l.instanceMatrix,34962),l.instanceColor!==null&&t.update(l.instanceColor,34962)),u}function r(){i=new WeakMap}function o(l){const c=l.target;c.removeEventListener("dispose",o),t.remove(c.instanceMatrix),c.instanceColor!==null&&t.remove(c.instanceColor)}return{update:s,dispose:r}}const $t=new b1,Kt=new qt,Qt=new D6,jt=new d7,Ge=[],He=[],We=new Float32Array(16),qe=new Float32Array(9),Xe=new Float32Array(4);function v5(a,e,t){const n=a[0];if(n<=0||n>0)return a;const i=e*t;let s=Ge[i];if(s===void 0&&(s=new Float32Array(i),Ge[i]=s),e!==0){n.toArray(s,0);for(let r=1,o=0;r!==e;++r)o+=t,a[r].toArray(s,o)}return s}function s1(a,e){if(a.length!==e.length)return!1;for(let t=0,n=a.length;t<n;t++)if(a[t]!==e[t])return!1;return!0}function r1(a,e){for(let t=0,n=e.length;t<n;t++)a[t]=e[t]}function Q3(a,e){let t=He[e];t===void 0&&(t=new Int32Array(e),He[e]=t);for(let n=0;n!==e;++n)t[n]=a.allocateTextureUnit();return t}function Xi(a,e){const t=this.cache;t[0]!==e&&(a.uniform1f(this.addr,e),t[0]=e)}function Ji(a,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(a.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(s1(t,e))return;a.uniform2fv(this.addr,e),r1(t,e)}}function Yi(a,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(a.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(a.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(s1(t,e))return;a.uniform3fv(this.addr,e),r1(t,e)}}function Zi(a,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(a.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(s1(t,e))return;a.uniform4fv(this.addr,e),r1(t,e)}}function $i(a,e){const t=this.cache,n=e.elements;if(n===void 0){if(s1(t,e))return;a.uniformMatrix2fv(this.addr,!1,e),r1(t,e)}else{if(s1(t,n))return;Xe.set(n),a.uniformMatrix2fv(this.addr,!1,Xe),r1(t,n)}}function Ki(a,e){const t=this.cache,n=e.elements;if(n===void 0){if(s1(t,e))return;a.uniformMatrix3fv(this.addr,!1,e),r1(t,e)}else{if(s1(t,n))return;qe.set(n),a.uniformMatrix3fv(this.addr,!1,qe),r1(t,n)}}function Qi(a,e){const t=this.cache,n=e.elements;if(n===void 0){if(s1(t,e))return;a.uniformMatrix4fv(this.addr,!1,e),r1(t,e)}else{if(s1(t,n))return;We.set(n),a.uniformMatrix4fv(this.addr,!1,We),r1(t,n)}}function ji(a,e){const t=this.cache;t[0]!==e&&(a.uniform1i(this.addr,e),t[0]=e)}function es(a,e){const t=this.cache;s1(t,e)||(a.uniform2iv(this.addr,e),r1(t,e))}function ts(a,e){const t=this.cache;s1(t,e)||(a.uniform3iv(this.addr,e),r1(t,e))}function ns(a,e){const t=this.cache;s1(t,e)||(a.uniform4iv(this.addr,e),r1(t,e))}function is(a,e){const t=this.cache;t[0]!==e&&(a.uniform1ui(this.addr,e),t[0]=e)}function ss(a,e){const t=this.cache;s1(t,e)||(a.uniform2uiv(this.addr,e),r1(t,e))}function rs(a,e){const t=this.cache;s1(t,e)||(a.uniform3uiv(this.addr,e),r1(t,e))}function as(a,e){const t=this.cache;s1(t,e)||(a.uniform4uiv(this.addr,e),r1(t,e))}function os(a,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(a.uniform1i(this.addr,i),n[0]=i),t.setTexture2D(e||$t,i)}function ls(a,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(a.uniform1i(this.addr,i),n[0]=i),t.setTexture3D(e||Qt,i)}function cs(a,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(a.uniform1i(this.addr,i),n[0]=i),t.setTextureCube(e||jt,i)}function hs(a,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(a.uniform1i(this.addr,i),n[0]=i),t.setTexture2DArray(e||Kt,i)}function us(a){switch(a){case 5126:return Xi;case 35664:return Ji;case 35665:return Yi;case 35666:return Zi;case 35674:return $i;case 35675:return Ki;case 35676:return Qi;case 5124:case 35670:return ji;case 35667:case 35671:return es;case 35668:case 35672:return ts;case 35669:case 35673:return ns;case 5125:return is;case 36294:return ss;case 36295:return rs;case 36296:return as;case 35678:case 36198:case 36298:case 36306:case 35682:return os;case 35679:case 36299:case 36307:return ls;case 35680:case 36300:case 36308:case 36293:return cs;case 36289:case 36303:case 36311:case 36292:return hs}}function fs(a,e){a.uniform1fv(this.addr,e)}function ds(a,e){const t=v5(e,this.size,2);a.uniform2fv(this.addr,t)}function ps(a,e){const t=v5(e,this.size,3);a.uniform3fv(this.addr,t)}function ms(a,e){const t=v5(e,this.size,4);a.uniform4fv(this.addr,t)}function gs(a,e){const t=v5(e,this.size,4);a.uniformMatrix2fv(this.addr,!1,t)}function xs(a,e){const t=v5(e,this.size,9);a.uniformMatrix3fv(this.addr,!1,t)}function _s(a,e){const t=v5(e,this.size,16);a.uniformMatrix4fv(this.addr,!1,t)}function vs(a,e){a.uniform1iv(this.addr,e)}function ys(a,e){a.uniform2iv(this.addr,e)}function Ms(a,e){a.uniform3iv(this.addr,e)}function Ss(a,e){a.uniform4iv(this.addr,e)}function bs(a,e){a.uniform1uiv(this.addr,e)}function ws(a,e){a.uniform2uiv(this.addr,e)}function Ts(a,e){a.uniform3uiv(this.addr,e)}function As(a,e){a.uniform4uiv(this.addr,e)}function Es(a,e,t){const n=this.cache,i=e.length,s=Q3(t,i);s1(n,s)||(a.uniform1iv(this.addr,s),r1(n,s));for(let r=0;r!==i;++r)t.setTexture2D(e[r]||$t,s[r])}function Cs(a,e,t){const n=this.cache,i=e.length,s=Q3(t,i);s1(n,s)||(a.uniform1iv(this.addr,s),r1(n,s));for(let r=0;r!==i;++r)t.setTexture3D(e[r]||Qt,s[r])}function Ls(a,e,t){const n=this.cache,i=e.length,s=Q3(t,i);s1(n,s)||(a.uniform1iv(this.addr,s),r1(n,s));for(let r=0;r!==i;++r)t.setTextureCube(e[r]||jt,s[r])}function Ps(a,e,t){const n=this.cache,i=e.length,s=Q3(t,i);s1(n,s)||(a.uniform1iv(this.addr,s),r1(n,s));for(let r=0;r!==i;++r)t.setTexture2DArray(e[r]||Kt,s[r])}function Rs(a){switch(a){case 5126:return fs;case 35664:return ds;case 35665:return ps;case 35666:return ms;case 35674:return gs;case 35675:return xs;case 35676:return _s;case 5124:case 35670:return vs;case 35667:case 35671:return ys;case 35668:case 35672:return Ms;case 35669:case 35673:return Ss;case 5125:return bs;case 36294:return ws;case 36295:return Ts;case 36296:return As;case 35678:case 36198:case 36298:case 36306:case 35682:return Es;case 35679:case 36299:case 36307:return Cs;case 35680:case 36300:case 36308:case 36293:return Ls;case 36289:case 36303:case 36311:case 36292:return Ps}}class Ds{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.setValue=us(t.type)}}class Is{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.size=t.size,this.setValue=Rs(t.type)}}class Ns{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const i=this.seq;for(let s=0,r=i.length;s!==r;++s){const o=i[s];o.setValue(e,t[o.id],n)}}}const U4=/(\w+)(\])?(\[|\.)?/g;function Je(a,e){a.seq.push(e),a.map[e.id]=e}function zs(a,e,t){const n=a.name,i=n.length;for(U4.lastIndex=0;;){const s=U4.exec(n),r=U4.lastIndex;let o=s[1];const l=s[2]==="]",c=s[3];if(l&&(o=o|0),c===void 0||c==="["&&r+2===i){Je(t,c===void 0?new Ds(o,a,e):new Is(o,a,e));break}else{let u=t.map[o];u===void 0&&(u=new Ns(o),Je(t,u)),t=u}}}class z3{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,35718);for(let i=0;i<n;++i){const s=e.getActiveUniform(t,i),r=e.getUniformLocation(t,s.name);zs(s,r,this)}}setValue(e,t,n,i){const s=this.map[t];s!==void 0&&s.setValue(e,n,i)}setOptional(e,t,n){const i=t[n];i!==void 0&&this.setValue(e,n,i)}static upload(e,t,n,i){for(let s=0,r=t.length;s!==r;++s){const o=t[s],l=n[o.id];l.needsUpdate!==!1&&o.setValue(e,l.value,i)}}static seqWithValue(e,t){const n=[];for(let i=0,s=e.length;i!==s;++i){const r=e[i];r.id in t&&n.push(r)}return n}}function Ye(a,e,t){const n=a.createShader(e);return a.shaderSource(n,t),a.compileShader(n),n}let Fs=0;function Os(a,e){const t=a.split(`
`),n=[],i=Math.max(e-6,0),s=Math.min(e+6,t.length);for(let r=i;r<s;r++){const o=r+1;n.push(`${o===e?">":" "} ${o}: ${t[r]}`)}return n.join(`
`)}function Us(a){switch(a){case L2:return["Linear","( value )"];case j0:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",a),["Linear","( value )"]}}function Ze(a,e,t){const n=a.getShaderParameter(e,35713),i=a.getShaderInfoLog(e).trim();if(n&&i==="")return"";const s=/ERROR: 0:(\d+)/.exec(i);if(s){const r=parseInt(s[1]);return t.toUpperCase()+`

`+i+`

`+Os(a.getShaderSource(e),r)}else return i}function Bs(a,e){const t=Us(e);return"vec4 "+a+"( vec4 value ) { return LinearTo"+t[0]+t[1]+"; }"}function ks(a,e){let t;switch(e){case i6:t="Linear";break;case s6:t="Reinhard";break;case r6:t="OptimizedCineon";break;case a6:t="ACESFilmic";break;case o6:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+a+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}function Vs(a){return[a.extensionDerivatives||!!a.envMapCubeUVHeight||a.bumpMap||a.tangentSpaceNormalMap||a.clearcoatNormalMap||a.flatShading||a.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(a.extensionFragDepth||a.logarithmicDepthBuffer)&&a.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",a.extensionDrawBuffers&&a.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(a.extensionShaderTextureLOD||a.envMap||a.transmission)&&a.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(D5).join(`
`)}function Gs(a){const e=[];for(const t in a){const n=a[t];n!==!1&&e.push("#define "+t+" "+n)}return e.join(`
`)}function Hs(a,e){const t={},n=a.getProgramParameter(e,35721);for(let i=0;i<n;i++){const s=a.getActiveAttrib(e,i),r=s.name;let o=1;s.type===35674&&(o=2),s.type===35675&&(o=3),s.type===35676&&(o=4),t[r]={type:s.type,location:a.getAttribLocation(e,r),locationSize:o}}return t}function D5(a){return a!==""}function $e(a,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return a.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Ke(a,e){return a.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const Ws=/^[ \t]*#include +<([\w\d./]+)>/gm;function n7(a){return a.replace(Ws,qs)}function qs(a,e){const t=z0[e];if(t===void 0)throw new Error("Can not resolve #include <"+e+">");return n7(t)}const Xs=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Qe(a){return a.replace(Xs,Js)}function Js(a,e,t,n){let i="";for(let s=parseInt(e);s<parseInt(t);s++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s);return i}function je(a){let e="precision "+a.precision+` float;
precision `+a.precision+" int;";return a.precision==="highp"?e+=`
#define HIGH_PRECISION`:a.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:a.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function Ys(a){let e="SHADOWMAP_TYPE_BASIC";return a.shadowMapType===Ot?e="SHADOWMAP_TYPE_PCF":a.shadowMapType===z8?e="SHADOWMAP_TYPE_PCF_SOFT":a.shadowMapType===R5&&(e="SHADOWMAP_TYPE_VSM"),e}function Zs(a){let e="ENVMAP_TYPE_CUBE";if(a.envMap)switch(a.envMapMode){case A2:case E2:e="ENVMAP_TYPE_CUBE";break;case W5:e="ENVMAP_TYPE_CUBE_UV";break}return e}function $s(a){let e="ENVMAP_MODE_REFLECTION";if(a.envMap)switch(a.envMapMode){case E2:e="ENVMAP_MODE_REFRACTION";break}return e}function Ks(a){let e="ENVMAP_BLENDING_NONE";if(a.envMap)switch(a.combine){case Z3:e="ENVMAP_BLENDING_MULTIPLY";break;case t6:e="ENVMAP_BLENDING_MIX";break;case n6:e="ENVMAP_BLENDING_ADD";break}return e}function Qs(a){const e=a.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2,n=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:n,maxMip:t}}function js(a,e,t,n){const i=a.getContext(),s=t.defines;let r=t.vertexShader,o=t.fragmentShader;const l=Ys(t),c=Zs(t),h=$s(t),u=Ks(t),f=Qs(t),d=t.isWebGL2?"":Vs(t),g=Gs(s),m=i.createProgram();let p,x,_=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(p=[g].filter(D5).join(`
`),p.length>0&&(p+=`
`),x=[d,g].filter(D5).join(`
`),x.length>0&&(x+=`
`)):(p=[je(t),"#define SHADER_NAME "+t.shaderName,g,t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.supportsVertexTextures?"#define VERTEX_TEXTURES":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+h:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMap&&t.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",t.normalMap&&t.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.displacementMap&&t.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",t.specularColorMap?"#define USE_SPECULARCOLORMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEENCOLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",t.vertexTangents?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUvs?"#define USE_UV":"",t.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphColors&&t.isWebGL2?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(D5).join(`
`),x=[d,je(t),"#define SHADER_NAME "+t.shaderName,g,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+c:"",t.envMap?"#define "+h:"",t.envMap?"#define "+u:"",f?"#define CUBEUV_TEXEL_WIDTH "+f.texelWidth:"",f?"#define CUBEUV_TEXEL_HEIGHT "+f.texelHeight:"",f?"#define CUBEUV_MAX_MIP "+f.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMap&&t.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",t.normalMap&&t.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",t.specularColorMap?"#define USE_SPECULARCOLORMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEENCOLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.vertexTangents?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUvs?"#define USE_UV":"",t.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==$1?"#define TONE_MAPPING":"",t.toneMapping!==$1?z0.tonemapping_pars_fragment:"",t.toneMapping!==$1?ks("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",z0.encodings_pars_fragment,Bs("linearToOutputTexel",t.outputEncoding),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(D5).join(`
`)),r=n7(r),r=$e(r,t),r=Ke(r,t),o=n7(o),o=$e(o,t),o=Ke(o,t),r=Qe(r),o=Qe(o),t.isWebGL2&&t.isRawShaderMaterial!==!0&&(_=`#version 300 es
`,p=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+p,x=["#define varying in",t.glslVersion===Se?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===Se?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+x);const M=_+p+r,y=_+x+o,S=Ye(i,35633,M),T=Ye(i,35632,y);if(i.attachShader(m,S),i.attachShader(m,T),t.index0AttributeName!==void 0?i.bindAttribLocation(m,0,t.index0AttributeName):t.morphTargets===!0&&i.bindAttribLocation(m,0,"position"),i.linkProgram(m),a.debug.checkShaderErrors){const E=i.getProgramInfoLog(m).trim(),P=i.getShaderInfoLog(S).trim(),B=i.getShaderInfoLog(T).trim();let Q=!0,F=!0;if(i.getProgramParameter(m,35714)===!1){Q=!1;const D=Ze(i,S,"vertex"),V=Ze(i,T,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(m,35715)+`

Program Info Log: `+E+`
`+D+`
`+V)}else E!==""?console.warn("THREE.WebGLProgram: Program Info Log:",E):(P===""||B==="")&&(F=!1);F&&(this.diagnostics={runnable:Q,programLog:E,vertexShader:{log:P,prefix:p},fragmentShader:{log:B,prefix:x}})}i.deleteShader(S),i.deleteShader(T);let L;this.getUniforms=function(){return L===void 0&&(L=new z3(i,m)),L};let v;return this.getAttributes=function(){return v===void 0&&(v=Hs(i,m)),v},this.destroy=function(){n.releaseStatesOfProgram(this),i.deleteProgram(m),this.program=void 0},this.name=t.shaderName,this.id=Fs++,this.cacheKey=e,this.usedTimes=1,this.program=m,this.vertexShader=S,this.fragmentShader=T,this}let er=0;class tr{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,i=this._getShaderStage(t),s=this._getShaderStage(n),r=this._getShaderCacheForMaterial(e);return r.has(i)===!1&&(r.add(i),i.usedTimes++),r.has(s)===!1&&(r.add(s),s.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const n of t)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);return n===void 0&&(n=new Set,t.set(e,n)),n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);return n===void 0&&(n=new nr(e),t.set(e,n)),n}}class nr{constructor(e){this.id=er++,this.code=e,this.usedTimes=0}}function ir(a,e,t,n,i,s,r){const o=new u7,l=new tr,c=[],h=i.isWebGL2,u=i.logarithmicDepthBuffer,f=i.vertexTextures;let d=i.precision;const g={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function m(v,E,P,B,Q){const F=B.fog,D=Q.geometry,V=v.isMeshStandardMaterial?B.environment:null,Z=(v.isMeshStandardMaterial?t:e).get(v.envMap||V),K=!!Z&&Z.mapping===W5?Z.image.height:null,H=g[v.type];v.precision!==null&&(d=i.getMaxPrecision(v.precision),d!==v.precision&&console.warn("THREE.WebGLProgram.getParameters:",v.precision,"not supported, using",d,"instead."));const N=D.morphAttributes.position||D.morphAttributes.normal||D.morphAttributes.color,O=N!==void 0?N.length:0;let j=0;D.morphAttributes.position!==void 0&&(j=1),D.morphAttributes.normal!==void 0&&(j=2),D.morphAttributes.color!==void 0&&(j=3);let e0,t0,f0,T0;if(H){const F0=B1[H];e0=F0.vertexShader,t0=F0.fragmentShader}else e0=v.vertexShader,t0=v.fragmentShader,l.update(v),f0=l.getVertexShaderID(v),T0=l.getFragmentShaderID(v);const q=a.getRenderTarget(),I0=v.alphaTest>0,v0=v.clearcoat>0,A0=v.iridescence>0;return{isWebGL2:h,shaderID:H,shaderName:v.type,vertexShader:e0,fragmentShader:t0,defines:v.defines,customVertexShaderID:f0,customFragmentShaderID:T0,isRawShaderMaterial:v.isRawShaderMaterial===!0,glslVersion:v.glslVersion,precision:d,instancing:Q.isInstancedMesh===!0,instancingColor:Q.isInstancedMesh===!0&&Q.instanceColor!==null,supportsVertexTextures:f,outputEncoding:q===null?a.outputEncoding:q.isXRRenderTarget===!0?q.texture.encoding:L2,map:!!v.map,matcap:!!v.matcap,envMap:!!Z,envMapMode:Z&&Z.mapping,envMapCubeUVHeight:K,lightMap:!!v.lightMap,aoMap:!!v.aoMap,emissiveMap:!!v.emissiveMap,bumpMap:!!v.bumpMap,normalMap:!!v.normalMap,objectSpaceNormalMap:v.normalMapType===A6,tangentSpaceNormalMap:v.normalMapType===D2,decodeVideoTexture:!!v.map&&v.map.isVideoTexture===!0&&v.map.encoding===j0,clearcoat:v0,clearcoatMap:v0&&!!v.clearcoatMap,clearcoatRoughnessMap:v0&&!!v.clearcoatRoughnessMap,clearcoatNormalMap:v0&&!!v.clearcoatNormalMap,iridescence:A0,iridescenceMap:A0&&!!v.iridescenceMap,iridescenceThicknessMap:A0&&!!v.iridescenceThicknessMap,displacementMap:!!v.displacementMap,roughnessMap:!!v.roughnessMap,metalnessMap:!!v.metalnessMap,specularMap:!!v.specularMap,specularIntensityMap:!!v.specularIntensityMap,specularColorMap:!!v.specularColorMap,opaque:v.transparent===!1&&v.blending===u5,alphaMap:!!v.alphaMap,alphaTest:I0,gradientMap:!!v.gradientMap,sheen:v.sheen>0,sheenColorMap:!!v.sheenColorMap,sheenRoughnessMap:!!v.sheenRoughnessMap,transmission:v.transmission>0,transmissionMap:!!v.transmissionMap,thicknessMap:!!v.thicknessMap,combine:v.combine,vertexTangents:!!v.normalMap&&!!D.attributes.tangent,vertexColors:v.vertexColors,vertexAlphas:v.vertexColors===!0&&!!D.attributes.color&&D.attributes.color.itemSize===4,vertexUvs:!!v.map||!!v.bumpMap||!!v.normalMap||!!v.specularMap||!!v.alphaMap||!!v.emissiveMap||!!v.roughnessMap||!!v.metalnessMap||!!v.clearcoatMap||!!v.clearcoatRoughnessMap||!!v.clearcoatNormalMap||!!v.iridescenceMap||!!v.iridescenceThicknessMap||!!v.displacementMap||!!v.transmissionMap||!!v.thicknessMap||!!v.specularIntensityMap||!!v.specularColorMap||!!v.sheenColorMap||!!v.sheenRoughnessMap,uvsVertexOnly:!(!!v.map||!!v.bumpMap||!!v.normalMap||!!v.specularMap||!!v.alphaMap||!!v.emissiveMap||!!v.roughnessMap||!!v.metalnessMap||!!v.clearcoatNormalMap||!!v.iridescenceMap||!!v.iridescenceThicknessMap||v.transmission>0||!!v.transmissionMap||!!v.thicknessMap||!!v.specularIntensityMap||!!v.specularColorMap||v.sheen>0||!!v.sheenColorMap||!!v.sheenRoughnessMap)&&!!v.displacementMap,fog:!!F,useFog:v.fog===!0,fogExp2:F&&F.isFogExp2,flatShading:!!v.flatShading,sizeAttenuation:v.sizeAttenuation,logarithmicDepthBuffer:u,skinning:Q.isSkinnedMesh===!0,morphTargets:D.morphAttributes.position!==void 0,morphNormals:D.morphAttributes.normal!==void 0,morphColors:D.morphAttributes.color!==void 0,morphTargetsCount:O,morphTextureStride:j,numDirLights:E.directional.length,numPointLights:E.point.length,numSpotLights:E.spot.length,numSpotLightMaps:E.spotLightMap.length,numRectAreaLights:E.rectArea.length,numHemiLights:E.hemi.length,numDirLightShadows:E.directionalShadowMap.length,numPointLightShadows:E.pointShadowMap.length,numSpotLightShadows:E.spotShadowMap.length,numSpotLightShadowsWithMaps:E.numSpotLightShadowsWithMaps,numClippingPlanes:r.numPlanes,numClipIntersection:r.numIntersection,dithering:v.dithering,shadowMapEnabled:a.shadowMap.enabled&&P.length>0,shadowMapType:a.shadowMap.type,toneMapping:v.toneMapped?a.toneMapping:$1,physicallyCorrectLights:a.physicallyCorrectLights,premultipliedAlpha:v.premultipliedAlpha,doubleSided:v.side===l2,flipSided:v.side===C1,useDepthPacking:!!v.depthPacking,depthPacking:v.depthPacking||0,index0AttributeName:v.index0AttributeName,extensionDerivatives:v.extensions&&v.extensions.derivatives,extensionFragDepth:v.extensions&&v.extensions.fragDepth,extensionDrawBuffers:v.extensions&&v.extensions.drawBuffers,extensionShaderTextureLOD:v.extensions&&v.extensions.shaderTextureLOD,rendererExtensionFragDepth:h||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:h||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:h||n.has("EXT_shader_texture_lod"),customProgramCacheKey:v.customProgramCacheKey()}}function p(v){const E=[];if(v.shaderID?E.push(v.shaderID):(E.push(v.customVertexShaderID),E.push(v.customFragmentShaderID)),v.defines!==void 0)for(const P in v.defines)E.push(P),E.push(v.defines[P]);return v.isRawShaderMaterial===!1&&(x(E,v),_(E,v),E.push(a.outputEncoding)),E.push(v.customProgramCacheKey),E.join()}function x(v,E){v.push(E.precision),v.push(E.outputEncoding),v.push(E.envMapMode),v.push(E.envMapCubeUVHeight),v.push(E.combine),v.push(E.vertexUvs),v.push(E.fogExp2),v.push(E.sizeAttenuation),v.push(E.morphTargetsCount),v.push(E.morphAttributeCount),v.push(E.numDirLights),v.push(E.numPointLights),v.push(E.numSpotLights),v.push(E.numSpotLightMaps),v.push(E.numHemiLights),v.push(E.numRectAreaLights),v.push(E.numDirLightShadows),v.push(E.numPointLightShadows),v.push(E.numSpotLightShadows),v.push(E.numSpotLightShadowsWithMaps),v.push(E.shadowMapType),v.push(E.toneMapping),v.push(E.numClippingPlanes),v.push(E.numClipIntersection),v.push(E.depthPacking)}function _(v,E){o.disableAll(),E.isWebGL2&&o.enable(0),E.supportsVertexTextures&&o.enable(1),E.instancing&&o.enable(2),E.instancingColor&&o.enable(3),E.map&&o.enable(4),E.matcap&&o.enable(5),E.envMap&&o.enable(6),E.lightMap&&o.enable(7),E.aoMap&&o.enable(8),E.emissiveMap&&o.enable(9),E.bumpMap&&o.enable(10),E.normalMap&&o.enable(11),E.objectSpaceNormalMap&&o.enable(12),E.tangentSpaceNormalMap&&o.enable(13),E.clearcoat&&o.enable(14),E.clearcoatMap&&o.enable(15),E.clearcoatRoughnessMap&&o.enable(16),E.clearcoatNormalMap&&o.enable(17),E.iridescence&&o.enable(18),E.iridescenceMap&&o.enable(19),E.iridescenceThicknessMap&&o.enable(20),E.displacementMap&&o.enable(21),E.specularMap&&o.enable(22),E.roughnessMap&&o.enable(23),E.metalnessMap&&o.enable(24),E.gradientMap&&o.enable(25),E.alphaMap&&o.enable(26),E.alphaTest&&o.enable(27),E.vertexColors&&o.enable(28),E.vertexAlphas&&o.enable(29),E.vertexUvs&&o.enable(30),E.vertexTangents&&o.enable(31),E.uvsVertexOnly&&o.enable(32),v.push(o.mask),o.disableAll(),E.fog&&o.enable(0),E.useFog&&o.enable(1),E.flatShading&&o.enable(2),E.logarithmicDepthBuffer&&o.enable(3),E.skinning&&o.enable(4),E.morphTargets&&o.enable(5),E.morphNormals&&o.enable(6),E.morphColors&&o.enable(7),E.premultipliedAlpha&&o.enable(8),E.shadowMapEnabled&&o.enable(9),E.physicallyCorrectLights&&o.enable(10),E.doubleSided&&o.enable(11),E.flipSided&&o.enable(12),E.useDepthPacking&&o.enable(13),E.dithering&&o.enable(14),E.specularIntensityMap&&o.enable(15),E.specularColorMap&&o.enable(16),E.transmission&&o.enable(17),E.transmissionMap&&o.enable(18),E.thicknessMap&&o.enable(19),E.sheen&&o.enable(20),E.sheenColorMap&&o.enable(21),E.sheenRoughnessMap&&o.enable(22),E.decodeVideoTexture&&o.enable(23),E.opaque&&o.enable(24),v.push(o.mask)}function M(v){const E=g[v.type];let P;if(E){const B=B1[E];P=W6.clone(B.uniforms)}else P=v.uniforms;return P}function y(v,E){let P;for(let B=0,Q=c.length;B<Q;B++){const F=c[B];if(F.cacheKey===E){P=F,++P.usedTimes;break}}return P===void 0&&(P=new js(a,E,v,s),c.push(P)),P}function S(v){if(--v.usedTimes===0){const E=c.indexOf(v);c[E]=c[c.length-1],c.pop(),v.destroy()}}function T(v){l.remove(v)}function L(){l.dispose()}return{getParameters:m,getProgramCacheKey:p,getUniforms:M,acquireProgram:y,releaseProgram:S,releaseShaderCache:T,programs:c,dispose:L}}function sr(){let a=new WeakMap;function e(s){let r=a.get(s);return r===void 0&&(r={},a.set(s,r)),r}function t(s){a.delete(s)}function n(s,r,o){a.get(s)[r]=o}function i(){a=new WeakMap}return{get:e,remove:t,update:n,dispose:i}}function rr(a,e){return a.groupOrder!==e.groupOrder?a.groupOrder-e.groupOrder:a.renderOrder!==e.renderOrder?a.renderOrder-e.renderOrder:a.material.id!==e.material.id?a.material.id-e.material.id:a.z!==e.z?a.z-e.z:a.id-e.id}function et(a,e){return a.groupOrder!==e.groupOrder?a.groupOrder-e.groupOrder:a.renderOrder!==e.renderOrder?a.renderOrder-e.renderOrder:a.z!==e.z?e.z-a.z:a.id-e.id}function tt(){const a=[];let e=0;const t=[],n=[],i=[];function s(){e=0,t.length=0,n.length=0,i.length=0}function r(u,f,d,g,m,p){let x=a[e];return x===void 0?(x={id:u.id,object:u,geometry:f,material:d,groupOrder:g,renderOrder:u.renderOrder,z:m,group:p},a[e]=x):(x.id=u.id,x.object=u,x.geometry=f,x.material=d,x.groupOrder=g,x.renderOrder=u.renderOrder,x.z=m,x.group=p),e++,x}function o(u,f,d,g,m,p){const x=r(u,f,d,g,m,p);d.transmission>0?n.push(x):d.transparent===!0?i.push(x):t.push(x)}function l(u,f,d,g,m,p){const x=r(u,f,d,g,m,p);d.transmission>0?n.unshift(x):d.transparent===!0?i.unshift(x):t.unshift(x)}function c(u,f){t.length>1&&t.sort(u||rr),n.length>1&&n.sort(f||et),i.length>1&&i.sort(f||et)}function h(){for(let u=e,f=a.length;u<f;u++){const d=a[u];if(d.id===null)break;d.id=null,d.object=null,d.geometry=null,d.material=null,d.group=null}}return{opaque:t,transmissive:n,transparent:i,init:s,push:o,unshift:l,finish:h,sort:c}}function ar(){let a=new WeakMap;function e(n,i){const s=a.get(n);let r;return s===void 0?(r=new tt,a.set(n,[r])):i>=s.length?(r=new tt,s.push(r)):r=s[i],r}function t(){a=new WeakMap}return{get:e,dispose:t}}function or(){const a={};return{get:function(e){if(a[e.id]!==void 0)return a[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new A,color:new M0};break;case"SpotLight":t={position:new A,direction:new A,color:new M0,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new A,color:new M0,distance:0,decay:0};break;case"HemisphereLight":t={direction:new A,skyColor:new M0,groundColor:new M0};break;case"RectAreaLight":t={color:new M0,position:new A,halfWidth:new A,halfHeight:new A};break}return a[e.id]=t,t}}}function lr(){const a={};return{get:function(e){if(a[e.id]!==void 0)return a[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new $};break;case"SpotLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new $};break;case"PointLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new $,shadowCameraNear:1,shadowCameraFar:1e3};break}return a[e.id]=t,t}}}let cr=0;function hr(a,e){return(e.castShadow?2:0)-(a.castShadow?2:0)+(e.map?1:0)-(a.map?1:0)}function ur(a,e){const t=new or,n=lr(),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0};for(let h=0;h<9;h++)i.probe.push(new A);const s=new A,r=new O0,o=new O0;function l(h,u){let f=0,d=0,g=0;for(let B=0;B<9;B++)i.probe[B].set(0,0,0);let m=0,p=0,x=0,_=0,M=0,y=0,S=0,T=0,L=0,v=0;h.sort(hr);const E=u!==!0?Math.PI:1;for(let B=0,Q=h.length;B<Q;B++){const F=h[B],D=F.color,V=F.intensity,Z=F.distance,K=F.shadow&&F.shadow.map?F.shadow.map.texture:null;if(F.isAmbientLight)f+=D.r*V*E,d+=D.g*V*E,g+=D.b*V*E;else if(F.isLightProbe)for(let H=0;H<9;H++)i.probe[H].addScaledVector(F.sh.coefficients[H],V);else if(F.isDirectionalLight){const H=t.get(F);if(H.color.copy(F.color).multiplyScalar(F.intensity*E),F.castShadow){const N=F.shadow,O=n.get(F);O.shadowBias=N.bias,O.shadowNormalBias=N.normalBias,O.shadowRadius=N.radius,O.shadowMapSize=N.mapSize,i.directionalShadow[m]=O,i.directionalShadowMap[m]=K,i.directionalShadowMatrix[m]=F.shadow.matrix,y++}i.directional[m]=H,m++}else if(F.isSpotLight){const H=t.get(F);H.position.setFromMatrixPosition(F.matrixWorld),H.color.copy(D).multiplyScalar(V*E),H.distance=Z,H.coneCos=Math.cos(F.angle),H.penumbraCos=Math.cos(F.angle*(1-F.penumbra)),H.decay=F.decay,i.spot[x]=H;const N=F.shadow;if(F.map&&(i.spotLightMap[L]=F.map,L++,N.updateMatrices(F),F.castShadow&&v++),i.spotLightMatrix[x]=N.matrix,F.castShadow){const O=n.get(F);O.shadowBias=N.bias,O.shadowNormalBias=N.normalBias,O.shadowRadius=N.radius,O.shadowMapSize=N.mapSize,i.spotShadow[x]=O,i.spotShadowMap[x]=K,T++}x++}else if(F.isRectAreaLight){const H=t.get(F);H.color.copy(D).multiplyScalar(V),H.halfWidth.set(F.width*.5,0,0),H.halfHeight.set(0,F.height*.5,0),i.rectArea[_]=H,_++}else if(F.isPointLight){const H=t.get(F);if(H.color.copy(F.color).multiplyScalar(F.intensity*E),H.distance=F.distance,H.decay=F.decay,F.castShadow){const N=F.shadow,O=n.get(F);O.shadowBias=N.bias,O.shadowNormalBias=N.normalBias,O.shadowRadius=N.radius,O.shadowMapSize=N.mapSize,O.shadowCameraNear=N.camera.near,O.shadowCameraFar=N.camera.far,i.pointShadow[p]=O,i.pointShadowMap[p]=K,i.pointShadowMatrix[p]=F.shadow.matrix,S++}i.point[p]=H,p++}else if(F.isHemisphereLight){const H=t.get(F);H.skyColor.copy(F.color).multiplyScalar(V*E),H.groundColor.copy(F.groundColor).multiplyScalar(V*E),i.hemi[M]=H,M++}}_>0&&(e.isWebGL2||a.has("OES_texture_float_linear")===!0?(i.rectAreaLTC1=a0.LTC_FLOAT_1,i.rectAreaLTC2=a0.LTC_FLOAT_2):a.has("OES_texture_half_float_linear")===!0?(i.rectAreaLTC1=a0.LTC_HALF_1,i.rectAreaLTC2=a0.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),i.ambient[0]=f,i.ambient[1]=d,i.ambient[2]=g;const P=i.hash;(P.directionalLength!==m||P.pointLength!==p||P.spotLength!==x||P.rectAreaLength!==_||P.hemiLength!==M||P.numDirectionalShadows!==y||P.numPointShadows!==S||P.numSpotShadows!==T||P.numSpotMaps!==L)&&(i.directional.length=m,i.spot.length=x,i.rectArea.length=_,i.point.length=p,i.hemi.length=M,i.directionalShadow.length=y,i.directionalShadowMap.length=y,i.pointShadow.length=S,i.pointShadowMap.length=S,i.spotShadow.length=T,i.spotShadowMap.length=T,i.directionalShadowMatrix.length=y,i.pointShadowMatrix.length=S,i.spotLightMatrix.length=T+L-v,i.spotLightMap.length=L,i.numSpotLightShadowsWithMaps=v,P.directionalLength=m,P.pointLength=p,P.spotLength=x,P.rectAreaLength=_,P.hemiLength=M,P.numDirectionalShadows=y,P.numPointShadows=S,P.numSpotShadows=T,P.numSpotMaps=L,i.version=cr++)}function c(h,u){let f=0,d=0,g=0,m=0,p=0;const x=u.matrixWorldInverse;for(let _=0,M=h.length;_<M;_++){const y=h[_];if(y.isDirectionalLight){const S=i.directional[f];S.direction.setFromMatrixPosition(y.matrixWorld),s.setFromMatrixPosition(y.target.matrixWorld),S.direction.sub(s),S.direction.transformDirection(x),f++}else if(y.isSpotLight){const S=i.spot[g];S.position.setFromMatrixPosition(y.matrixWorld),S.position.applyMatrix4(x),S.direction.setFromMatrixPosition(y.matrixWorld),s.setFromMatrixPosition(y.target.matrixWorld),S.direction.sub(s),S.direction.transformDirection(x),g++}else if(y.isRectAreaLight){const S=i.rectArea[m];S.position.setFromMatrixPosition(y.matrixWorld),S.position.applyMatrix4(x),o.identity(),r.copy(y.matrixWorld),r.premultiply(x),o.extractRotation(r),S.halfWidth.set(y.width*.5,0,0),S.halfHeight.set(0,y.height*.5,0),S.halfWidth.applyMatrix4(o),S.halfHeight.applyMatrix4(o),m++}else if(y.isPointLight){const S=i.point[d];S.position.setFromMatrixPosition(y.matrixWorld),S.position.applyMatrix4(x),d++}else if(y.isHemisphereLight){const S=i.hemi[p];S.direction.setFromMatrixPosition(y.matrixWorld),S.direction.transformDirection(x),p++}}}return{setup:l,setupView:c,state:i}}function nt(a,e){const t=new ur(a,e),n=[],i=[];function s(){n.length=0,i.length=0}function r(u){n.push(u)}function o(u){i.push(u)}function l(u){t.setup(n,u)}function c(u){t.setupView(n,u)}return{init:s,state:{lightsArray:n,shadowsArray:i,lights:t},setupLights:l,setupLightsView:c,pushLight:r,pushShadow:o}}function fr(a,e){let t=new WeakMap;function n(s,r=0){const o=t.get(s);let l;return o===void 0?(l=new nt(a,e),t.set(s,[l])):r>=o.length?(l=new nt(a,e),o.push(l)):l=o[r],l}function i(){t=new WeakMap}return{get:n,dispose:i}}class e8 extends g1{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=w6,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class t8 extends g1{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.referencePosition=new A,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.referencePosition.copy(e.referencePosition),this.nearDistance=e.nearDistance,this.farDistance=e.farDistance,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}const dr=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,pr=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function mr(a,e,t){let n=new p7;const i=new $,s=new $,r=new H0,o=new e8({depthPacking:T6}),l=new t8,c={},h=t.maxTextureSize,u={0:C1,1:d5,2:l2},f=new K1({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new $},radius:{value:4}},vertexShader:dr,fragmentShader:pr}),d=f.clone();d.defines.HORIZONTAL_PASS=1;const g=new Z0;g.setAttribute("position",new m1(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const m=new S1(g,f),p=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=Ot,this.render=function(y,S,T){if(p.enabled===!1||p.autoUpdate===!1&&p.needsUpdate===!1||y.length===0)return;const L=a.getRenderTarget(),v=a.getActiveCubeFace(),E=a.getActiveMipmapLevel(),P=a.state;P.setBlending(u2),P.buffers.color.setClear(1,1,1,1),P.buffers.depth.setTest(!0),P.setScissorTest(!1);for(let B=0,Q=y.length;B<Q;B++){const F=y[B],D=F.shadow;if(D===void 0){console.warn("THREE.WebGLShadowMap:",F,"has no shadow.");continue}if(D.autoUpdate===!1&&D.needsUpdate===!1)continue;i.copy(D.mapSize);const V=D.getFrameExtents();if(i.multiply(V),s.copy(D.mapSize),(i.x>h||i.y>h)&&(i.x>h&&(s.x=Math.floor(h/V.x),i.x=s.x*V.x,D.mapSize.x=s.x),i.y>h&&(s.y=Math.floor(h/V.y),i.y=s.y*V.y,D.mapSize.y=s.y)),D.map===null){const K=this.type!==R5?{minFilter:l1,magFilter:l1}:{};D.map=new P2(i.x,i.y,K),D.map.texture.name=F.name+".shadowMap",D.camera.updateProjectionMatrix()}a.setRenderTarget(D.map),a.clear();const Z=D.getViewportCount();for(let K=0;K<Z;K++){const H=D.getViewport(K);r.set(s.x*H.x,s.y*H.y,s.x*H.z,s.y*H.w),P.viewport(r),D.updateMatrices(F,K),n=D.getFrustum(),M(S,T,D.camera,F,this.type)}D.isPointLightShadow!==!0&&this.type===R5&&x(D,T),D.needsUpdate=!1}p.needsUpdate=!1,a.setRenderTarget(L,v,E)};function x(y,S){const T=e.update(m);f.defines.VSM_SAMPLES!==y.blurSamples&&(f.defines.VSM_SAMPLES=y.blurSamples,d.defines.VSM_SAMPLES=y.blurSamples,f.needsUpdate=!0,d.needsUpdate=!0),y.mapPass===null&&(y.mapPass=new P2(i.x,i.y)),f.uniforms.shadow_pass.value=y.map.texture,f.uniforms.resolution.value=y.mapSize,f.uniforms.radius.value=y.radius,a.setRenderTarget(y.mapPass),a.clear(),a.renderBufferDirect(S,null,T,f,m,null),d.uniforms.shadow_pass.value=y.mapPass.texture,d.uniforms.resolution.value=y.mapSize,d.uniforms.radius.value=y.radius,a.setRenderTarget(y.map),a.clear(),a.renderBufferDirect(S,null,T,d,m,null)}function _(y,S,T,L,v,E){let P=null;const B=T.isPointLight===!0?y.customDistanceMaterial:y.customDepthMaterial;if(B!==void 0?P=B:P=T.isPointLight===!0?l:o,a.localClippingEnabled&&S.clipShadows===!0&&Array.isArray(S.clippingPlanes)&&S.clippingPlanes.length!==0||S.displacementMap&&S.displacementScale!==0||S.alphaMap&&S.alphaTest>0){const Q=P.uuid,F=S.uuid;let D=c[Q];D===void 0&&(D={},c[Q]=D);let V=D[F];V===void 0&&(V=P.clone(),D[F]=V),P=V}return P.visible=S.visible,P.wireframe=S.wireframe,E===R5?P.side=S.shadowSide!==null?S.shadowSide:S.side:P.side=S.shadowSide!==null?S.shadowSide:u[S.side],P.alphaMap=S.alphaMap,P.alphaTest=S.alphaTest,P.clipShadows=S.clipShadows,P.clippingPlanes=S.clippingPlanes,P.clipIntersection=S.clipIntersection,P.displacementMap=S.displacementMap,P.displacementScale=S.displacementScale,P.displacementBias=S.displacementBias,P.wireframeLinewidth=S.wireframeLinewidth,P.linewidth=S.linewidth,T.isPointLight===!0&&P.isMeshDistanceMaterial===!0&&(P.referencePosition.setFromMatrixPosition(T.matrixWorld),P.nearDistance=L,P.farDistance=v),P}function M(y,S,T,L,v){if(y.visible===!1)return;if(y.layers.test(S.layers)&&(y.isMesh||y.isLine||y.isPoints)&&(y.castShadow||y.receiveShadow&&v===R5)&&(!y.frustumCulled||n.intersectsObject(y))){y.modelViewMatrix.multiplyMatrices(T.matrixWorldInverse,y.matrixWorld);const B=e.update(y),Q=y.material;if(Array.isArray(Q)){const F=B.groups;for(let D=0,V=F.length;D<V;D++){const Z=F[D],K=Q[Z.materialIndex];if(K&&K.visible){const H=_(y,K,L,T.near,T.far,v);a.renderBufferDirect(T,null,B,H,y,Z)}}}else if(Q.visible){const F=_(y,Q,L,T.near,T.far,v);a.renderBufferDirect(T,null,B,F,y,null)}}const P=y.children;for(let B=0,Q=P.length;B<Q;B++)M(P[B],S,T,L,v)}}function gr(a,e,t){const n=t.isWebGL2;function i(){let R=!1;const d0=new H0;let r0=null;const X=new H0(0,0,0,0);return{setMask:function(o0){r0!==o0&&!R&&(a.colorMask(o0,o0,o0,o0),r0=o0)},setLocked:function(o0){R=o0},setClear:function(o0,b0,Y0,e1,Q1){Q1===!0&&(o0*=e1,b0*=e1,Y0*=e1),d0.set(o0,b0,Y0,e1),X.equals(d0)===!1&&(a.clearColor(o0,b0,Y0,e1),X.copy(d0))},reset:function(){R=!1,r0=null,X.set(-1,0,0,0)}}}function s(){let R=!1,d0=null,r0=null,X=null;return{setTest:function(o0){o0?I0(2929):v0(2929)},setMask:function(o0){d0!==o0&&!R&&(a.depthMask(o0),d0=o0)},setFunc:function(o0){if(r0!==o0){switch(o0){case Y8:a.depthFunc(512);break;case Z8:a.depthFunc(519);break;case $8:a.depthFunc(513);break;case Z4:a.depthFunc(515);break;case K8:a.depthFunc(514);break;case Q8:a.depthFunc(518);break;case j8:a.depthFunc(516);break;case e6:a.depthFunc(517);break;default:a.depthFunc(515)}r0=o0}},setLocked:function(o0){R=o0},setClear:function(o0){X!==o0&&(a.clearDepth(o0),X=o0)},reset:function(){R=!1,d0=null,r0=null,X=null}}}function r(){let R=!1,d0=null,r0=null,X=null,o0=null,b0=null,Y0=null,e1=null,Q1=null;return{setTest:function(K0){R||(K0?I0(2960):v0(2960))},setMask:function(K0){d0!==K0&&!R&&(a.stencilMask(K0),d0=K0)},setFunc:function(K0,G1,w1){(r0!==K0||X!==G1||o0!==w1)&&(a.stencilFunc(K0,G1,w1),r0=K0,X=G1,o0=w1)},setOp:function(K0,G1,w1){(b0!==K0||Y0!==G1||e1!==w1)&&(a.stencilOp(K0,G1,w1),b0=K0,Y0=G1,e1=w1)},setLocked:function(K0){R=K0},setClear:function(K0){Q1!==K0&&(a.clearStencil(K0),Q1=K0)},reset:function(){R=!1,d0=null,r0=null,X=null,o0=null,b0=null,Y0=null,e1=null,Q1=null}}}const o=new i,l=new s,c=new r,h=new WeakMap,u=new WeakMap;let f={},d={},g=new WeakMap,m=[],p=null,x=!1,_=null,M=null,y=null,S=null,T=null,L=null,v=null,E=!1,P=null,B=null,Q=null,F=null,D=null;const V=a.getParameter(35661);let Z=!1,K=0;const H=a.getParameter(7938);H.indexOf("WebGL")!==-1?(K=parseFloat(/^WebGL (\d)/.exec(H)[1]),Z=K>=1):H.indexOf("OpenGL ES")!==-1&&(K=parseFloat(/^OpenGL ES (\d)/.exec(H)[1]),Z=K>=2);let N=null,O={};const j=a.getParameter(3088),e0=a.getParameter(2978),t0=new H0().fromArray(j),f0=new H0().fromArray(e0);function T0(R,d0,r0){const X=new Uint8Array(4),o0=a.createTexture();a.bindTexture(R,o0),a.texParameteri(R,10241,9728),a.texParameteri(R,10240,9728);for(let b0=0;b0<r0;b0++)a.texImage2D(d0+b0,0,6408,1,1,0,6408,5121,X);return o0}const q={};q[3553]=T0(3553,3553,1),q[34067]=T0(34067,34069,6),o.setClear(0,0,0,1),l.setClear(1),c.setClear(0),I0(2929),l.setFunc(Z4),l0(!1),R0(X7),I0(2884),i0(u2);function I0(R){f[R]!==!0&&(a.enable(R),f[R]=!0)}function v0(R){f[R]!==!1&&(a.disable(R),f[R]=!1)}function A0(R,d0){return d[R]!==d0?(a.bindFramebuffer(R,d0),d[R]=d0,n&&(R===36009&&(d[36160]=d0),R===36160&&(d[36009]=d0)),!0):!1}function c0(R,d0){let r0=m,X=!1;if(R)if(r0=g.get(d0),r0===void 0&&(r0=[],g.set(d0,r0)),R.isWebGLMultipleRenderTargets){const o0=R.texture;if(r0.length!==o0.length||r0[0]!==36064){for(let b0=0,Y0=o0.length;b0<Y0;b0++)r0[b0]=36064+b0;r0.length=o0.length,X=!0}}else r0[0]!==36064&&(r0[0]=36064,X=!0);else r0[0]!==1029&&(r0[0]=1029,X=!0);X&&(t.isWebGL2?a.drawBuffers(r0):e.get("WEBGL_draw_buffers").drawBuffersWEBGL(r0))}function F0(R){return p!==R?(a.useProgram(R),p=R,!0):!1}const J={[a5]:32774,[O8]:32778,[U8]:32779};if(n)J[$7]=32775,J[K7]=32776;else{const R=e.get("EXT_blend_minmax");R!==null&&(J[$7]=R.MIN_EXT,J[K7]=R.MAX_EXT)}const W={[B8]:0,[k8]:1,[V8]:768,[Ut]:770,[J8]:776,[q8]:774,[H8]:772,[G8]:769,[Bt]:771,[X8]:775,[W8]:773};function i0(R,d0,r0,X,o0,b0,Y0,e1){if(R===u2){x===!0&&(v0(3042),x=!1);return}if(x===!1&&(I0(3042),x=!0),R!==F8){if(R!==_||e1!==E){if((M!==a5||T!==a5)&&(a.blendEquation(32774),M=a5,T=a5),e1)switch(R){case u5:a.blendFuncSeparate(1,771,1,771);break;case J7:a.blendFunc(1,1);break;case Y7:a.blendFuncSeparate(0,769,0,1);break;case Z7:a.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",R);break}else switch(R){case u5:a.blendFuncSeparate(770,771,1,771);break;case J7:a.blendFunc(770,1);break;case Y7:a.blendFuncSeparate(0,769,0,1);break;case Z7:a.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",R);break}y=null,S=null,L=null,v=null,_=R,E=e1}return}o0=o0||d0,b0=b0||r0,Y0=Y0||X,(d0!==M||o0!==T)&&(a.blendEquationSeparate(J[d0],J[o0]),M=d0,T=o0),(r0!==y||X!==S||b0!==L||Y0!==v)&&(a.blendFuncSeparate(W[r0],W[X],W[b0],W[Y0]),y=r0,S=X,L=b0,v=Y0),_=R,E=null}function p0(R,d0){R.side===l2?v0(2884):I0(2884);let r0=R.side===C1;d0&&(r0=!r0),l0(r0),R.blending===u5&&R.transparent===!1?i0(u2):i0(R.blending,R.blendEquation,R.blendSrc,R.blendDst,R.blendEquationAlpha,R.blendSrcAlpha,R.blendDstAlpha,R.premultipliedAlpha),l.setFunc(R.depthFunc),l.setTest(R.depthTest),l.setMask(R.depthWrite),o.setMask(R.colorWrite);const X=R.stencilWrite;c.setTest(X),X&&(c.setMask(R.stencilWriteMask),c.setFunc(R.stencilFunc,R.stencilRef,R.stencilFuncMask),c.setOp(R.stencilFail,R.stencilZFail,R.stencilZPass)),_0(R.polygonOffset,R.polygonOffsetFactor,R.polygonOffsetUnits),R.alphaToCoverage===!0?I0(32926):v0(32926)}function l0(R){P!==R&&(R?a.frontFace(2304):a.frontFace(2305),P=R)}function R0(R){R!==I8?(I0(2884),R!==B&&(R===X7?a.cullFace(1029):R===N8?a.cullFace(1028):a.cullFace(1032))):v0(2884),B=R}function y0(R){R!==Q&&(Z&&a.lineWidth(R),Q=R)}function _0(R,d0,r0){R?(I0(32823),(F!==d0||D!==r0)&&(a.polygonOffset(d0,r0),F=d0,D=r0)):v0(32823)}function J0(R){R?I0(3089):v0(3089)}function W0(R){R===void 0&&(R=33984+V-1),N!==R&&(a.activeTexture(R),N=R)}function C(R,d0,r0){r0===void 0&&(N===null?r0=33984+V-1:r0=N);let X=O[r0];X===void 0&&(X={type:void 0,texture:void 0},O[r0]=X),(X.type!==R||X.texture!==d0)&&(N!==r0&&(a.activeTexture(r0),N=r0),a.bindTexture(R,d0||q[R]),X.type=R,X.texture=d0)}function b(){const R=O[N];R!==void 0&&R.type!==void 0&&(a.bindTexture(R.type,null),R.type=void 0,R.texture=void 0)}function U(){try{a.compressedTexImage2D.apply(a,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function n0(){try{a.texSubImage2D.apply(a,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function s0(){try{a.texSubImage3D.apply(a,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function h0(){try{a.compressedTexSubImage2D.apply(a,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function w0(){try{a.texStorage2D.apply(a,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function u0(){try{a.texStorage3D.apply(a,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function Y(){try{a.texImage2D.apply(a,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function g0(){try{a.texImage3D.apply(a,arguments)}catch(R){console.error("THREE.WebGLState:",R)}}function E0(R){t0.equals(R)===!1&&(a.scissor(R.x,R.y,R.z,R.w),t0.copy(R))}function m0(R){f0.equals(R)===!1&&(a.viewport(R.x,R.y,R.z,R.w),f0.copy(R))}function S0(R,d0){let r0=u.get(d0);r0===void 0&&(r0=new WeakMap,u.set(d0,r0));let X=r0.get(R);X===void 0&&(X=a.getUniformBlockIndex(d0,R.name),r0.set(R,X))}function D0(R,d0){const X=u.get(d0).get(R);h.get(R)!==X&&(a.uniformBlockBinding(d0,X,R.__bindingPointIndex),h.set(R,X))}function G0(){a.disable(3042),a.disable(2884),a.disable(2929),a.disable(32823),a.disable(3089),a.disable(2960),a.disable(32926),a.blendEquation(32774),a.blendFunc(1,0),a.blendFuncSeparate(1,0,1,0),a.colorMask(!0,!0,!0,!0),a.clearColor(0,0,0,0),a.depthMask(!0),a.depthFunc(513),a.clearDepth(1),a.stencilMask(4294967295),a.stencilFunc(519,0,4294967295),a.stencilOp(7680,7680,7680),a.clearStencil(0),a.cullFace(1029),a.frontFace(2305),a.polygonOffset(0,0),a.activeTexture(33984),a.bindFramebuffer(36160,null),n===!0&&(a.bindFramebuffer(36009,null),a.bindFramebuffer(36008,null)),a.useProgram(null),a.lineWidth(1),a.scissor(0,0,a.canvas.width,a.canvas.height),a.viewport(0,0,a.canvas.width,a.canvas.height),f={},N=null,O={},d={},g=new WeakMap,m=[],p=null,x=!1,_=null,M=null,y=null,S=null,T=null,L=null,v=null,E=!1,P=null,B=null,Q=null,F=null,D=null,t0.set(0,0,a.canvas.width,a.canvas.height),f0.set(0,0,a.canvas.width,a.canvas.height),o.reset(),l.reset(),c.reset()}return{buffers:{color:o,depth:l,stencil:c},enable:I0,disable:v0,bindFramebuffer:A0,drawBuffers:c0,useProgram:F0,setBlending:i0,setMaterial:p0,setFlipSided:l0,setCullFace:R0,setLineWidth:y0,setPolygonOffset:_0,setScissorTest:J0,activeTexture:W0,bindTexture:C,unbindTexture:b,compressedTexImage2D:U,texImage2D:Y,texImage3D:g0,updateUBOMapping:S0,uniformBlockBinding:D0,texStorage2D:w0,texStorage3D:u0,texSubImage2D:n0,texSubImage3D:s0,compressedTexSubImage2D:h0,scissor:E0,viewport:m0,reset:G0}}function xr(a,e,t,n,i,s,r){const o=i.isWebGL2,l=i.maxTextures,c=i.maxCubemapSize,h=i.maxTextureSize,u=i.maxSamples,f=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,d=/OculusBrowser/g.test(navigator.userAgent),g=new WeakMap;let m;const p=new WeakMap;let x=!1;try{x=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function _(C,b){return x?new OffscreenCanvas(C,b):B5("canvas")}function M(C,b,U,n0){let s0=1;if((C.width>n0||C.height>n0)&&(s0=n0/Math.max(C.width,C.height)),s0<1||b===!0)if(typeof HTMLImageElement<"u"&&C instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&C instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&C instanceof ImageBitmap){const h0=b?t7:Math.floor,w0=h0(s0*C.width),u0=h0(s0*C.height);m===void 0&&(m=_(w0,u0));const Y=U?_(w0,u0):m;return Y.width=w0,Y.height=u0,Y.getContext("2d").drawImage(C,0,0,w0,u0),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+C.width+"x"+C.height+") to ("+w0+"x"+u0+")."),Y}else return"data"in C&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+C.width+"x"+C.height+")."),C;return C}function y(C){return be(C.width)&&be(C.height)}function S(C){return o?!1:C.wrapS!==E1||C.wrapT!==E1||C.minFilter!==l1&&C.minFilter!==y1}function T(C,b){return C.generateMipmaps&&b&&C.minFilter!==l1&&C.minFilter!==y1}function L(C){a.generateMipmap(C)}function v(C,b,U,n0,s0=!1){if(o===!1)return b;if(C!==null){if(a[C]!==void 0)return a[C];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+C+"'")}let h0=b;return b===6403&&(U===5126&&(h0=33326),U===5131&&(h0=33325),U===5121&&(h0=33321)),b===33319&&(U===5126&&(h0=33328),U===5131&&(h0=33327),U===5121&&(h0=33323)),b===6408&&(U===5126&&(h0=34836),U===5131&&(h0=34842),U===5121&&(h0=n0===j0&&s0===!1?35907:32856),U===32819&&(h0=32854),U===32820&&(h0=32855)),(h0===33325||h0===33326||h0===33327||h0===33328||h0===34842||h0===34836)&&e.get("EXT_color_buffer_float"),h0}function E(C,b,U){return T(C,U)===!0||C.isFramebufferTexture&&C.minFilter!==l1&&C.minFilter!==y1?Math.log2(Math.max(b.width,b.height))+1:C.mipmaps!==void 0&&C.mipmaps.length>0?C.mipmaps.length:C.isCompressedTexture&&Array.isArray(C.image)?b.mipmaps.length:1}function P(C){return C===l1||C===$4||C===K4?9728:9729}function B(C){const b=C.target;b.removeEventListener("dispose",B),F(b),b.isVideoTexture&&g.delete(b)}function Q(C){const b=C.target;b.removeEventListener("dispose",Q),V(b)}function F(C){const b=n.get(C);if(b.__webglInit===void 0)return;const U=C.source,n0=p.get(U);if(n0){const s0=n0[b.__cacheKey];s0.usedTimes--,s0.usedTimes===0&&D(C),Object.keys(n0).length===0&&p.delete(U)}n.remove(C)}function D(C){const b=n.get(C);a.deleteTexture(b.__webglTexture);const U=C.source,n0=p.get(U);delete n0[b.__cacheKey],r.memory.textures--}function V(C){const b=C.texture,U=n.get(C),n0=n.get(b);if(n0.__webglTexture!==void 0&&(a.deleteTexture(n0.__webglTexture),r.memory.textures--),C.depthTexture&&C.depthTexture.dispose(),C.isWebGLCubeRenderTarget)for(let s0=0;s0<6;s0++)a.deleteFramebuffer(U.__webglFramebuffer[s0]),U.__webglDepthbuffer&&a.deleteRenderbuffer(U.__webglDepthbuffer[s0]);else{if(a.deleteFramebuffer(U.__webglFramebuffer),U.__webglDepthbuffer&&a.deleteRenderbuffer(U.__webglDepthbuffer),U.__webglMultisampledFramebuffer&&a.deleteFramebuffer(U.__webglMultisampledFramebuffer),U.__webglColorRenderbuffer)for(let s0=0;s0<U.__webglColorRenderbuffer.length;s0++)U.__webglColorRenderbuffer[s0]&&a.deleteRenderbuffer(U.__webglColorRenderbuffer[s0]);U.__webglDepthRenderbuffer&&a.deleteRenderbuffer(U.__webglDepthRenderbuffer)}if(C.isWebGLMultipleRenderTargets)for(let s0=0,h0=b.length;s0<h0;s0++){const w0=n.get(b[s0]);w0.__webglTexture&&(a.deleteTexture(w0.__webglTexture),r.memory.textures--),n.remove(b[s0])}n.remove(b),n.remove(C)}let Z=0;function K(){Z=0}function H(){const C=Z;return C>=l&&console.warn("THREE.WebGLTextures: Trying to use "+C+" texture units while this GPU supports only "+l),Z+=1,C}function N(C){const b=[];return b.push(C.wrapS),b.push(C.wrapT),b.push(C.magFilter),b.push(C.minFilter),b.push(C.anisotropy),b.push(C.internalFormat),b.push(C.format),b.push(C.type),b.push(C.generateMipmaps),b.push(C.premultiplyAlpha),b.push(C.flipY),b.push(C.unpackAlignment),b.push(C.encoding),b.join()}function O(C,b){const U=n.get(C);if(C.isVideoTexture&&J0(C),C.isRenderTargetTexture===!1&&C.version>0&&U.__version!==C.version){const n0=C.image;if(n0===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(n0.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{v0(U,C,b);return}}t.bindTexture(3553,U.__webglTexture,33984+b)}function j(C,b){const U=n.get(C);if(C.version>0&&U.__version!==C.version){v0(U,C,b);return}t.bindTexture(35866,U.__webglTexture,33984+b)}function e0(C,b){const U=n.get(C);if(C.version>0&&U.__version!==C.version){v0(U,C,b);return}t.bindTexture(32879,U.__webglTexture,33984+b)}function t0(C,b){const U=n.get(C);if(C.version>0&&U.__version!==C.version){A0(U,C,b);return}t.bindTexture(34067,U.__webglTexture,33984+b)}const f0={[B3]:10497,[E1]:33071,[k3]:33648},T0={[l1]:9728,[$4]:9984,[K4]:9986,[y1]:9729,[kt]:9985,[q5]:9987};function q(C,b,U){if(U?(a.texParameteri(C,10242,f0[b.wrapS]),a.texParameteri(C,10243,f0[b.wrapT]),(C===32879||C===35866)&&a.texParameteri(C,32882,f0[b.wrapR]),a.texParameteri(C,10240,T0[b.magFilter]),a.texParameteri(C,10241,T0[b.minFilter])):(a.texParameteri(C,10242,33071),a.texParameteri(C,10243,33071),(C===32879||C===35866)&&a.texParameteri(C,32882,33071),(b.wrapS!==E1||b.wrapT!==E1)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),a.texParameteri(C,10240,P(b.magFilter)),a.texParameteri(C,10241,P(b.minFilter)),b.minFilter!==l1&&b.minFilter!==y1&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),e.has("EXT_texture_filter_anisotropic")===!0){const n0=e.get("EXT_texture_filter_anisotropic");if(b.type===c2&&e.has("OES_texture_float_linear")===!1||o===!1&&b.type===U5&&e.has("OES_texture_half_float_linear")===!1)return;(b.anisotropy>1||n.get(b).__currentAnisotropy)&&(a.texParameterf(C,n0.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(b.anisotropy,i.getMaxAnisotropy())),n.get(b).__currentAnisotropy=b.anisotropy)}}function I0(C,b){let U=!1;C.__webglInit===void 0&&(C.__webglInit=!0,b.addEventListener("dispose",B));const n0=b.source;let s0=p.get(n0);s0===void 0&&(s0={},p.set(n0,s0));const h0=N(b);if(h0!==C.__cacheKey){s0[h0]===void 0&&(s0[h0]={texture:a.createTexture(),usedTimes:0},r.memory.textures++,U=!0),s0[h0].usedTimes++;const w0=s0[C.__cacheKey];w0!==void 0&&(s0[C.__cacheKey].usedTimes--,w0.usedTimes===0&&D(b)),C.__cacheKey=h0,C.__webglTexture=s0[h0].texture}return U}function v0(C,b,U){let n0=3553;b.isDataArrayTexture&&(n0=35866),b.isData3DTexture&&(n0=32879);const s0=I0(C,b),h0=b.source;t.bindTexture(n0,C.__webglTexture,33984+U);const w0=n.get(h0);if(h0.version!==w0.__version||s0===!0){t.activeTexture(33984+U),a.pixelStorei(37440,b.flipY),a.pixelStorei(37441,b.premultiplyAlpha),a.pixelStorei(3317,b.unpackAlignment),a.pixelStorei(37443,0);const u0=S(b)&&y(b.image)===!1;let Y=M(b.image,u0,!1,h);Y=W0(b,Y);const g0=y(Y)||o,E0=s.convert(b.format,b.encoding);let m0=s.convert(b.type),S0=v(b.internalFormat,E0,m0,b.encoding,b.isVideoTexture);q(n0,b,g0);let D0;const G0=b.mipmaps,R=o&&b.isVideoTexture!==!0,d0=w0.__version===void 0||s0===!0,r0=E(b,Y,g0);if(b.isDepthTexture)S0=6402,o?b.type===c2?S0=36012:b.type===S2?S0=33190:b.type===f5?S0=35056:S0=33189:b.type===c2&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),b.format===w2&&S0===6402&&b.type!==Vt&&b.type!==S2&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),b.type=S2,m0=s.convert(b.type)),b.format===p5&&S0===6402&&(S0=34041,b.type!==f5&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),b.type=f5,m0=s.convert(b.type))),d0&&(R?t.texStorage2D(3553,1,S0,Y.width,Y.height):t.texImage2D(3553,0,S0,Y.width,Y.height,0,E0,m0,null));else if(b.isDataTexture)if(G0.length>0&&g0){R&&d0&&t.texStorage2D(3553,r0,S0,G0[0].width,G0[0].height);for(let X=0,o0=G0.length;X<o0;X++)D0=G0[X],R?t.texSubImage2D(3553,X,0,0,D0.width,D0.height,E0,m0,D0.data):t.texImage2D(3553,X,S0,D0.width,D0.height,0,E0,m0,D0.data);b.generateMipmaps=!1}else R?(d0&&t.texStorage2D(3553,r0,S0,Y.width,Y.height),t.texSubImage2D(3553,0,0,0,Y.width,Y.height,E0,m0,Y.data)):t.texImage2D(3553,0,S0,Y.width,Y.height,0,E0,m0,Y.data);else if(b.isCompressedTexture){R&&d0&&t.texStorage2D(3553,r0,S0,G0[0].width,G0[0].height);for(let X=0,o0=G0.length;X<o0;X++)D0=G0[X],b.format!==F1?E0!==null?R?t.compressedTexSubImage2D(3553,X,0,0,D0.width,D0.height,E0,D0.data):t.compressedTexImage2D(3553,X,S0,D0.width,D0.height,0,D0.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):R?t.texSubImage2D(3553,X,0,0,D0.width,D0.height,E0,m0,D0.data):t.texImage2D(3553,X,S0,D0.width,D0.height,0,E0,m0,D0.data)}else if(b.isDataArrayTexture)R?(d0&&t.texStorage3D(35866,r0,S0,Y.width,Y.height,Y.depth),t.texSubImage3D(35866,0,0,0,0,Y.width,Y.height,Y.depth,E0,m0,Y.data)):t.texImage3D(35866,0,S0,Y.width,Y.height,Y.depth,0,E0,m0,Y.data);else if(b.isData3DTexture)R?(d0&&t.texStorage3D(32879,r0,S0,Y.width,Y.height,Y.depth),t.texSubImage3D(32879,0,0,0,0,Y.width,Y.height,Y.depth,E0,m0,Y.data)):t.texImage3D(32879,0,S0,Y.width,Y.height,Y.depth,0,E0,m0,Y.data);else if(b.isFramebufferTexture){if(d0)if(R)t.texStorage2D(3553,r0,S0,Y.width,Y.height);else{let X=Y.width,o0=Y.height;for(let b0=0;b0<r0;b0++)t.texImage2D(3553,b0,S0,X,o0,0,E0,m0,null),X>>=1,o0>>=1}}else if(G0.length>0&&g0){R&&d0&&t.texStorage2D(3553,r0,S0,G0[0].width,G0[0].height);for(let X=0,o0=G0.length;X<o0;X++)D0=G0[X],R?t.texSubImage2D(3553,X,0,0,E0,m0,D0):t.texImage2D(3553,X,S0,E0,m0,D0);b.generateMipmaps=!1}else R?(d0&&t.texStorage2D(3553,r0,S0,Y.width,Y.height),t.texSubImage2D(3553,0,0,0,E0,m0,Y)):t.texImage2D(3553,0,S0,E0,m0,Y);T(b,g0)&&L(n0),w0.__version=h0.version,b.onUpdate&&b.onUpdate(b)}C.__version=b.version}function A0(C,b,U){if(b.image.length!==6)return;const n0=I0(C,b),s0=b.source;t.bindTexture(34067,C.__webglTexture,33984+U);const h0=n.get(s0);if(s0.version!==h0.__version||n0===!0){t.activeTexture(33984+U),a.pixelStorei(37440,b.flipY),a.pixelStorei(37441,b.premultiplyAlpha),a.pixelStorei(3317,b.unpackAlignment),a.pixelStorei(37443,0);const w0=b.isCompressedTexture||b.image[0].isCompressedTexture,u0=b.image[0]&&b.image[0].isDataTexture,Y=[];for(let X=0;X<6;X++)!w0&&!u0?Y[X]=M(b.image[X],!1,!0,c):Y[X]=u0?b.image[X].image:b.image[X],Y[X]=W0(b,Y[X]);const g0=Y[0],E0=y(g0)||o,m0=s.convert(b.format,b.encoding),S0=s.convert(b.type),D0=v(b.internalFormat,m0,S0,b.encoding),G0=o&&b.isVideoTexture!==!0,R=h0.__version===void 0||n0===!0;let d0=E(b,g0,E0);q(34067,b,E0);let r0;if(w0){G0&&R&&t.texStorage2D(34067,d0,D0,g0.width,g0.height);for(let X=0;X<6;X++){r0=Y[X].mipmaps;for(let o0=0;o0<r0.length;o0++){const b0=r0[o0];b.format!==F1?m0!==null?G0?t.compressedTexSubImage2D(34069+X,o0,0,0,b0.width,b0.height,m0,b0.data):t.compressedTexImage2D(34069+X,o0,D0,b0.width,b0.height,0,b0.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):G0?t.texSubImage2D(34069+X,o0,0,0,b0.width,b0.height,m0,S0,b0.data):t.texImage2D(34069+X,o0,D0,b0.width,b0.height,0,m0,S0,b0.data)}}}else{r0=b.mipmaps,G0&&R&&(r0.length>0&&d0++,t.texStorage2D(34067,d0,D0,Y[0].width,Y[0].height));for(let X=0;X<6;X++)if(u0){G0?t.texSubImage2D(34069+X,0,0,0,Y[X].width,Y[X].height,m0,S0,Y[X].data):t.texImage2D(34069+X,0,D0,Y[X].width,Y[X].height,0,m0,S0,Y[X].data);for(let o0=0;o0<r0.length;o0++){const Y0=r0[o0].image[X].image;G0?t.texSubImage2D(34069+X,o0+1,0,0,Y0.width,Y0.height,m0,S0,Y0.data):t.texImage2D(34069+X,o0+1,D0,Y0.width,Y0.height,0,m0,S0,Y0.data)}}else{G0?t.texSubImage2D(34069+X,0,0,0,m0,S0,Y[X]):t.texImage2D(34069+X,0,D0,m0,S0,Y[X]);for(let o0=0;o0<r0.length;o0++){const b0=r0[o0];G0?t.texSubImage2D(34069+X,o0+1,0,0,m0,S0,b0.image[X]):t.texImage2D(34069+X,o0+1,D0,m0,S0,b0.image[X])}}}T(b,E0)&&L(34067),h0.__version=s0.version,b.onUpdate&&b.onUpdate(b)}C.__version=b.version}function c0(C,b,U,n0,s0){const h0=s.convert(U.format,U.encoding),w0=s.convert(U.type),u0=v(U.internalFormat,h0,w0,U.encoding);n.get(b).__hasExternalTextures||(s0===32879||s0===35866?t.texImage3D(s0,0,u0,b.width,b.height,b.depth,0,h0,w0,null):t.texImage2D(s0,0,u0,b.width,b.height,0,h0,w0,null)),t.bindFramebuffer(36160,C),_0(b)?f.framebufferTexture2DMultisampleEXT(36160,n0,s0,n.get(U).__webglTexture,0,y0(b)):a.framebufferTexture2D(36160,n0,s0,n.get(U).__webglTexture,0),t.bindFramebuffer(36160,null)}function F0(C,b,U){if(a.bindRenderbuffer(36161,C),b.depthBuffer&&!b.stencilBuffer){let n0=33189;if(U||_0(b)){const s0=b.depthTexture;s0&&s0.isDepthTexture&&(s0.type===c2?n0=36012:s0.type===S2&&(n0=33190));const h0=y0(b);_0(b)?f.renderbufferStorageMultisampleEXT(36161,h0,n0,b.width,b.height):a.renderbufferStorageMultisample(36161,h0,n0,b.width,b.height)}else a.renderbufferStorage(36161,n0,b.width,b.height);a.framebufferRenderbuffer(36160,36096,36161,C)}else if(b.depthBuffer&&b.stencilBuffer){const n0=y0(b);U&&_0(b)===!1?a.renderbufferStorageMultisample(36161,n0,35056,b.width,b.height):_0(b)?f.renderbufferStorageMultisampleEXT(36161,n0,35056,b.width,b.height):a.renderbufferStorage(36161,34041,b.width,b.height),a.framebufferRenderbuffer(36160,33306,36161,C)}else{const n0=b.isWebGLMultipleRenderTargets===!0?b.texture:[b.texture];for(let s0=0;s0<n0.length;s0++){const h0=n0[s0],w0=s.convert(h0.format,h0.encoding),u0=s.convert(h0.type),Y=v(h0.internalFormat,w0,u0,h0.encoding),g0=y0(b);U&&_0(b)===!1?a.renderbufferStorageMultisample(36161,g0,Y,b.width,b.height):_0(b)?f.renderbufferStorageMultisampleEXT(36161,g0,Y,b.width,b.height):a.renderbufferStorage(36161,Y,b.width,b.height)}}a.bindRenderbuffer(36161,null)}function J(C,b){if(b&&b.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(36160,C),!(b.depthTexture&&b.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!n.get(b.depthTexture).__webglTexture||b.depthTexture.image.width!==b.width||b.depthTexture.image.height!==b.height)&&(b.depthTexture.image.width=b.width,b.depthTexture.image.height=b.height,b.depthTexture.needsUpdate=!0),O(b.depthTexture,0);const n0=n.get(b.depthTexture).__webglTexture,s0=y0(b);if(b.depthTexture.format===w2)_0(b)?f.framebufferTexture2DMultisampleEXT(36160,36096,3553,n0,0,s0):a.framebufferTexture2D(36160,36096,3553,n0,0);else if(b.depthTexture.format===p5)_0(b)?f.framebufferTexture2DMultisampleEXT(36160,33306,3553,n0,0,s0):a.framebufferTexture2D(36160,33306,3553,n0,0);else throw new Error("Unknown depthTexture format")}function W(C){const b=n.get(C),U=C.isWebGLCubeRenderTarget===!0;if(C.depthTexture&&!b.__autoAllocateDepthBuffer){if(U)throw new Error("target.depthTexture not supported in Cube render targets");J(b.__webglFramebuffer,C)}else if(U){b.__webglDepthbuffer=[];for(let n0=0;n0<6;n0++)t.bindFramebuffer(36160,b.__webglFramebuffer[n0]),b.__webglDepthbuffer[n0]=a.createRenderbuffer(),F0(b.__webglDepthbuffer[n0],C,!1)}else t.bindFramebuffer(36160,b.__webglFramebuffer),b.__webglDepthbuffer=a.createRenderbuffer(),F0(b.__webglDepthbuffer,C,!1);t.bindFramebuffer(36160,null)}function i0(C,b,U){const n0=n.get(C);b!==void 0&&c0(n0.__webglFramebuffer,C,C.texture,36064,3553),U!==void 0&&W(C)}function p0(C){const b=C.texture,U=n.get(C),n0=n.get(b);C.addEventListener("dispose",Q),C.isWebGLMultipleRenderTargets!==!0&&(n0.__webglTexture===void 0&&(n0.__webglTexture=a.createTexture()),n0.__version=b.version,r.memory.textures++);const s0=C.isWebGLCubeRenderTarget===!0,h0=C.isWebGLMultipleRenderTargets===!0,w0=y(C)||o;if(s0){U.__webglFramebuffer=[];for(let u0=0;u0<6;u0++)U.__webglFramebuffer[u0]=a.createFramebuffer()}else{if(U.__webglFramebuffer=a.createFramebuffer(),h0)if(i.drawBuffers){const u0=C.texture;for(let Y=0,g0=u0.length;Y<g0;Y++){const E0=n.get(u0[Y]);E0.__webglTexture===void 0&&(E0.__webglTexture=a.createTexture(),r.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(o&&C.samples>0&&_0(C)===!1){const u0=h0?b:[b];U.__webglMultisampledFramebuffer=a.createFramebuffer(),U.__webglColorRenderbuffer=[],t.bindFramebuffer(36160,U.__webglMultisampledFramebuffer);for(let Y=0;Y<u0.length;Y++){const g0=u0[Y];U.__webglColorRenderbuffer[Y]=a.createRenderbuffer(),a.bindRenderbuffer(36161,U.__webglColorRenderbuffer[Y]);const E0=s.convert(g0.format,g0.encoding),m0=s.convert(g0.type),S0=v(g0.internalFormat,E0,m0,g0.encoding,C.isXRRenderTarget===!0),D0=y0(C);a.renderbufferStorageMultisample(36161,D0,S0,C.width,C.height),a.framebufferRenderbuffer(36160,36064+Y,36161,U.__webglColorRenderbuffer[Y])}a.bindRenderbuffer(36161,null),C.depthBuffer&&(U.__webglDepthRenderbuffer=a.createRenderbuffer(),F0(U.__webglDepthRenderbuffer,C,!0)),t.bindFramebuffer(36160,null)}}if(s0){t.bindTexture(34067,n0.__webglTexture),q(34067,b,w0);for(let u0=0;u0<6;u0++)c0(U.__webglFramebuffer[u0],C,b,36064,34069+u0);T(b,w0)&&L(34067),t.unbindTexture()}else if(h0){const u0=C.texture;for(let Y=0,g0=u0.length;Y<g0;Y++){const E0=u0[Y],m0=n.get(E0);t.bindTexture(3553,m0.__webglTexture),q(3553,E0,w0),c0(U.__webglFramebuffer,C,E0,36064+Y,3553),T(E0,w0)&&L(3553)}t.unbindTexture()}else{let u0=3553;(C.isWebGL3DRenderTarget||C.isWebGLArrayRenderTarget)&&(o?u0=C.isWebGL3DRenderTarget?32879:35866:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),t.bindTexture(u0,n0.__webglTexture),q(u0,b,w0),c0(U.__webglFramebuffer,C,b,36064,u0),T(b,w0)&&L(u0),t.unbindTexture()}C.depthBuffer&&W(C)}function l0(C){const b=y(C)||o,U=C.isWebGLMultipleRenderTargets===!0?C.texture:[C.texture];for(let n0=0,s0=U.length;n0<s0;n0++){const h0=U[n0];if(T(h0,b)){const w0=C.isWebGLCubeRenderTarget?34067:3553,u0=n.get(h0).__webglTexture;t.bindTexture(w0,u0),L(w0),t.unbindTexture()}}}function R0(C){if(o&&C.samples>0&&_0(C)===!1){const b=C.isWebGLMultipleRenderTargets?C.texture:[C.texture],U=C.width,n0=C.height;let s0=16384;const h0=[],w0=C.stencilBuffer?33306:36096,u0=n.get(C),Y=C.isWebGLMultipleRenderTargets===!0;if(Y)for(let g0=0;g0<b.length;g0++)t.bindFramebuffer(36160,u0.__webglMultisampledFramebuffer),a.framebufferRenderbuffer(36160,36064+g0,36161,null),t.bindFramebuffer(36160,u0.__webglFramebuffer),a.framebufferTexture2D(36009,36064+g0,3553,null,0);t.bindFramebuffer(36008,u0.__webglMultisampledFramebuffer),t.bindFramebuffer(36009,u0.__webglFramebuffer);for(let g0=0;g0<b.length;g0++){h0.push(36064+g0),C.depthBuffer&&h0.push(w0);const E0=u0.__ignoreDepthValues!==void 0?u0.__ignoreDepthValues:!1;if(E0===!1&&(C.depthBuffer&&(s0|=256),C.stencilBuffer&&(s0|=1024)),Y&&a.framebufferRenderbuffer(36008,36064,36161,u0.__webglColorRenderbuffer[g0]),E0===!0&&(a.invalidateFramebuffer(36008,[w0]),a.invalidateFramebuffer(36009,[w0])),Y){const m0=n.get(b[g0]).__webglTexture;a.framebufferTexture2D(36009,36064,3553,m0,0)}a.blitFramebuffer(0,0,U,n0,0,0,U,n0,s0,9728),d&&a.invalidateFramebuffer(36008,h0)}if(t.bindFramebuffer(36008,null),t.bindFramebuffer(36009,null),Y)for(let g0=0;g0<b.length;g0++){t.bindFramebuffer(36160,u0.__webglMultisampledFramebuffer),a.framebufferRenderbuffer(36160,36064+g0,36161,u0.__webglColorRenderbuffer[g0]);const E0=n.get(b[g0]).__webglTexture;t.bindFramebuffer(36160,u0.__webglFramebuffer),a.framebufferTexture2D(36009,36064+g0,3553,E0,0)}t.bindFramebuffer(36009,u0.__webglMultisampledFramebuffer)}}function y0(C){return Math.min(u,C.samples)}function _0(C){const b=n.get(C);return o&&C.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&b.__useRenderToTexture!==!1}function J0(C){const b=r.render.frame;g.get(C)!==b&&(g.set(C,b),C.update())}function W0(C,b){const U=C.encoding,n0=C.format,s0=C.type;return C.isCompressedTexture===!0||C.isVideoTexture===!0||C.format===j4||U!==L2&&(U===j0?o===!1?e.has("EXT_sRGB")===!0&&n0===F1?(C.format=j4,C.minFilter=y1,C.generateMipmaps=!1):b=Wt.sRGBToLinear(b):(n0!==F1||s0!==C2)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",U)),b}this.allocateTextureUnit=H,this.resetTextureUnits=K,this.setTexture2D=O,this.setTexture2DArray=j,this.setTexture3D=e0,this.setTextureCube=t0,this.rebindTextures=i0,this.setupRenderTarget=p0,this.updateRenderTargetMipmap=l0,this.updateMultisampleRenderTarget=R0,this.setupDepthRenderbuffer=W,this.setupFrameBufferTexture=c0,this.useMultisampledRTT=_0}function _r(a,e,t){const n=t.isWebGL2;function i(s,r=null){let o;if(s===C2)return 5121;if(s===u6)return 32819;if(s===f6)return 32820;if(s===l6)return 5120;if(s===c6)return 5122;if(s===Vt)return 5123;if(s===h6)return 5124;if(s===S2)return 5125;if(s===c2)return 5126;if(s===U5)return n?5131:(o=e.get("OES_texture_half_float"),o!==null?o.HALF_FLOAT_OES:null);if(s===d6)return 6406;if(s===F1)return 6408;if(s===m6)return 6409;if(s===g6)return 6410;if(s===w2)return 6402;if(s===p5)return 34041;if(s===x6)return 6403;if(s===p6)return console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228"),6408;if(s===j4)return o=e.get("EXT_sRGB"),o!==null?o.SRGB_ALPHA_EXT:null;if(s===_6)return 36244;if(s===v6)return 33319;if(s===y6)return 33320;if(s===M6)return 36249;if(s===l4||s===c4||s===h4||s===u4)if(r===j0)if(o=e.get("WEBGL_compressed_texture_s3tc_srgb"),o!==null){if(s===l4)return o.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(s===c4)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(s===h4)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(s===u4)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(o=e.get("WEBGL_compressed_texture_s3tc"),o!==null){if(s===l4)return o.COMPRESSED_RGB_S3TC_DXT1_EXT;if(s===c4)return o.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(s===h4)return o.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(s===u4)return o.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(s===Q7||s===j7||s===ee||s===te)if(o=e.get("WEBGL_compressed_texture_pvrtc"),o!==null){if(s===Q7)return o.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(s===j7)return o.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(s===ee)return o.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(s===te)return o.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(s===S6)return o=e.get("WEBGL_compressed_texture_etc1"),o!==null?o.COMPRESSED_RGB_ETC1_WEBGL:null;if(s===ne||s===ie)if(o=e.get("WEBGL_compressed_texture_etc"),o!==null){if(s===ne)return r===j0?o.COMPRESSED_SRGB8_ETC2:o.COMPRESSED_RGB8_ETC2;if(s===ie)return r===j0?o.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:o.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(s===se||s===re||s===ae||s===oe||s===le||s===ce||s===he||s===ue||s===fe||s===de||s===pe||s===me||s===ge||s===xe)if(o=e.get("WEBGL_compressed_texture_astc"),o!==null){if(s===se)return r===j0?o.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:o.COMPRESSED_RGBA_ASTC_4x4_KHR;if(s===re)return r===j0?o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:o.COMPRESSED_RGBA_ASTC_5x4_KHR;if(s===ae)return r===j0?o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:o.COMPRESSED_RGBA_ASTC_5x5_KHR;if(s===oe)return r===j0?o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:o.COMPRESSED_RGBA_ASTC_6x5_KHR;if(s===le)return r===j0?o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:o.COMPRESSED_RGBA_ASTC_6x6_KHR;if(s===ce)return r===j0?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:o.COMPRESSED_RGBA_ASTC_8x5_KHR;if(s===he)return r===j0?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:o.COMPRESSED_RGBA_ASTC_8x6_KHR;if(s===ue)return r===j0?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:o.COMPRESSED_RGBA_ASTC_8x8_KHR;if(s===fe)return r===j0?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:o.COMPRESSED_RGBA_ASTC_10x5_KHR;if(s===de)return r===j0?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:o.COMPRESSED_RGBA_ASTC_10x6_KHR;if(s===pe)return r===j0?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:o.COMPRESSED_RGBA_ASTC_10x8_KHR;if(s===me)return r===j0?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:o.COMPRESSED_RGBA_ASTC_10x10_KHR;if(s===ge)return r===j0?o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:o.COMPRESSED_RGBA_ASTC_12x10_KHR;if(s===xe)return r===j0?o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:o.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(s===_e)if(o=e.get("EXT_texture_compression_bptc"),o!==null){if(s===_e)return r===j0?o.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:o.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;return s===f5?n?34042:(o=e.get("WEBGL_depth_texture"),o!==null?o.UNSIGNED_INT_24_8_WEBGL:null):a[s]!==void 0?a[s]:null}return{convert:i}}class vr extends p1{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}}class I5 extends X0{constructor(){super(),this.isGroup=!0,this.type="Group"}}const yr={type:"move"};class B4{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new I5,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new I5,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new A,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new A),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new I5,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new A,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new A),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,n){let i=null,s=null,r=null;const o=this._targetRay,l=this._grip,c=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(c&&e.hand){r=!0;for(const m of e.hand.values()){const p=t.getJointPose(m,n);if(c.joints[m.jointName]===void 0){const _=new I5;_.matrixAutoUpdate=!1,_.visible=!1,c.joints[m.jointName]=_,c.add(_)}const x=c.joints[m.jointName];p!==null&&(x.matrix.fromArray(p.transform.matrix),x.matrix.decompose(x.position,x.rotation,x.scale),x.jointRadius=p.radius),x.visible=p!==null}const h=c.joints["index-finger-tip"],u=c.joints["thumb-tip"],f=h.position.distanceTo(u.position),d=.02,g=.005;c.inputState.pinching&&f>d+g?(c.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!c.inputState.pinching&&f<=d-g&&(c.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else l!==null&&e.gripSpace&&(s=t.getPose(e.gripSpace,n),s!==null&&(l.matrix.fromArray(s.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),s.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(s.linearVelocity)):l.hasLinearVelocity=!1,s.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(s.angularVelocity)):l.hasAngularVelocity=!1));o!==null&&(i=t.getPose(e.targetRaySpace,n),i===null&&s!==null&&(i=s),i!==null&&(o.matrix.fromArray(i.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),i.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(i.linearVelocity)):o.hasLinearVelocity=!1,i.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(i.angularVelocity)):o.hasAngularVelocity=!1,this.dispatchEvent(yr)))}return o!==null&&(o.visible=i!==null),l!==null&&(l.visible=s!==null),c!==null&&(c.visible=r!==null),this}}class Mr extends b1{constructor(e,t,n,i,s,r,o,l,c,h){if(h=h!==void 0?h:w2,h!==w2&&h!==p5)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&h===w2&&(n=S2),n===void 0&&h===p5&&(n=f5),super(null,i,s,r,o,l,h,n,c),this.isDepthTexture=!0,this.image={width:e,height:t},this.magFilter=o!==void 0?o:l1,this.minFilter=l!==void 0?l:l1,this.flipY=!1,this.generateMipmaps=!1}}class Sr extends I2{constructor(e,t){super();const n=this;let i=null,s=1,r=null,o="local-floor",l=null,c=null,h=null,u=null,f=null,d=null;const g=t.getContextAttributes();let m=null,p=null;const x=[],_=[],M=new p1;M.layers.enable(1),M.viewport=new H0;const y=new p1;y.layers.enable(2),y.viewport=new H0;const S=[M,y],T=new vr;T.layers.enable(1),T.layers.enable(2);let L=null,v=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(N){let O=x[N];return O===void 0&&(O=new B4,x[N]=O),O.getTargetRaySpace()},this.getControllerGrip=function(N){let O=x[N];return O===void 0&&(O=new B4,x[N]=O),O.getGripSpace()},this.getHand=function(N){let O=x[N];return O===void 0&&(O=new B4,x[N]=O),O.getHandSpace()};function E(N){const O=_.indexOf(N.inputSource);if(O===-1)return;const j=x[O];j!==void 0&&j.dispatchEvent({type:N.type,data:N.inputSource})}function P(){i.removeEventListener("select",E),i.removeEventListener("selectstart",E),i.removeEventListener("selectend",E),i.removeEventListener("squeeze",E),i.removeEventListener("squeezestart",E),i.removeEventListener("squeezeend",E),i.removeEventListener("end",P),i.removeEventListener("inputsourceschange",B);for(let N=0;N<x.length;N++){const O=_[N];O!==null&&(_[N]=null,x[N].disconnect(O))}L=null,v=null,e.setRenderTarget(m),f=null,u=null,h=null,i=null,p=null,H.stop(),n.isPresenting=!1,n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(N){s=N,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(N){o=N,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return l||r},this.setReferenceSpace=function(N){l=N},this.getBaseLayer=function(){return u!==null?u:f},this.getBinding=function(){return h},this.getFrame=function(){return d},this.getSession=function(){return i},this.setSession=async function(N){if(i=N,i!==null){if(m=e.getRenderTarget(),i.addEventListener("select",E),i.addEventListener("selectstart",E),i.addEventListener("selectend",E),i.addEventListener("squeeze",E),i.addEventListener("squeezestart",E),i.addEventListener("squeezeend",E),i.addEventListener("end",P),i.addEventListener("inputsourceschange",B),g.xrCompatible!==!0&&await t.makeXRCompatible(),i.renderState.layers===void 0||e.capabilities.isWebGL2===!1){const O={antialias:i.renderState.layers===void 0?g.antialias:!0,alpha:g.alpha,depth:g.depth,stencil:g.stencil,framebufferScaleFactor:s};f=new XRWebGLLayer(i,t,O),i.updateRenderState({baseLayer:f}),p=new P2(f.framebufferWidth,f.framebufferHeight,{format:F1,type:C2,encoding:e.outputEncoding,stencilBuffer:g.stencil})}else{let O=null,j=null,e0=null;g.depth&&(e0=g.stencil?35056:33190,O=g.stencil?p5:w2,j=g.stencil?f5:S2);const t0={colorFormat:32856,depthFormat:e0,scaleFactor:s};h=new XRWebGLBinding(i,t),u=h.createProjectionLayer(t0),i.updateRenderState({layers:[u]}),p=new P2(u.textureWidth,u.textureHeight,{format:F1,type:C2,depthTexture:new Mr(u.textureWidth,u.textureHeight,j,void 0,void 0,void 0,void 0,void 0,void 0,O),stencilBuffer:g.stencil,encoding:e.outputEncoding,samples:g.antialias?4:0});const f0=e.properties.get(p);f0.__ignoreDepthValues=u.ignoreDepthValues}p.isXRRenderTarget=!0,this.setFoveation(1),l=null,r=await i.requestReferenceSpace(o),H.setContext(i),H.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}};function B(N){for(let O=0;O<N.removed.length;O++){const j=N.removed[O],e0=_.indexOf(j);e0>=0&&(_[e0]=null,x[e0].dispatchEvent({type:"disconnected",data:j}))}for(let O=0;O<N.added.length;O++){const j=N.added[O];let e0=_.indexOf(j);if(e0===-1){for(let f0=0;f0<x.length;f0++)if(f0>=_.length){_.push(j),e0=f0;break}else if(_[f0]===null){_[f0]=j,e0=f0;break}if(e0===-1)break}const t0=x[e0];t0&&t0.dispatchEvent({type:"connected",data:j})}}const Q=new A,F=new A;function D(N,O,j){Q.setFromMatrixPosition(O.matrixWorld),F.setFromMatrixPosition(j.matrixWorld);const e0=Q.distanceTo(F),t0=O.projectionMatrix.elements,f0=j.projectionMatrix.elements,T0=t0[14]/(t0[10]-1),q=t0[14]/(t0[10]+1),I0=(t0[9]+1)/t0[5],v0=(t0[9]-1)/t0[5],A0=(t0[8]-1)/t0[0],c0=(f0[8]+1)/f0[0],F0=T0*A0,J=T0*c0,W=e0/(-A0+c0),i0=W*-A0;O.matrixWorld.decompose(N.position,N.quaternion,N.scale),N.translateX(i0),N.translateZ(W),N.matrixWorld.compose(N.position,N.quaternion,N.scale),N.matrixWorldInverse.copy(N.matrixWorld).invert();const p0=T0+W,l0=q+W,R0=F0-i0,y0=J+(e0-i0),_0=I0*q/l0*p0,J0=v0*q/l0*p0;N.projectionMatrix.makePerspective(R0,y0,_0,J0,p0,l0)}function V(N,O){O===null?N.matrixWorld.copy(N.matrix):N.matrixWorld.multiplyMatrices(O.matrixWorld,N.matrix),N.matrixWorldInverse.copy(N.matrixWorld).invert()}this.updateCamera=function(N){if(i===null)return;T.near=y.near=M.near=N.near,T.far=y.far=M.far=N.far,(L!==T.near||v!==T.far)&&(i.updateRenderState({depthNear:T.near,depthFar:T.far}),L=T.near,v=T.far);const O=N.parent,j=T.cameras;V(T,O);for(let t0=0;t0<j.length;t0++)V(j[t0],O);T.matrixWorld.decompose(T.position,T.quaternion,T.scale),N.matrix.copy(T.matrix),N.matrix.decompose(N.position,N.quaternion,N.scale);const e0=N.children;for(let t0=0,f0=e0.length;t0<f0;t0++)e0[t0].updateMatrixWorld(!0);j.length===2?D(T,M,y):T.projectionMatrix.copy(M.projectionMatrix)},this.getCamera=function(){return T},this.getFoveation=function(){if(u!==null)return u.fixedFoveation;if(f!==null)return f.fixedFoveation},this.setFoveation=function(N){u!==null&&(u.fixedFoveation=N),f!==null&&f.fixedFoveation!==void 0&&(f.fixedFoveation=N)};let Z=null;function K(N,O){if(c=O.getViewerPose(l||r),d=O,c!==null){const j=c.views;f!==null&&(e.setRenderTargetFramebuffer(p,f.framebuffer),e.setRenderTarget(p));let e0=!1;j.length!==T.cameras.length&&(T.cameras.length=0,e0=!0);for(let t0=0;t0<j.length;t0++){const f0=j[t0];let T0=null;if(f!==null)T0=f.getViewport(f0);else{const I0=h.getViewSubImage(u,f0);T0=I0.viewport,t0===0&&(e.setRenderTargetTextures(p,I0.colorTexture,u.ignoreDepthValues?void 0:I0.depthStencilTexture),e.setRenderTarget(p))}let q=S[t0];q===void 0&&(q=new p1,q.layers.enable(t0),q.viewport=new H0,S[t0]=q),q.matrix.fromArray(f0.transform.matrix),q.projectionMatrix.fromArray(f0.projectionMatrix),q.viewport.set(T0.x,T0.y,T0.width,T0.height),t0===0&&T.matrix.copy(q.matrix),e0===!0&&T.cameras.push(q)}}for(let j=0;j<x.length;j++){const e0=_[j],t0=x[j];e0!==null&&t0!==void 0&&t0.update(e0,O,l||r)}Z&&Z(N,O),d=null}const H=new Zt;H.setAnimationLoop(K),this.setAnimationLoop=function(N){Z=N},this.dispose=function(){}}}function br(a,e){function t(m,p){m.fogColor.value.copy(p.color),p.isFog?(m.fogNear.value=p.near,m.fogFar.value=p.far):p.isFogExp2&&(m.fogDensity.value=p.density)}function n(m,p,x,_,M){p.isMeshBasicMaterial||p.isMeshLambertMaterial?i(m,p):p.isMeshToonMaterial?(i(m,p),h(m,p)):p.isMeshPhongMaterial?(i(m,p),c(m,p)):p.isMeshStandardMaterial?(i(m,p),u(m,p),p.isMeshPhysicalMaterial&&f(m,p,M)):p.isMeshMatcapMaterial?(i(m,p),d(m,p)):p.isMeshDepthMaterial?i(m,p):p.isMeshDistanceMaterial?(i(m,p),g(m,p)):p.isMeshNormalMaterial?i(m,p):p.isLineBasicMaterial?(s(m,p),p.isLineDashedMaterial&&r(m,p)):p.isPointsMaterial?o(m,p,x,_):p.isSpriteMaterial?l(m,p):p.isShadowMaterial?(m.color.value.copy(p.color),m.opacity.value=p.opacity):p.isShaderMaterial&&(p.uniformsNeedUpdate=!1)}function i(m,p){m.opacity.value=p.opacity,p.color&&m.diffuse.value.copy(p.color),p.emissive&&m.emissive.value.copy(p.emissive).multiplyScalar(p.emissiveIntensity),p.map&&(m.map.value=p.map),p.alphaMap&&(m.alphaMap.value=p.alphaMap),p.bumpMap&&(m.bumpMap.value=p.bumpMap,m.bumpScale.value=p.bumpScale,p.side===C1&&(m.bumpScale.value*=-1)),p.displacementMap&&(m.displacementMap.value=p.displacementMap,m.displacementScale.value=p.displacementScale,m.displacementBias.value=p.displacementBias),p.emissiveMap&&(m.emissiveMap.value=p.emissiveMap),p.normalMap&&(m.normalMap.value=p.normalMap,m.normalScale.value.copy(p.normalScale),p.side===C1&&m.normalScale.value.negate()),p.specularMap&&(m.specularMap.value=p.specularMap),p.alphaTest>0&&(m.alphaTest.value=p.alphaTest);const x=e.get(p).envMap;if(x&&(m.envMap.value=x,m.flipEnvMap.value=x.isCubeTexture&&x.isRenderTargetTexture===!1?-1:1,m.reflectivity.value=p.reflectivity,m.ior.value=p.ior,m.refractionRatio.value=p.refractionRatio),p.lightMap){m.lightMap.value=p.lightMap;const y=a.physicallyCorrectLights!==!0?Math.PI:1;m.lightMapIntensity.value=p.lightMapIntensity*y}p.aoMap&&(m.aoMap.value=p.aoMap,m.aoMapIntensity.value=p.aoMapIntensity);let _;p.map?_=p.map:p.specularMap?_=p.specularMap:p.displacementMap?_=p.displacementMap:p.normalMap?_=p.normalMap:p.bumpMap?_=p.bumpMap:p.roughnessMap?_=p.roughnessMap:p.metalnessMap?_=p.metalnessMap:p.alphaMap?_=p.alphaMap:p.emissiveMap?_=p.emissiveMap:p.clearcoatMap?_=p.clearcoatMap:p.clearcoatNormalMap?_=p.clearcoatNormalMap:p.clearcoatRoughnessMap?_=p.clearcoatRoughnessMap:p.iridescenceMap?_=p.iridescenceMap:p.iridescenceThicknessMap?_=p.iridescenceThicknessMap:p.specularIntensityMap?_=p.specularIntensityMap:p.specularColorMap?_=p.specularColorMap:p.transmissionMap?_=p.transmissionMap:p.thicknessMap?_=p.thicknessMap:p.sheenColorMap?_=p.sheenColorMap:p.sheenRoughnessMap&&(_=p.sheenRoughnessMap),_!==void 0&&(_.isWebGLRenderTarget&&(_=_.texture),_.matrixAutoUpdate===!0&&_.updateMatrix(),m.uvTransform.value.copy(_.matrix));let M;p.aoMap?M=p.aoMap:p.lightMap&&(M=p.lightMap),M!==void 0&&(M.isWebGLRenderTarget&&(M=M.texture),M.matrixAutoUpdate===!0&&M.updateMatrix(),m.uv2Transform.value.copy(M.matrix))}function s(m,p){m.diffuse.value.copy(p.color),m.opacity.value=p.opacity}function r(m,p){m.dashSize.value=p.dashSize,m.totalSize.value=p.dashSize+p.gapSize,m.scale.value=p.scale}function o(m,p,x,_){m.diffuse.value.copy(p.color),m.opacity.value=p.opacity,m.size.value=p.size*x,m.scale.value=_*.5,p.map&&(m.map.value=p.map),p.alphaMap&&(m.alphaMap.value=p.alphaMap),p.alphaTest>0&&(m.alphaTest.value=p.alphaTest);let M;p.map?M=p.map:p.alphaMap&&(M=p.alphaMap),M!==void 0&&(M.matrixAutoUpdate===!0&&M.updateMatrix(),m.uvTransform.value.copy(M.matrix))}function l(m,p){m.diffuse.value.copy(p.color),m.opacity.value=p.opacity,m.rotation.value=p.rotation,p.map&&(m.map.value=p.map),p.alphaMap&&(m.alphaMap.value=p.alphaMap),p.alphaTest>0&&(m.alphaTest.value=p.alphaTest);let x;p.map?x=p.map:p.alphaMap&&(x=p.alphaMap),x!==void 0&&(x.matrixAutoUpdate===!0&&x.updateMatrix(),m.uvTransform.value.copy(x.matrix))}function c(m,p){m.specular.value.copy(p.specular),m.shininess.value=Math.max(p.shininess,1e-4)}function h(m,p){p.gradientMap&&(m.gradientMap.value=p.gradientMap)}function u(m,p){m.roughness.value=p.roughness,m.metalness.value=p.metalness,p.roughnessMap&&(m.roughnessMap.value=p.roughnessMap),p.metalnessMap&&(m.metalnessMap.value=p.metalnessMap),e.get(p).envMap&&(m.envMapIntensity.value=p.envMapIntensity)}function f(m,p,x){m.ior.value=p.ior,p.sheen>0&&(m.sheenColor.value.copy(p.sheenColor).multiplyScalar(p.sheen),m.sheenRoughness.value=p.sheenRoughness,p.sheenColorMap&&(m.sheenColorMap.value=p.sheenColorMap),p.sheenRoughnessMap&&(m.sheenRoughnessMap.value=p.sheenRoughnessMap)),p.clearcoat>0&&(m.clearcoat.value=p.clearcoat,m.clearcoatRoughness.value=p.clearcoatRoughness,p.clearcoatMap&&(m.clearcoatMap.value=p.clearcoatMap),p.clearcoatRoughnessMap&&(m.clearcoatRoughnessMap.value=p.clearcoatRoughnessMap),p.clearcoatNormalMap&&(m.clearcoatNormalScale.value.copy(p.clearcoatNormalScale),m.clearcoatNormalMap.value=p.clearcoatNormalMap,p.side===C1&&m.clearcoatNormalScale.value.negate())),p.iridescence>0&&(m.iridescence.value=p.iridescence,m.iridescenceIOR.value=p.iridescenceIOR,m.iridescenceThicknessMinimum.value=p.iridescenceThicknessRange[0],m.iridescenceThicknessMaximum.value=p.iridescenceThicknessRange[1],p.iridescenceMap&&(m.iridescenceMap.value=p.iridescenceMap),p.iridescenceThicknessMap&&(m.iridescenceThicknessMap.value=p.iridescenceThicknessMap)),p.transmission>0&&(m.transmission.value=p.transmission,m.transmissionSamplerMap.value=x.texture,m.transmissionSamplerSize.value.set(x.width,x.height),p.transmissionMap&&(m.transmissionMap.value=p.transmissionMap),m.thickness.value=p.thickness,p.thicknessMap&&(m.thicknessMap.value=p.thicknessMap),m.attenuationDistance.value=p.attenuationDistance,m.attenuationColor.value.copy(p.attenuationColor)),m.specularIntensity.value=p.specularIntensity,m.specularColor.value.copy(p.specularColor),p.specularIntensityMap&&(m.specularIntensityMap.value=p.specularIntensityMap),p.specularColorMap&&(m.specularColorMap.value=p.specularColorMap)}function d(m,p){p.matcap&&(m.matcap.value=p.matcap)}function g(m,p){m.referencePosition.value.copy(p.referencePosition),m.nearDistance.value=p.nearDistance,m.farDistance.value=p.farDistance}return{refreshFogUniforms:t,refreshMaterialUniforms:n}}function wr(a,e,t,n){let i={},s={},r=[];const o=t.isWebGL2?a.getParameter(35375):0;function l(_,M){const y=M.program;n.uniformBlockBinding(_,y)}function c(_,M){let y=i[_.id];y===void 0&&(g(_),y=h(_),i[_.id]=y,_.addEventListener("dispose",p));const S=M.program;n.updateUBOMapping(_,S);const T=e.render.frame;s[_.id]!==T&&(f(_),s[_.id]=T)}function h(_){const M=u();_.__bindingPointIndex=M;const y=a.createBuffer(),S=_.__size,T=_.usage;return a.bindBuffer(35345,y),a.bufferData(35345,S,T),a.bindBuffer(35345,null),a.bindBufferBase(35345,M,y),y}function u(){for(let _=0;_<o;_++)if(r.indexOf(_)===-1)return r.push(_),_;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function f(_){const M=i[_.id],y=_.uniforms,S=_.__cache;a.bindBuffer(35345,M);for(let T=0,L=y.length;T<L;T++){const v=y[T];if(d(v,T,S)===!0){const E=v.value,P=v.__offset;typeof E=="number"?(v.__data[0]=E,a.bufferSubData(35345,P,v.__data)):(v.value.isMatrix3?(v.__data[0]=v.value.elements[0],v.__data[1]=v.value.elements[1],v.__data[2]=v.value.elements[2],v.__data[3]=v.value.elements[0],v.__data[4]=v.value.elements[3],v.__data[5]=v.value.elements[4],v.__data[6]=v.value.elements[5],v.__data[7]=v.value.elements[0],v.__data[8]=v.value.elements[6],v.__data[9]=v.value.elements[7],v.__data[10]=v.value.elements[8],v.__data[11]=v.value.elements[0]):E.toArray(v.__data),a.bufferSubData(35345,P,v.__data))}}a.bindBuffer(35345,null)}function d(_,M,y){const S=_.value;if(y[M]===void 0)return typeof S=="number"?y[M]=S:y[M]=S.clone(),!0;if(typeof S=="number"){if(y[M]!==S)return y[M]=S,!0}else{const T=y[M];if(T.equals(S)===!1)return T.copy(S),!0}return!1}function g(_){const M=_.uniforms;let y=0;const S=16;let T=0;for(let L=0,v=M.length;L<v;L++){const E=M[L],P=m(E);if(E.__data=new Float32Array(P.storage/Float32Array.BYTES_PER_ELEMENT),E.__offset=y,L>0){T=y%S;const B=S-T;T!==0&&B-P.boundary<0&&(y+=S-T,E.__offset=y)}y+=P.storage}return T=y%S,T>0&&(y+=S-T),_.__size=y,_.__cache={},this}function m(_){const M=_.value,y={boundary:0,storage:0};return typeof M=="number"?(y.boundary=4,y.storage=4):M.isVector2?(y.boundary=8,y.storage=8):M.isVector3||M.isColor?(y.boundary=16,y.storage=12):M.isVector4?(y.boundary=16,y.storage=16):M.isMatrix3?(y.boundary=48,y.storage=48):M.isMatrix4?(y.boundary=64,y.storage=64):M.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",M),y}function p(_){const M=_.target;M.removeEventListener("dispose",p);const y=r.indexOf(M.__bindingPointIndex);r.splice(y,1),a.deleteBuffer(i[M.id]),delete i[M.id],delete s[M.id]}function x(){for(const _ in i)a.deleteBuffer(i[_]);r=[],i={},s={}}return{bind:l,update:c,dispose:x}}function Tr(){const a=B5("canvas");return a.style.display="block",a}function n8(a={}){this.isWebGLRenderer=!0;const e=a.canvas!==void 0?a.canvas:Tr(),t=a.context!==void 0?a.context:null,n=a.depth!==void 0?a.depth:!0,i=a.stencil!==void 0?a.stencil:!0,s=a.antialias!==void 0?a.antialias:!1,r=a.premultipliedAlpha!==void 0?a.premultipliedAlpha:!0,o=a.preserveDrawingBuffer!==void 0?a.preserveDrawingBuffer:!1,l=a.powerPreference!==void 0?a.powerPreference:"default",c=a.failIfMajorPerformanceCaveat!==void 0?a.failIfMajorPerformanceCaveat:!1;let h;t!==null?h=t.getContextAttributes().alpha:h=a.alpha!==void 0?a.alpha:!1;let u=null,f=null;const d=[],g=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=L2,this.physicallyCorrectLights=!1,this.toneMapping=$1,this.toneMappingExposure=1,Object.defineProperties(this,{gammaFactor:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaFactor has been removed."),2},set:function(){console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.")}}});const m=this;let p=!1,x=0,_=0,M=null,y=-1,S=null;const T=new H0,L=new H0;let v=null,E=e.width,P=e.height,B=1,Q=null,F=null;const D=new H0(0,0,E,P),V=new H0(0,0,E,P);let Z=!1;const K=new p7;let H=!1,N=!1,O=null;const j=new O0,e0=new $,t0=new A,f0={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function T0(){return M===null?B:1}let q=t;function I0(w,z){for(let k=0;k<w.length;k++){const I=w[k],G=e.getContext(I,z);if(G!==null)return G}return null}try{const w={alpha:!0,depth:n,stencil:i,antialias:s,premultipliedAlpha:r,preserveDrawingBuffer:o,powerPreference:l,failIfMajorPerformanceCaveat:c};if("setAttribute"in e&&e.setAttribute("data-engine",`three.js r${c7}`),e.addEventListener("webglcontextlost",S0,!1),e.addEventListener("webglcontextrestored",D0,!1),e.addEventListener("webglcontextcreationerror",G0,!1),q===null){const z=["webgl2","webgl","experimental-webgl"];if(m.isWebGL1Renderer===!0&&z.shift(),q=I0(z,w),q===null)throw I0(z)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}q.getShaderPrecisionFormat===void 0&&(q.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(w){throw console.error("THREE.WebGLRenderer: "+w.message),w}let v0,A0,c0,F0,J,W,i0,p0,l0,R0,y0,_0,J0,W0,C,b,U,n0,s0,h0,w0,u0,Y,g0;function E0(){v0=new Ui(q),A0=new Di(q,v0,a),v0.init(A0),u0=new _r(q,v0,A0),c0=new gr(q,v0,A0),F0=new Vi,J=new sr,W=new xr(q,v0,c0,J,A0,u0,F0),i0=new Ni(m),p0=new Oi(m),l0=new K6(q,A0),Y=new Pi(q,v0,l0,A0),R0=new Bi(q,l0,F0,Y),y0=new qi(q,R0,l0,F0),s0=new Wi(q,A0,W),b=new Ii(J),_0=new ir(m,i0,p0,v0,A0,Y,b),J0=new br(m,J),W0=new ar,C=new fr(v0,A0),n0=new Li(m,i0,c0,y0,h,r),U=new mr(m,y0,A0),g0=new wr(q,F0,A0,c0),h0=new Ri(q,v0,F0,A0),w0=new ki(q,v0,F0,A0),F0.programs=_0.programs,m.capabilities=A0,m.extensions=v0,m.properties=J,m.renderLists=W0,m.shadowMap=U,m.state=c0,m.info=F0}E0();const m0=new Sr(m,q);this.xr=m0,this.getContext=function(){return q},this.getContextAttributes=function(){return q.getContextAttributes()},this.forceContextLoss=function(){const w=v0.get("WEBGL_lose_context");w&&w.loseContext()},this.forceContextRestore=function(){const w=v0.get("WEBGL_lose_context");w&&w.restoreContext()},this.getPixelRatio=function(){return B},this.setPixelRatio=function(w){w!==void 0&&(B=w,this.setSize(E,P,!1))},this.getSize=function(w){return w.set(E,P)},this.setSize=function(w,z,k){if(m0.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}E=w,P=z,e.width=Math.floor(w*B),e.height=Math.floor(z*B),k!==!1&&(e.style.width=w+"px",e.style.height=z+"px"),this.setViewport(0,0,w,z)},this.getDrawingBufferSize=function(w){return w.set(E*B,P*B).floor()},this.setDrawingBufferSize=function(w,z,k){E=w,P=z,B=k,e.width=Math.floor(w*k),e.height=Math.floor(z*k),this.setViewport(0,0,w,z)},this.getCurrentViewport=function(w){return w.copy(T)},this.getViewport=function(w){return w.copy(D)},this.setViewport=function(w,z,k,I){w.isVector4?D.set(w.x,w.y,w.z,w.w):D.set(w,z,k,I),c0.viewport(T.copy(D).multiplyScalar(B).floor())},this.getScissor=function(w){return w.copy(V)},this.setScissor=function(w,z,k,I){w.isVector4?V.set(w.x,w.y,w.z,w.w):V.set(w,z,k,I),c0.scissor(L.copy(V).multiplyScalar(B).floor())},this.getScissorTest=function(){return Z},this.setScissorTest=function(w){c0.setScissorTest(Z=w)},this.setOpaqueSort=function(w){Q=w},this.setTransparentSort=function(w){F=w},this.getClearColor=function(w){return w.copy(n0.getClearColor())},this.setClearColor=function(){n0.setClearColor.apply(n0,arguments)},this.getClearAlpha=function(){return n0.getClearAlpha()},this.setClearAlpha=function(){n0.setClearAlpha.apply(n0,arguments)},this.clear=function(w=!0,z=!0,k=!0){let I=0;w&&(I|=16384),z&&(I|=256),k&&(I|=1024),q.clear(I)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",S0,!1),e.removeEventListener("webglcontextrestored",D0,!1),e.removeEventListener("webglcontextcreationerror",G0,!1),W0.dispose(),C.dispose(),J.dispose(),i0.dispose(),p0.dispose(),y0.dispose(),Y.dispose(),g0.dispose(),_0.dispose(),m0.dispose(),m0.removeEventListener("sessionstart",b0),m0.removeEventListener("sessionend",Y0),O&&(O.dispose(),O=null),e1.stop()};function S0(w){w.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),p=!0}function D0(){console.log("THREE.WebGLRenderer: Context Restored."),p=!1;const w=F0.autoReset,z=U.enabled,k=U.autoUpdate,I=U.needsUpdate,G=U.type;E0(),F0.autoReset=w,U.enabled=z,U.autoUpdate=k,U.needsUpdate=I,U.type=G}function G0(w){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",w.statusMessage)}function R(w){const z=w.target;z.removeEventListener("dispose",R),d0(z)}function d0(w){r0(w),J.remove(w)}function r0(w){const z=J.get(w).programs;z!==void 0&&(z.forEach(function(k){_0.releaseProgram(k)}),w.isShaderMaterial&&_0.releaseShaderCache(w))}this.renderBufferDirect=function(w,z,k,I,G,x0){z===null&&(z=f0);const C0=G.isMesh&&G.matrixWorld.determinant()<0,N0=L8(w,z,k,I,G);c0.setMaterial(I,C0);let P0=k.index;const V0=k.attributes.position;if(P0===null){if(V0===void 0||V0.count===0)return}else if(P0.count===0)return;let U0=1;I.wireframe===!0&&(P0=R0.getWireframeAttribute(k),U0=2),Y.setup(G,I,N0,k,P0);let B0,Q0=h0;P0!==null&&(B0=l0.get(P0),Q0=w0,Q0.setIndex(B0));const p2=P0!==null?P0.count:V0.count,U2=k.drawRange.start*U0,B2=k.drawRange.count*U0,U1=x0!==null?x0.start*U0:0,k0=x0!==null?x0.count*U0:1/0,k2=Math.max(U2,U1),t1=Math.min(p2,U2+B2,U1+k0)-1,T1=Math.max(0,t1-k2+1);if(T1!==0){if(G.isMesh)I.wireframe===!0?(c0.setLineWidth(I.wireframeLinewidth*T0()),Q0.setMode(1)):Q0.setMode(4);else if(G.isLine){let j1=I.linewidth;j1===void 0&&(j1=1),c0.setLineWidth(j1*T0()),G.isLineSegments?Q0.setMode(1):G.isLineLoop?Q0.setMode(2):Q0.setMode(3)}else G.isPoints?Q0.setMode(0):G.isSprite&&Q0.setMode(4);if(G.isInstancedMesh)Q0.renderInstances(k2,T1,G.count);else if(k.isInstancedBufferGeometry){const j1=Math.min(k.instanceCount,k._maxInstanceCount);Q0.renderInstances(k2,T1,j1)}else Q0.render(k2,T1)}},this.compile=function(w,z){function k(I,G,x0){I.transparent===!0&&I.side===l2?(I.side=C1,I.needsUpdate=!0,K5(I,G,x0),I.side=d5,I.needsUpdate=!0,K5(I,G,x0),I.side=l2):K5(I,G,x0)}f=C.get(w),f.init(),g.push(f),w.traverseVisible(function(I){I.isLight&&I.layers.test(z.layers)&&(f.pushLight(I),I.castShadow&&f.pushShadow(I))}),f.setupLights(m.physicallyCorrectLights),w.traverse(function(I){const G=I.material;if(G)if(Array.isArray(G))for(let x0=0;x0<G.length;x0++){const C0=G[x0];k(C0,w,I)}else k(G,w,I)}),g.pop(),f=null};let X=null;function o0(w){X&&X(w)}function b0(){e1.stop()}function Y0(){e1.start()}const e1=new Zt;e1.setAnimationLoop(o0),typeof self<"u"&&e1.setContext(self),this.setAnimationLoop=function(w){X=w,m0.setAnimationLoop(w),w===null?e1.stop():e1.start()},m0.addEventListener("sessionstart",b0),m0.addEventListener("sessionend",Y0),this.render=function(w,z){if(z!==void 0&&z.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(p===!0)return;w.matrixWorldAutoUpdate===!0&&w.updateMatrixWorld(),z.parent===null&&z.matrixWorldAutoUpdate===!0&&z.updateMatrixWorld(),m0.enabled===!0&&m0.isPresenting===!0&&(m0.cameraAutoUpdate===!0&&m0.updateCamera(z),z=m0.getCamera()),w.isScene===!0&&w.onBeforeRender(m,w,z,M),f=C.get(w,g.length),f.init(),g.push(f),j.multiplyMatrices(z.projectionMatrix,z.matrixWorldInverse),K.setFromProjectionMatrix(j),N=this.localClippingEnabled,H=b.init(this.clippingPlanes,N,z),u=W0.get(w,d.length),u.init(),d.push(u),Q1(w,z,0,m.sortObjects),u.finish(),m.sortObjects===!0&&u.sort(Q,F),H===!0&&b.beginShadows();const k=f.state.shadowsArray;if(U.render(k,w,z),H===!0&&b.endShadows(),this.info.autoReset===!0&&this.info.reset(),n0.render(u,w),f.setupLights(m.physicallyCorrectLights),z.isArrayCamera){const I=z.cameras;for(let G=0,x0=I.length;G<x0;G++){const C0=I[G];K0(u,w,C0,C0.viewport)}}else K0(u,w,z);M!==null&&(W.updateMultisampleRenderTarget(M),W.updateRenderTargetMipmap(M)),w.isScene===!0&&w.onAfterRender(m,w,z),Y.resetDefaultState(),y=-1,S=null,g.pop(),g.length>0?f=g[g.length-1]:f=null,d.pop(),d.length>0?u=d[d.length-1]:u=null};function Q1(w,z,k,I){if(w.visible===!1)return;if(w.layers.test(z.layers)){if(w.isGroup)k=w.renderOrder;else if(w.isLOD)w.autoUpdate===!0&&w.update(z);else if(w.isLight)f.pushLight(w),w.castShadow&&f.pushShadow(w);else if(w.isSprite){if(!w.frustumCulled||K.intersectsSprite(w)){I&&t0.setFromMatrixPosition(w.matrixWorld).applyMatrix4(j);const C0=y0.update(w),N0=w.material;N0.visible&&u.push(w,C0,N0,k,t0.z,null)}}else if((w.isMesh||w.isLine||w.isPoints)&&(w.isSkinnedMesh&&w.skeleton.frame!==F0.render.frame&&(w.skeleton.update(),w.skeleton.frame=F0.render.frame),!w.frustumCulled||K.intersectsObject(w))){I&&t0.setFromMatrixPosition(w.matrixWorld).applyMatrix4(j);const C0=y0.update(w),N0=w.material;if(Array.isArray(N0)){const P0=C0.groups;for(let V0=0,U0=P0.length;V0<U0;V0++){const B0=P0[V0],Q0=N0[B0.materialIndex];Q0&&Q0.visible&&u.push(w,C0,Q0,k,t0.z,B0)}}else N0.visible&&u.push(w,C0,N0,k,t0.z,null)}}const x0=w.children;for(let C0=0,N0=x0.length;C0<N0;C0++)Q1(x0[C0],z,k,I)}function K0(w,z,k,I){const G=w.opaque,x0=w.transmissive,C0=w.transparent;f.setupLightsView(k),x0.length>0&&G1(G,z,k),I&&c0.viewport(T.copy(I)),G.length>0&&w1(G,z,k),x0.length>0&&w1(x0,z,k),C0.length>0&&w1(C0,z,k),c0.buffers.depth.setTest(!0),c0.buffers.depth.setMask(!0),c0.buffers.color.setMask(!0),c0.setPolygonOffset(!1)}function G1(w,z,k){const I=A0.isWebGL2;O===null&&(O=new P2(1,1,{generateMipmaps:!0,type:v0.has("EXT_color_buffer_half_float")?U5:C2,minFilter:q5,samples:I&&s===!0?4:0})),m.getDrawingBufferSize(e0),I?O.setSize(e0.x,e0.y):O.setSize(t7(e0.x),t7(e0.y));const G=m.getRenderTarget();m.setRenderTarget(O),m.clear();const x0=m.toneMapping;m.toneMapping=$1,w1(w,z,k),m.toneMapping=x0,W.updateMultisampleRenderTarget(O),W.updateRenderTargetMipmap(O),m.setRenderTarget(G)}function w1(w,z,k){const I=z.isScene===!0?z.overrideMaterial:null;for(let G=0,x0=w.length;G<x0;G++){const C0=w[G],N0=C0.object,P0=C0.geometry,V0=I===null?C0.material:I,U0=C0.group;N0.layers.test(k.layers)&&C8(N0,z,k,P0,V0,U0)}}function C8(w,z,k,I,G,x0){w.onBeforeRender(m,z,k,I,G,x0),w.modelViewMatrix.multiplyMatrices(k.matrixWorldInverse,w.matrixWorld),w.normalMatrix.getNormalMatrix(w.modelViewMatrix),G.onBeforeRender(m,z,k,I,w,x0),G.transparent===!0&&G.side===l2?(G.side=C1,G.needsUpdate=!0,m.renderBufferDirect(k,z,I,G,w,x0),G.side=d5,G.needsUpdate=!0,m.renderBufferDirect(k,z,I,G,w,x0),G.side=l2):m.renderBufferDirect(k,z,I,G,w,x0),w.onAfterRender(m,z,k,I,G,x0)}function K5(w,z,k){z.isScene!==!0&&(z=f0);const I=J.get(w),G=f.state.lights,x0=f.state.shadowsArray,C0=G.state.version,N0=_0.getParameters(w,G.state,x0,z,k),P0=_0.getProgramCacheKey(N0);let V0=I.programs;I.environment=w.isMeshStandardMaterial?z.environment:null,I.fog=z.fog,I.envMap=(w.isMeshStandardMaterial?p0:i0).get(w.envMap||I.environment),V0===void 0&&(w.addEventListener("dispose",R),V0=new Map,I.programs=V0);let U0=V0.get(P0);if(U0!==void 0){if(I.currentProgram===U0&&I.lightsStateVersion===C0)return W7(w,N0),U0}else N0.uniforms=_0.getUniforms(w),w.onBuild(k,N0,m),w.onBeforeCompile(N0,m),U0=_0.acquireProgram(N0,P0),V0.set(P0,U0),I.uniforms=N0.uniforms;const B0=I.uniforms;(!w.isShaderMaterial&&!w.isRawShaderMaterial||w.clipping===!0)&&(B0.clippingPlanes=b.uniform),W7(w,N0),I.needsLights=R8(w),I.lightsStateVersion=C0,I.needsLights&&(B0.ambientLightColor.value=G.state.ambient,B0.lightProbe.value=G.state.probe,B0.directionalLights.value=G.state.directional,B0.directionalLightShadows.value=G.state.directionalShadow,B0.spotLights.value=G.state.spot,B0.spotLightShadows.value=G.state.spotShadow,B0.rectAreaLights.value=G.state.rectArea,B0.ltc_1.value=G.state.rectAreaLTC1,B0.ltc_2.value=G.state.rectAreaLTC2,B0.pointLights.value=G.state.point,B0.pointLightShadows.value=G.state.pointShadow,B0.hemisphereLights.value=G.state.hemi,B0.directionalShadowMap.value=G.state.directionalShadowMap,B0.directionalShadowMatrix.value=G.state.directionalShadowMatrix,B0.spotShadowMap.value=G.state.spotShadowMap,B0.spotLightMatrix.value=G.state.spotLightMatrix,B0.spotLightMap.value=G.state.spotLightMap,B0.pointShadowMap.value=G.state.pointShadowMap,B0.pointShadowMatrix.value=G.state.pointShadowMatrix);const Q0=U0.getUniforms(),p2=z3.seqWithValue(Q0.seq,B0);return I.currentProgram=U0,I.uniformsList=p2,U0}function W7(w,z){const k=J.get(w);k.outputEncoding=z.outputEncoding,k.instancing=z.instancing,k.skinning=z.skinning,k.morphTargets=z.morphTargets,k.morphNormals=z.morphNormals,k.morphColors=z.morphColors,k.morphTargetsCount=z.morphTargetsCount,k.numClippingPlanes=z.numClippingPlanes,k.numIntersection=z.numClipIntersection,k.vertexAlphas=z.vertexAlphas,k.vertexTangents=z.vertexTangents,k.toneMapping=z.toneMapping}function L8(w,z,k,I,G){z.isScene!==!0&&(z=f0),W.resetTextureUnits();const x0=z.fog,C0=I.isMeshStandardMaterial?z.environment:null,N0=M===null?m.outputEncoding:M.isXRRenderTarget===!0?M.texture.encoding:L2,P0=(I.isMeshStandardMaterial?p0:i0).get(I.envMap||C0),V0=I.vertexColors===!0&&!!k.attributes.color&&k.attributes.color.itemSize===4,U0=!!I.normalMap&&!!k.attributes.tangent,B0=!!k.morphAttributes.position,Q0=!!k.morphAttributes.normal,p2=!!k.morphAttributes.color,U2=I.toneMapped?m.toneMapping:$1,B2=k.morphAttributes.position||k.morphAttributes.normal||k.morphAttributes.color,U1=B2!==void 0?B2.length:0,k0=J.get(I),k2=f.state.lights;if(H===!0&&(N===!0||w!==S)){const x1=w===S&&I.id===y;b.setState(I,w,x1)}let t1=!1;I.version===k0.__version?(k0.needsLights&&k0.lightsStateVersion!==k2.state.version||k0.outputEncoding!==N0||G.isInstancedMesh&&k0.instancing===!1||!G.isInstancedMesh&&k0.instancing===!0||G.isSkinnedMesh&&k0.skinning===!1||!G.isSkinnedMesh&&k0.skinning===!0||k0.envMap!==P0||I.fog===!0&&k0.fog!==x0||k0.numClippingPlanes!==void 0&&(k0.numClippingPlanes!==b.numPlanes||k0.numIntersection!==b.numIntersection)||k0.vertexAlphas!==V0||k0.vertexTangents!==U0||k0.morphTargets!==B0||k0.morphNormals!==Q0||k0.morphColors!==p2||k0.toneMapping!==U2||A0.isWebGL2===!0&&k0.morphTargetsCount!==U1)&&(t1=!0):(t1=!0,k0.__version=I.version);let T1=k0.currentProgram;t1===!0&&(T1=K5(I,z,G));let j1=!1,S5=!1,r4=!1;const f1=T1.getUniforms(),m2=k0.uniforms;if(c0.useProgram(T1.program)&&(j1=!0,S5=!0,r4=!0),I.id!==y&&(y=I.id,S5=!0),j1||S!==w){if(f1.setValue(q,"projectionMatrix",w.projectionMatrix),A0.logarithmicDepthBuffer&&f1.setValue(q,"logDepthBufFC",2/(Math.log(w.far+1)/Math.LN2)),S!==w&&(S=w,S5=!0,r4=!0),I.isShaderMaterial||I.isMeshPhongMaterial||I.isMeshToonMaterial||I.isMeshStandardMaterial||I.envMap){const x1=f1.map.cameraPosition;x1!==void 0&&x1.setValue(q,t0.setFromMatrixPosition(w.matrixWorld))}(I.isMeshPhongMaterial||I.isMeshToonMaterial||I.isMeshLambertMaterial||I.isMeshBasicMaterial||I.isMeshStandardMaterial||I.isShaderMaterial)&&f1.setValue(q,"isOrthographic",w.isOrthographicCamera===!0),(I.isMeshPhongMaterial||I.isMeshToonMaterial||I.isMeshLambertMaterial||I.isMeshBasicMaterial||I.isMeshStandardMaterial||I.isShaderMaterial||I.isShadowMaterial||G.isSkinnedMesh)&&f1.setValue(q,"viewMatrix",w.matrixWorldInverse)}if(G.isSkinnedMesh){f1.setOptional(q,G,"bindMatrix"),f1.setOptional(q,G,"bindMatrixInverse");const x1=G.skeleton;x1&&(A0.floatVertexTextures?(x1.boneTexture===null&&x1.computeBoneTexture(),f1.setValue(q,"boneTexture",x1.boneTexture,W),f1.setValue(q,"boneTextureSize",x1.boneTextureSize)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}const a4=k.morphAttributes;if((a4.position!==void 0||a4.normal!==void 0||a4.color!==void 0&&A0.isWebGL2===!0)&&s0.update(G,k,I,T1),(S5||k0.receiveShadow!==G.receiveShadow)&&(k0.receiveShadow=G.receiveShadow,f1.setValue(q,"receiveShadow",G.receiveShadow)),I.isMeshGouraudMaterial&&I.envMap!==null&&(m2.envMap.value=P0,m2.flipEnvMap.value=P0.isCubeTexture&&P0.isRenderTargetTexture===!1?-1:1),S5&&(f1.setValue(q,"toneMappingExposure",m.toneMappingExposure),k0.needsLights&&P8(m2,r4),x0&&I.fog===!0&&J0.refreshFogUniforms(m2,x0),J0.refreshMaterialUniforms(m2,I,B,P,O),z3.upload(q,k0.uniformsList,m2,W)),I.isShaderMaterial&&I.uniformsNeedUpdate===!0&&(z3.upload(q,k0.uniformsList,m2,W),I.uniformsNeedUpdate=!1),I.isSpriteMaterial&&f1.setValue(q,"center",G.center),f1.setValue(q,"modelViewMatrix",G.modelViewMatrix),f1.setValue(q,"normalMatrix",G.normalMatrix),f1.setValue(q,"modelMatrix",G.matrixWorld),I.isShaderMaterial||I.isRawShaderMaterial){const x1=I.uniformsGroups;for(let o4=0,D8=x1.length;o4<D8;o4++)if(A0.isWebGL2){const q7=x1[o4];g0.update(q7,T1),g0.bind(q7,T1)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return T1}function P8(w,z){w.ambientLightColor.needsUpdate=z,w.lightProbe.needsUpdate=z,w.directionalLights.needsUpdate=z,w.directionalLightShadows.needsUpdate=z,w.pointLights.needsUpdate=z,w.pointLightShadows.needsUpdate=z,w.spotLights.needsUpdate=z,w.spotLightShadows.needsUpdate=z,w.rectAreaLights.needsUpdate=z,w.hemisphereLights.needsUpdate=z}function R8(w){return w.isMeshLambertMaterial||w.isMeshToonMaterial||w.isMeshPhongMaterial||w.isMeshStandardMaterial||w.isShadowMaterial||w.isShaderMaterial&&w.lights===!0}this.getActiveCubeFace=function(){return x},this.getActiveMipmapLevel=function(){return _},this.getRenderTarget=function(){return M},this.setRenderTargetTextures=function(w,z,k){J.get(w.texture).__webglTexture=z,J.get(w.depthTexture).__webglTexture=k;const I=J.get(w);I.__hasExternalTextures=!0,I.__hasExternalTextures&&(I.__autoAllocateDepthBuffer=k===void 0,I.__autoAllocateDepthBuffer||v0.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),I.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(w,z){const k=J.get(w);k.__webglFramebuffer=z,k.__useDefaultFramebuffer=z===void 0},this.setRenderTarget=function(w,z=0,k=0){M=w,x=z,_=k;let I=!0;if(w){const P0=J.get(w);P0.__useDefaultFramebuffer!==void 0?(c0.bindFramebuffer(36160,null),I=!1):P0.__webglFramebuffer===void 0?W.setupRenderTarget(w):P0.__hasExternalTextures&&W.rebindTextures(w,J.get(w.texture).__webglTexture,J.get(w.depthTexture).__webglTexture)}let G=null,x0=!1,C0=!1;if(w){const P0=w.texture;(P0.isData3DTexture||P0.isDataArrayTexture)&&(C0=!0);const V0=J.get(w).__webglFramebuffer;w.isWebGLCubeRenderTarget?(G=V0[z],x0=!0):A0.isWebGL2&&w.samples>0&&W.useMultisampledRTT(w)===!1?G=J.get(w).__webglMultisampledFramebuffer:G=V0,T.copy(w.viewport),L.copy(w.scissor),v=w.scissorTest}else T.copy(D).multiplyScalar(B).floor(),L.copy(V).multiplyScalar(B).floor(),v=Z;if(c0.bindFramebuffer(36160,G)&&A0.drawBuffers&&I&&c0.drawBuffers(w,G),c0.viewport(T),c0.scissor(L),c0.setScissorTest(v),x0){const P0=J.get(w.texture);q.framebufferTexture2D(36160,36064,34069+z,P0.__webglTexture,k)}else if(C0){const P0=J.get(w.texture),V0=z||0;q.framebufferTextureLayer(36160,36064,P0.__webglTexture,k||0,V0)}y=-1},this.readRenderTargetPixels=function(w,z,k,I,G,x0,C0){if(!(w&&w.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let N0=J.get(w).__webglFramebuffer;if(w.isWebGLCubeRenderTarget&&C0!==void 0&&(N0=N0[C0]),N0){c0.bindFramebuffer(36160,N0);try{const P0=w.texture,V0=P0.format,U0=P0.type;if(V0!==F1&&u0.convert(V0)!==q.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const B0=U0===U5&&(v0.has("EXT_color_buffer_half_float")||A0.isWebGL2&&v0.has("EXT_color_buffer_float"));if(U0!==C2&&u0.convert(U0)!==q.getParameter(35738)&&!(U0===c2&&(A0.isWebGL2||v0.has("OES_texture_float")||v0.has("WEBGL_color_buffer_float")))&&!B0){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}z>=0&&z<=w.width-I&&k>=0&&k<=w.height-G&&q.readPixels(z,k,I,G,u0.convert(V0),u0.convert(U0),x0)}finally{const P0=M!==null?J.get(M).__webglFramebuffer:null;c0.bindFramebuffer(36160,P0)}}},this.copyFramebufferToTexture=function(w,z,k=0){const I=Math.pow(2,-k),G=Math.floor(z.image.width*I),x0=Math.floor(z.image.height*I);W.setTexture2D(z,0),q.copyTexSubImage2D(3553,k,0,0,w.x,w.y,G,x0),c0.unbindTexture()},this.copyTextureToTexture=function(w,z,k,I=0){const G=z.image.width,x0=z.image.height,C0=u0.convert(k.format),N0=u0.convert(k.type);W.setTexture2D(k,0),q.pixelStorei(37440,k.flipY),q.pixelStorei(37441,k.premultiplyAlpha),q.pixelStorei(3317,k.unpackAlignment),z.isDataTexture?q.texSubImage2D(3553,I,w.x,w.y,G,x0,C0,N0,z.image.data):z.isCompressedTexture?q.compressedTexSubImage2D(3553,I,w.x,w.y,z.mipmaps[0].width,z.mipmaps[0].height,C0,z.mipmaps[0].data):q.texSubImage2D(3553,I,w.x,w.y,C0,N0,z.image),I===0&&k.generateMipmaps&&q.generateMipmap(3553),c0.unbindTexture()},this.copyTextureToTexture3D=function(w,z,k,I,G=0){if(m.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const x0=w.max.x-w.min.x+1,C0=w.max.y-w.min.y+1,N0=w.max.z-w.min.z+1,P0=u0.convert(I.format),V0=u0.convert(I.type);let U0;if(I.isData3DTexture)W.setTexture3D(I,0),U0=32879;else if(I.isDataArrayTexture)W.setTexture2DArray(I,0),U0=35866;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}q.pixelStorei(37440,I.flipY),q.pixelStorei(37441,I.premultiplyAlpha),q.pixelStorei(3317,I.unpackAlignment);const B0=q.getParameter(3314),Q0=q.getParameter(32878),p2=q.getParameter(3316),U2=q.getParameter(3315),B2=q.getParameter(32877),U1=k.isCompressedTexture?k.mipmaps[0]:k.image;q.pixelStorei(3314,U1.width),q.pixelStorei(32878,U1.height),q.pixelStorei(3316,w.min.x),q.pixelStorei(3315,w.min.y),q.pixelStorei(32877,w.min.z),k.isDataTexture||k.isData3DTexture?q.texSubImage3D(U0,G,z.x,z.y,z.z,x0,C0,N0,P0,V0,U1.data):k.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),q.compressedTexSubImage3D(U0,G,z.x,z.y,z.z,x0,C0,N0,P0,U1.data)):q.texSubImage3D(U0,G,z.x,z.y,z.z,x0,C0,N0,P0,V0,U1),q.pixelStorei(3314,B0),q.pixelStorei(32878,Q0),q.pixelStorei(3316,p2),q.pixelStorei(3315,U2),q.pixelStorei(32877,B2),G===0&&I.generateMipmaps&&q.generateMipmap(U0),c0.unbindTexture()},this.initTexture=function(w){w.isCubeTexture?W.setTextureCube(w,0):w.isData3DTexture?W.setTexture3D(w,0):w.isDataArrayTexture?W.setTexture2DArray(w,0):W.setTexture2D(w,0),c0.unbindTexture()},this.resetState=function(){x=0,_=0,M=null,c0.reset(),Y.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}class Ar extends n8{}Ar.prototype.isWebGL1Renderer=!0;class x7{constructor(e,t=25e-5){this.isFogExp2=!0,this.name="",this.color=new M0(e),this.density=t}clone(){return new x7(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}class _7{constructor(e,t=1,n=1e3){this.isFog=!0,this.name="",this.color=new M0(e),this.near=t,this.far=n}clone(){return new _7(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}class i8 extends X0{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),t}get autoUpdate(){return console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate}set autoUpdate(e){console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate=e}}class s8{constructor(e,t){this.isInterleavedBuffer=!0,this.array=e,this.stride=t,this.count=e!==void 0?e.length/t:0,this.usage=Q4,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=O1()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,n){e*=this.stride,n*=t.stride;for(let i=0,s=this.stride;i<s;i++)this.array[e+i]=t.array[n+i];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=O1()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(t,this.stride);return n.setUsage(this.usage),n}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=O1()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const d1=new A;class g5{constructor(e,t,n,i=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=e,this.itemSize=t,this.offset=n,this.normalized=i===!0}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,n=this.data.count;t<n;t++)d1.fromBufferAttribute(this,t),d1.applyMatrix4(e),this.setXYZ(t,d1.x,d1.y,d1.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)d1.fromBufferAttribute(this,t),d1.applyNormalMatrix(e),this.setXYZ(t,d1.x,d1.y,d1.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)d1.fromBufferAttribute(this,t),d1.transformDirection(e),this.setXYZ(t,d1.x,d1.y,d1.z);return this}setX(e,t){return this.normalized&&(t=q0(t,this.array)),this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.normalized&&(t=q0(t,this.array)),this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.normalized&&(t=q0(t,this.array)),this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.normalized&&(t=q0(t,this.array)),this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){let t=this.data.array[e*this.data.stride+this.offset];return this.normalized&&(t=h2(t,this.array)),t}getY(e){let t=this.data.array[e*this.data.stride+this.offset+1];return this.normalized&&(t=h2(t,this.array)),t}getZ(e){let t=this.data.array[e*this.data.stride+this.offset+2];return this.normalized&&(t=h2(t,this.array)),t}getW(e){let t=this.data.array[e*this.data.stride+this.offset+3];return this.normalized&&(t=h2(t,this.array)),t}setXY(e,t,n){return e=e*this.data.stride+this.offset,this.normalized&&(t=q0(t,this.array),n=q0(n,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this}setXYZ(e,t,n,i){return e=e*this.data.stride+this.offset,this.normalized&&(t=q0(t,this.array),n=q0(n,this.array),i=q0(i,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this}setXYZW(e,t,n,i,s){return e=e*this.data.stride+this.offset,this.normalized&&(t=q0(t,this.array),n=q0(n,this.array),i=q0(i,this.array),s=q0(s,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this.data.array[e+3]=s,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will deinterleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)t.push(this.data.array[i+s])}return new m1(new this.array.constructor(t),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new g5(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will deinterleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)t.push(this.data.array[i+s])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class r8 extends g1{constructor(e){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new M0(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}let t5;const A5=new A,n5=new A,i5=new A,s5=new $,E5=new $,a8=new O0,_3=new A,C5=new A,v3=new A,it=new $,k4=new $,st=new $;class Er extends X0{constructor(e){if(super(),this.isSprite=!0,this.type="Sprite",t5===void 0){t5=new Z0;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),n=new s8(t,5);t5.setIndex([0,1,2,0,2,3]),t5.setAttribute("position",new g5(n,3,0,!1)),t5.setAttribute("uv",new g5(n,2,3,!1))}this.geometry=t5,this.material=e!==void 0?e:new r8,this.center=new $(.5,.5)}raycast(e,t){e.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),n5.setFromMatrixScale(this.matrixWorld),a8.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),i5.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&n5.multiplyScalar(-i5.z);const n=this.material.rotation;let i,s;n!==0&&(s=Math.cos(n),i=Math.sin(n));const r=this.center;y3(_3.set(-.5,-.5,0),i5,r,n5,i,s),y3(C5.set(.5,-.5,0),i5,r,n5,i,s),y3(v3.set(.5,.5,0),i5,r,n5,i,s),it.set(0,0),k4.set(1,0),st.set(1,1);let o=e.ray.intersectTriangle(_3,C5,v3,!1,A5);if(o===null&&(y3(C5.set(-.5,.5,0),i5,r,n5,i,s),k4.set(0,1),o=e.ray.intersectTriangle(_3,v3,C5,!1,A5),o===null))return;const l=e.ray.origin.distanceTo(A5);l<e.near||l>e.far||t.push({distance:l,point:A5.clone(),uv:z1.getUV(A5,_3,C5,v3,it,k4,st,new $),face:null,object:this})}copy(e,t){return super.copy(e,t),e.center!==void 0&&this.center.copy(e.center),this.material=e.material,this}}function y3(a,e,t,n,i,s){s5.subVectors(a,t).addScalar(.5).multiply(n),i!==void 0?(E5.x=s*s5.x-i*s5.y,E5.y=i*s5.x+s*s5.y):E5.copy(s5),a.copy(e),a.x+=E5.x,a.y+=E5.y,a.applyMatrix4(a8)}const M3=new A,rt=new A;class Cr extends X0{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(e){super.copy(e,!1);const t=e.levels;for(let n=0,i=t.length;n<i;n++){const s=t[n];this.addLevel(s.object.clone(),s.distance)}return this.autoUpdate=e.autoUpdate,this}addLevel(e,t=0){t=Math.abs(t);const n=this.levels;let i;for(i=0;i<n.length&&!(t<n[i].distance);i++);return n.splice(i,0,{distance:t,object:e}),this.add(e),this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(e){const t=this.levels;if(t.length>0){let n,i;for(n=1,i=t.length;n<i&&!(e<t[n].distance);n++);return t[n-1].object}return null}raycast(e,t){if(this.levels.length>0){M3.setFromMatrixPosition(this.matrixWorld);const i=e.ray.origin.distanceTo(M3);this.getObjectForDistance(i).raycast(e,t)}}update(e){const t=this.levels;if(t.length>1){M3.setFromMatrixPosition(e.matrixWorld),rt.setFromMatrixPosition(this.matrixWorld);const n=M3.distanceTo(rt)/e.zoom;t[0].object.visible=!0;let i,s;for(i=1,s=t.length;i<s&&n>=t[i].distance;i++)t[i-1].object.visible=!1,t[i].object.visible=!0;for(this._currentLevel=i-1;i<s;i++)t[i].object.visible=!1}}toJSON(e){const t=super.toJSON(e);this.autoUpdate===!1&&(t.object.autoUpdate=!1),t.object.levels=[];const n=this.levels;for(let i=0,s=n.length;i<s;i++){const r=n[i];t.object.levels.push({object:r.object.uuid,distance:r.distance})}return t}}const at=new A,ot=new H0,lt=new H0,Lr=new A,ct=new O0;class Pr extends S1{constructor(e,t){super(e,t),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new O0,this.bindMatrixInverse=new O0}copy(e,t){return super.copy(e,t),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,this}bind(e,t){this.skeleton=e,t===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.copy(t).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const e=new H0,t=this.geometry.attributes.skinWeight;for(let n=0,i=t.count;n<i;n++){e.fromBufferAttribute(t,n);const s=1/e.manhattanLength();s!==1/0?e.multiplyScalar(s):e.set(1,0,0,0),t.setXYZW(n,e.x,e.y,e.z,e.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e),this.bindMode==="attached"?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode==="detached"?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(e,t){const n=this.skeleton,i=this.geometry;ot.fromBufferAttribute(i.attributes.skinIndex,e),lt.fromBufferAttribute(i.attributes.skinWeight,e),at.copy(t).applyMatrix4(this.bindMatrix),t.set(0,0,0);for(let s=0;s<4;s++){const r=lt.getComponent(s);if(r!==0){const o=ot.getComponent(s);ct.multiplyMatrices(n.bones[o].matrixWorld,n.boneInverses[o]),t.addScaledVector(Lr.copy(at).applyMatrix4(ct),r)}}return t.applyMatrix4(this.bindMatrixInverse)}}class o8 extends X0{constructor(){super(),this.isBone=!0,this.type="Bone"}}class F3 extends b1{constructor(e=null,t=1,n=1,i,s,r,o,l,c=l1,h=l1,u,f){super(null,r,o,l,c,h,i,s,u,f),this.isDataTexture=!0,this.image={data:e,width:t,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const ht=new O0,Rr=new O0;class v7{constructor(e=[],t=[]){this.uuid=O1(),this.bones=e.slice(0),this.boneInverses=t,this.boneMatrices=null,this.boneTexture=null,this.boneTextureSize=0,this.frame=-1,this.init()}init(){const e=this.bones,t=this.boneInverses;if(this.boneMatrices=new Float32Array(e.length*16),t.length===0)this.calculateInverses();else if(e.length!==t.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let n=0,i=this.bones.length;n<i;n++)this.boneInverses.push(new O0)}}calculateInverses(){this.boneInverses.length=0;for(let e=0,t=this.bones.length;e<t;e++){const n=new O0;this.bones[e]&&n.copy(this.bones[e].matrixWorld).invert(),this.boneInverses.push(n)}}pose(){for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&n.matrixWorld.copy(this.boneInverses[e]).invert()}for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&(n.parent&&n.parent.isBone?(n.matrix.copy(n.parent.matrixWorld).invert(),n.matrix.multiply(n.matrixWorld)):n.matrix.copy(n.matrixWorld),n.matrix.decompose(n.position,n.quaternion,n.scale))}}update(){const e=this.bones,t=this.boneInverses,n=this.boneMatrices,i=this.boneTexture;for(let s=0,r=e.length;s<r;s++){const o=e[s]?e[s].matrixWorld:Rr;ht.multiplyMatrices(o,t[s]),ht.toArray(n,s*16)}i!==null&&(i.needsUpdate=!0)}clone(){return new v7(this.bones,this.boneInverses)}computeBoneTexture(){let e=Math.sqrt(this.bones.length*4);e=L6(e),e=Math.max(e,4);const t=new Float32Array(e*e*4);t.set(this.boneMatrices);const n=new F3(t,e,e,F1,c2);return n.needsUpdate=!0,this.boneMatrices=t,this.boneTexture=n,this.boneTextureSize=e,this}getBoneByName(e){for(let t=0,n=this.bones.length;t<n;t++){const i=this.bones[t];if(i.name===e)return i}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(e,t){this.uuid=e.uuid;for(let n=0,i=e.bones.length;n<i;n++){const s=e.bones[n];let r=t[s];r===void 0&&(console.warn("THREE.Skeleton: No bone found with UUID:",s),r=new o8),this.bones.push(r),this.boneInverses.push(new O0().fromArray(e.boneInverses[n]))}return this.init(),this}toJSON(){const e={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};e.uuid=this.uuid;const t=this.bones,n=this.boneInverses;for(let i=0,s=t.length;i<s;i++){const r=t[i];e.bones.push(r.uuid);const o=n[i];e.boneInverses.push(o.toArray())}return e}}class k5 extends m1{constructor(e,t,n,i=1){super(e,t,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=i}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}const ut=new O0,ft=new O0,S3=[],L5=new S1;class Dr extends S1{constructor(e,t,n){super(e,t),this.isInstancedMesh=!0,this.instanceMatrix=new k5(new Float32Array(n*16),16),this.instanceColor=null,this.count=n,this.frustumCulled=!1}copy(e,t){return super.copy(e,t),this.instanceMatrix.copy(e.instanceMatrix),e.instanceColor!==null&&(this.instanceColor=e.instanceColor.clone()),this.count=e.count,this}getColorAt(e,t){t.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,t){t.fromArray(this.instanceMatrix.array,e*16)}raycast(e,t){const n=this.matrixWorld,i=this.count;if(L5.geometry=this.geometry,L5.material=this.material,L5.material!==void 0)for(let s=0;s<i;s++){this.getMatrixAt(s,ut),ft.multiplyMatrices(n,ut),L5.matrixWorld=ft,L5.raycast(e,S3);for(let r=0,o=S3.length;r<o;r++){const l=S3[r];l.instanceId=s,l.object=this,t.push(l)}S3.length=0}}setColorAt(e,t){this.instanceColor===null&&(this.instanceColor=new k5(new Float32Array(this.instanceMatrix.count*3),3)),t.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,t){t.toArray(this.instanceMatrix.array,e*16)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}class y7 extends g1{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new M0(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}const dt=new A,pt=new A,mt=new O0,V4=new $3,b3=new x5;class M7 extends X0{constructor(e=new Z0,t=new y7){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[0];for(let i=1,s=t.count;i<s;i++)dt.fromBufferAttribute(t,i-1),pt.fromBufferAttribute(t,i),n[i]=n[i-1],n[i]+=dt.distanceTo(pt);e.setAttribute("lineDistance",new L0(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,s=e.params.Line.threshold,r=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),b3.copy(n.boundingSphere),b3.applyMatrix4(i),b3.radius+=s,e.ray.intersectsSphere(b3)===!1)return;mt.copy(i).invert(),V4.copy(e.ray).applyMatrix4(mt);const o=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=o*o,c=new A,h=new A,u=new A,f=new A,d=this.isLineSegments?2:1,g=n.index,p=n.attributes.position;if(g!==null){const x=Math.max(0,r.start),_=Math.min(g.count,r.start+r.count);for(let M=x,y=_-1;M<y;M+=d){const S=g.getX(M),T=g.getX(M+1);if(c.fromBufferAttribute(p,S),h.fromBufferAttribute(p,T),V4.distanceSqToSegment(c,h,f,u)>l)continue;f.applyMatrix4(this.matrixWorld);const v=e.ray.origin.distanceTo(f);v<e.near||v>e.far||t.push({distance:v,point:u.clone().applyMatrix4(this.matrixWorld),index:M,face:null,faceIndex:null,object:this})}}else{const x=Math.max(0,r.start),_=Math.min(p.count,r.start+r.count);for(let M=x,y=_-1;M<y;M+=d){if(c.fromBufferAttribute(p,M),h.fromBufferAttribute(p,M+1),V4.distanceSqToSegment(c,h,f,u)>l)continue;f.applyMatrix4(this.matrixWorld);const T=e.ray.origin.distanceTo(f);T<e.near||T>e.far||t.push({distance:T,point:u.clone().applyMatrix4(this.matrixWorld),index:M,face:null,faceIndex:null,object:this})}}}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,r=i.length;s<r;s++){const o=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=s}}}}}const gt=new A,xt=new A;class Ir extends M7{constructor(e,t){super(e,t),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[];for(let i=0,s=t.count;i<s;i+=2)gt.fromBufferAttribute(t,i),xt.fromBufferAttribute(t,i+1),n[i]=i===0?0:n[i-1],n[i+1]=n[i]+gt.distanceTo(xt);e.setAttribute("lineDistance",new L0(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class Nr extends M7{constructor(e,t){super(e,t),this.isLineLoop=!0,this.type="LineLoop"}}class l8 extends g1{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new M0(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}const _t=new O0,i7=new $3,w3=new x5,T3=new A;class zr extends X0{constructor(e=new Z0,t=new l8){super(),this.isPoints=!0,this.type="Points",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=e.material,this.geometry=e.geometry,this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,s=e.params.Points.threshold,r=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),w3.copy(n.boundingSphere),w3.applyMatrix4(i),w3.radius+=s,e.ray.intersectsSphere(w3)===!1)return;_t.copy(i).invert(),i7.copy(e.ray).applyMatrix4(_t);const o=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=o*o,c=n.index,u=n.attributes.position;if(c!==null){const f=Math.max(0,r.start),d=Math.min(c.count,r.start+r.count);for(let g=f,m=d;g<m;g++){const p=c.getX(g);T3.fromBufferAttribute(u,p),vt(T3,p,l,i,e,t,this)}}else{const f=Math.max(0,r.start),d=Math.min(u.count,r.start+r.count);for(let g=f,m=d;g<m;g++)T3.fromBufferAttribute(u,g),vt(T3,g,l,i,e,t,this)}}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,r=i.length;s<r;s++){const o=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=s}}}}}function vt(a,e,t,n,i,s,r){const o=i7.distanceSqToPoint(a);if(o<t){const l=new A;i7.closestPointToPoint(a,l),l.applyMatrix4(n);const c=i.ray.origin.distanceTo(l);if(c<i.near||c>i.far)return;s.push({distance:c,distanceToRay:Math.sqrt(o),point:l,index:e,face:null,object:r})}}class k1{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(e,t){const n=this.getUtoTmapping(e);return this.getPoint(n,t)}getPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return t}getSpacedPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPointAt(n/e));return t}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let n,i=this.getPoint(0),s=0;t.push(0);for(let r=1;r<=e;r++)n=this.getPoint(r/e),s+=n.distanceTo(i),t.push(s),i=n;return this.cacheArcLengths=t,t}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(e,t){const n=this.getLengths();let i=0;const s=n.length;let r;t?r=t:r=e*n[s-1];let o=0,l=s-1,c;for(;o<=l;)if(i=Math.floor(o+(l-o)/2),c=n[i]-r,c<0)o=i+1;else if(c>0)l=i-1;else{l=i;break}if(i=l,n[i]===r)return i/(s-1);const h=n[i],f=n[i+1]-h,d=(r-h)/f;return(i+d)/(s-1)}getTangent(e,t){let i=e-1e-4,s=e+1e-4;i<0&&(i=0),s>1&&(s=1);const r=this.getPoint(i),o=this.getPoint(s),l=t||(r.isVector2?new $:new A);return l.copy(o).sub(r).normalize(),l}getTangentAt(e,t){const n=this.getUtoTmapping(e);return this.getTangent(n,t)}computeFrenetFrames(e,t){const n=new A,i=[],s=[],r=[],o=new A,l=new O0;for(let d=0;d<=e;d++){const g=d/e;i[d]=this.getTangentAt(g,new A)}s[0]=new A,r[0]=new A;let c=Number.MAX_VALUE;const h=Math.abs(i[0].x),u=Math.abs(i[0].y),f=Math.abs(i[0].z);h<=c&&(c=h,n.set(1,0,0)),u<=c&&(c=u,n.set(0,1,0)),f<=c&&n.set(0,0,1),o.crossVectors(i[0],n).normalize(),s[0].crossVectors(i[0],o),r[0].crossVectors(i[0],s[0]);for(let d=1;d<=e;d++){if(s[d]=s[d-1].clone(),r[d]=r[d-1].clone(),o.crossVectors(i[d-1],i[d]),o.length()>Number.EPSILON){o.normalize();const g=Math.acos(c1(i[d-1].dot(i[d]),-1,1));s[d].applyMatrix4(l.makeRotationAxis(o,g))}r[d].crossVectors(i[d],s[d])}if(t===!0){let d=Math.acos(c1(s[0].dot(s[e]),-1,1));d/=e,i[0].dot(o.crossVectors(s[0],s[e]))>0&&(d=-d);for(let g=1;g<=e;g++)s[g].applyMatrix4(l.makeRotationAxis(i[g],d*g)),r[g].crossVectors(i[g],s[g])}return{tangents:i,normals:s,binormals:r}}clone(){return new this.constructor().copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){const e={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}class S7 extends k1{constructor(e=0,t=0,n=1,i=1,s=0,r=Math.PI*2,o=!1,l=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=e,this.aY=t,this.xRadius=n,this.yRadius=i,this.aStartAngle=s,this.aEndAngle=r,this.aClockwise=o,this.aRotation=l}getPoint(e,t){const n=t||new $,i=Math.PI*2;let s=this.aEndAngle-this.aStartAngle;const r=Math.abs(s)<Number.EPSILON;for(;s<0;)s+=i;for(;s>i;)s-=i;s<Number.EPSILON&&(r?s=0:s=i),this.aClockwise===!0&&!r&&(s===i?s=-i:s=s-i);const o=this.aStartAngle+e*s;let l=this.aX+this.xRadius*Math.cos(o),c=this.aY+this.yRadius*Math.sin(o);if(this.aRotation!==0){const h=Math.cos(this.aRotation),u=Math.sin(this.aRotation),f=l-this.aX,d=c-this.aY;l=f*h-d*u+this.aX,c=f*u+d*h+this.aY}return n.set(l,c)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){const e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}}class Fr extends S7{constructor(e,t,n,i,s,r){super(e,t,n,n,i,s,r),this.isArcCurve=!0,this.type="ArcCurve"}}function b7(){let a=0,e=0,t=0,n=0;function i(s,r,o,l){a=s,e=o,t=-3*s+3*r-2*o-l,n=2*s-2*r+o+l}return{initCatmullRom:function(s,r,o,l,c){i(r,o,c*(o-s),c*(l-r))},initNonuniformCatmullRom:function(s,r,o,l,c,h,u){let f=(r-s)/c-(o-s)/(c+h)+(o-r)/h,d=(o-r)/h-(l-r)/(h+u)+(l-o)/u;f*=h,d*=h,i(r,o,f,d)},calc:function(s){const r=s*s,o=r*s;return a+e*s+t*r+n*o}}}const A3=new A,G4=new b7,H4=new b7,W4=new b7;class Or extends k1{constructor(e=[],t=!1,n="centripetal",i=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=e,this.closed=t,this.curveType=n,this.tension=i}getPoint(e,t=new A){const n=t,i=this.points,s=i.length,r=(s-(this.closed?0:1))*e;let o=Math.floor(r),l=r-o;this.closed?o+=o>0?0:(Math.floor(Math.abs(o)/s)+1)*s:l===0&&o===s-1&&(o=s-2,l=1);let c,h;this.closed||o>0?c=i[(o-1)%s]:(A3.subVectors(i[0],i[1]).add(i[0]),c=A3);const u=i[o%s],f=i[(o+1)%s];if(this.closed||o+2<s?h=i[(o+2)%s]:(A3.subVectors(i[s-1],i[s-2]).add(i[s-1]),h=A3),this.curveType==="centripetal"||this.curveType==="chordal"){const d=this.curveType==="chordal"?.5:.25;let g=Math.pow(c.distanceToSquared(u),d),m=Math.pow(u.distanceToSquared(f),d),p=Math.pow(f.distanceToSquared(h),d);m<1e-4&&(m=1),g<1e-4&&(g=m),p<1e-4&&(p=m),G4.initNonuniformCatmullRom(c.x,u.x,f.x,h.x,g,m,p),H4.initNonuniformCatmullRom(c.y,u.y,f.y,h.y,g,m,p),W4.initNonuniformCatmullRom(c.z,u.z,f.z,h.z,g,m,p)}else this.curveType==="catmullrom"&&(G4.initCatmullRom(c.x,u.x,f.x,h.x,this.tension),H4.initCatmullRom(c.y,u.y,f.y,h.y,this.tension),W4.initCatmullRom(c.z,u.z,f.z,h.z,this.tension));return n.set(G4.calc(l),H4.calc(l),W4.calc(l)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new A().fromArray(i))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}}function yt(a,e,t,n,i){const s=(n-e)*.5,r=(i-t)*.5,o=a*a,l=a*o;return(2*t-2*n+s+r)*l+(-3*t+3*n-2*s-r)*o+s*a+t}function Ur(a,e){const t=1-a;return t*t*e}function Br(a,e){return 2*(1-a)*a*e}function kr(a,e){return a*a*e}function N5(a,e,t,n){return Ur(a,e)+Br(a,t)+kr(a,n)}function Vr(a,e){const t=1-a;return t*t*t*e}function Gr(a,e){const t=1-a;return 3*t*t*a*e}function Hr(a,e){return 3*(1-a)*a*a*e}function Wr(a,e){return a*a*a*e}function z5(a,e,t,n,i){return Vr(a,e)+Gr(a,t)+Hr(a,n)+Wr(a,i)}class c8 extends k1{constructor(e=new $,t=new $,n=new $,i=new $){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new $){const n=t,i=this.v0,s=this.v1,r=this.v2,o=this.v3;return n.set(z5(e,i.x,s.x,r.x,o.x),z5(e,i.y,s.y,r.y,o.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class qr extends k1{constructor(e=new A,t=new A,n=new A,i=new A){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new A){const n=t,i=this.v0,s=this.v1,r=this.v2,o=this.v3;return n.set(z5(e,i.x,s.x,r.x,o.x),z5(e,i.y,s.y,r.y,o.y),z5(e,i.z,s.z,r.z,o.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class w7 extends k1{constructor(e=new $,t=new $){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=e,this.v2=t}getPoint(e,t=new $){const n=t;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t){const n=t||new $;return n.copy(this.v2).sub(this.v1).normalize(),n}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class Xr extends k1{constructor(e=new A,t=new A){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=e,this.v2=t}getPoint(e,t=new A){const n=t;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class h8 extends k1{constructor(e=new $,t=new $,n=new $){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new $){const n=t,i=this.v0,s=this.v1,r=this.v2;return n.set(N5(e,i.x,s.x,r.x),N5(e,i.y,s.y,r.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class u8 extends k1{constructor(e=new A,t=new A,n=new A){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new A){const n=t,i=this.v0,s=this.v1,r=this.v2;return n.set(N5(e,i.x,s.x,r.x),N5(e,i.y,s.y,r.y),N5(e,i.z,s.z,r.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class f8 extends k1{constructor(e=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=e}getPoint(e,t=new $){const n=t,i=this.points,s=(i.length-1)*e,r=Math.floor(s),o=s-r,l=i[r===0?r:r-1],c=i[r],h=i[r>i.length-2?i.length-1:r+1],u=i[r>i.length-3?i.length-1:r+2];return n.set(yt(o,l.x,c.x,h.x,u.x),yt(o,l.y,c.y,h.y,u.y)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new $().fromArray(i))}return this}}var T7=Object.freeze({__proto__:null,ArcCurve:Fr,CatmullRomCurve3:Or,CubicBezierCurve:c8,CubicBezierCurve3:qr,EllipseCurve:S7,LineCurve:w7,LineCurve3:Xr,QuadraticBezierCurve:h8,QuadraticBezierCurve3:u8,SplineCurve:f8});class Jr extends k1{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new w7(t,e))}getPoint(e,t){const n=e*this.getLength(),i=this.getCurveLengths();let s=0;for(;s<i.length;){if(i[s]>=n){const r=i[s]-n,o=this.curves[s],l=o.getLength(),c=l===0?0:1-r/l;return o.getPointAt(c,t)}s++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const e=[];let t=0;for(let n=0,i=this.curves.length;n<i;n++)t+=this.curves[n].getLength(),e.push(t);return this.cacheLengths=e,e}getSpacedPoints(e=40){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return this.autoClose&&t.push(t[0]),t}getPoints(e=12){const t=[];let n;for(let i=0,s=this.curves;i<s.length;i++){const r=s[i],o=r.isEllipseCurve?e*2:r.isLineCurve||r.isLineCurve3?1:r.isSplineCurve?e*r.points.length:e,l=r.getPoints(o);for(let c=0;c<l.length;c++){const h=l[c];n&&n.equals(h)||(t.push(h),n=h)}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t}copy(e){super.copy(e),this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(i.clone())}return this.autoClose=e.autoClose,this}toJSON(){const e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let t=0,n=this.curves.length;t<n;t++){const i=this.curves[t];e.curves.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(new T7[i.type]().fromJSON(i))}return this}}class s7 extends Jr{constructor(e){super(),this.type="Path",this.currentPoint=new $,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let t=1,n=e.length;t<n;t++)this.lineTo(e[t].x,e[t].y);return this}moveTo(e,t){return this.currentPoint.set(e,t),this}lineTo(e,t){const n=new w7(this.currentPoint.clone(),new $(e,t));return this.curves.push(n),this.currentPoint.set(e,t),this}quadraticCurveTo(e,t,n,i){const s=new h8(this.currentPoint.clone(),new $(e,t),new $(n,i));return this.curves.push(s),this.currentPoint.set(n,i),this}bezierCurveTo(e,t,n,i,s,r){const o=new c8(this.currentPoint.clone(),new $(e,t),new $(n,i),new $(s,r));return this.curves.push(o),this.currentPoint.set(s,r),this}splineThru(e){const t=[this.currentPoint.clone()].concat(e),n=new f8(t);return this.curves.push(n),this.currentPoint.copy(e[e.length-1]),this}arc(e,t,n,i,s,r){const o=this.currentPoint.x,l=this.currentPoint.y;return this.absarc(e+o,t+l,n,i,s,r),this}absarc(e,t,n,i,s,r){return this.absellipse(e,t,n,n,i,s,r),this}ellipse(e,t,n,i,s,r,o,l){const c=this.currentPoint.x,h=this.currentPoint.y;return this.absellipse(e+c,t+h,n,i,s,r,o,l),this}absellipse(e,t,n,i,s,r,o,l){const c=new S7(e,t,n,i,s,r,o,l);if(this.curves.length>0){const u=c.getPoint(0);u.equals(this.currentPoint)||this.lineTo(u.x,u.y)}this.curves.push(c);const h=c.getPoint(1);return this.currentPoint.copy(h),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){const e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}}class j3 extends Z0{constructor(e=[new $(0,-.5),new $(.5,0),new $(0,.5)],t=12,n=0,i=Math.PI*2){super(),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:n,phiLength:i},t=Math.floor(t),i=c1(i,0,Math.PI*2);const s=[],r=[],o=[],l=[],c=[],h=1/t,u=new A,f=new $,d=new A,g=new A,m=new A;let p=0,x=0;for(let _=0;_<=e.length-1;_++)switch(_){case 0:p=e[_+1].x-e[_].x,x=e[_+1].y-e[_].y,d.x=x*1,d.y=-p,d.z=x*0,m.copy(d),d.normalize(),l.push(d.x,d.y,d.z);break;case e.length-1:l.push(m.x,m.y,m.z);break;default:p=e[_+1].x-e[_].x,x=e[_+1].y-e[_].y,d.x=x*1,d.y=-p,d.z=x*0,g.copy(d),d.x+=m.x,d.y+=m.y,d.z+=m.z,d.normalize(),l.push(d.x,d.y,d.z),m.copy(g)}for(let _=0;_<=t;_++){const M=n+_*h*i,y=Math.sin(M),S=Math.cos(M);for(let T=0;T<=e.length-1;T++){u.x=e[T].x*y,u.y=e[T].y,u.z=e[T].x*S,r.push(u.x,u.y,u.z),f.x=_/t,f.y=T/(e.length-1),o.push(f.x,f.y);const L=l[3*T+0]*y,v=l[3*T+1],E=l[3*T+0]*S;c.push(L,v,E)}}for(let _=0;_<t;_++)for(let M=0;M<e.length-1;M++){const y=M+_*e.length,S=y,T=y+e.length,L=y+e.length+1,v=y+1;s.push(S,T,v),s.push(L,v,T)}this.setIndex(s),this.setAttribute("position",new L0(r,3)),this.setAttribute("uv",new L0(o,2)),this.setAttribute("normal",new L0(c,3))}static fromJSON(e){return new j3(e.points,e.segments,e.phiStart,e.phiLength)}}class A7 extends j3{constructor(e=1,t=1,n=4,i=8){const s=new s7;s.absarc(0,-t/2,e,Math.PI*1.5,0),s.absarc(0,t/2,e,0,Math.PI*.5),super(s.getPoints(n),i),this.type="CapsuleGeometry",this.parameters={radius:e,height:t,capSegments:n,radialSegments:i}}static fromJSON(e){return new A7(e.radius,e.length,e.capSegments,e.radialSegments)}}class E7 extends Z0{constructor(e=1,t=8,n=0,i=Math.PI*2){super(),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:n,thetaLength:i},t=Math.max(3,t);const s=[],r=[],o=[],l=[],c=new A,h=new $;r.push(0,0,0),o.push(0,0,1),l.push(.5,.5);for(let u=0,f=3;u<=t;u++,f+=3){const d=n+u/t*i;c.x=e*Math.cos(d),c.y=e*Math.sin(d),r.push(c.x,c.y,c.z),o.push(0,0,1),h.x=(r[f]/e+1)/2,h.y=(r[f+1]/e+1)/2,l.push(h.x,h.y)}for(let u=1;u<=t;u++)s.push(u,u+1,0);this.setIndex(s),this.setAttribute("position",new L0(r,3)),this.setAttribute("normal",new L0(o,3)),this.setAttribute("uv",new L0(l,2))}static fromJSON(e){return new E7(e.radius,e.segments,e.thetaStart,e.thetaLength)}}class e4 extends Z0{constructor(e=1,t=1,n=1,i=8,s=1,r=!1,o=0,l=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:i,heightSegments:s,openEnded:r,thetaStart:o,thetaLength:l};const c=this;i=Math.floor(i),s=Math.floor(s);const h=[],u=[],f=[],d=[];let g=0;const m=[],p=n/2;let x=0;_(),r===!1&&(e>0&&M(!0),t>0&&M(!1)),this.setIndex(h),this.setAttribute("position",new L0(u,3)),this.setAttribute("normal",new L0(f,3)),this.setAttribute("uv",new L0(d,2));function _(){const y=new A,S=new A;let T=0;const L=(t-e)/n;for(let v=0;v<=s;v++){const E=[],P=v/s,B=P*(t-e)+e;for(let Q=0;Q<=i;Q++){const F=Q/i,D=F*l+o,V=Math.sin(D),Z=Math.cos(D);S.x=B*V,S.y=-P*n+p,S.z=B*Z,u.push(S.x,S.y,S.z),y.set(V,L,Z).normalize(),f.push(y.x,y.y,y.z),d.push(F,1-P),E.push(g++)}m.push(E)}for(let v=0;v<i;v++)for(let E=0;E<s;E++){const P=m[E][v],B=m[E+1][v],Q=m[E+1][v+1],F=m[E][v+1];h.push(P,B,F),h.push(B,Q,F),T+=6}c.addGroup(x,T,0),x+=T}function M(y){const S=g,T=new $,L=new A;let v=0;const E=y===!0?e:t,P=y===!0?1:-1;for(let Q=1;Q<=i;Q++)u.push(0,p*P,0),f.push(0,P,0),d.push(.5,.5),g++;const B=g;for(let Q=0;Q<=i;Q++){const D=Q/i*l+o,V=Math.cos(D),Z=Math.sin(D);L.x=E*Z,L.y=p*P,L.z=E*V,u.push(L.x,L.y,L.z),f.push(0,P,0),T.x=V*.5+.5,T.y=Z*.5*P+.5,d.push(T.x,T.y),g++}for(let Q=0;Q<i;Q++){const F=S+Q,D=B+Q;y===!0?h.push(D,D+1,F):h.push(D+1,D,F),v+=3}c.addGroup(x,v,y===!0?1:2),x+=v}}static fromJSON(e){return new e4(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class C7 extends e4{constructor(e=1,t=1,n=8,i=1,s=!1,r=0,o=Math.PI*2){super(0,e,t,n,i,s,r,o),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:n,heightSegments:i,openEnded:s,thetaStart:r,thetaLength:o}}static fromJSON(e){return new C7(e.radius,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class F2 extends Z0{constructor(e=[],t=[],n=1,i=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:n,detail:i};const s=[],r=[];o(i),c(n),h(),this.setAttribute("position",new L0(s,3)),this.setAttribute("normal",new L0(s.slice(),3)),this.setAttribute("uv",new L0(r,2)),i===0?this.computeVertexNormals():this.normalizeNormals();function o(_){const M=new A,y=new A,S=new A;for(let T=0;T<t.length;T+=3)d(t[T+0],M),d(t[T+1],y),d(t[T+2],S),l(M,y,S,_)}function l(_,M,y,S){const T=S+1,L=[];for(let v=0;v<=T;v++){L[v]=[];const E=_.clone().lerp(y,v/T),P=M.clone().lerp(y,v/T),B=T-v;for(let Q=0;Q<=B;Q++)Q===0&&v===T?L[v][Q]=E:L[v][Q]=E.clone().lerp(P,Q/B)}for(let v=0;v<T;v++)for(let E=0;E<2*(T-v)-1;E++){const P=Math.floor(E/2);E%2===0?(f(L[v][P+1]),f(L[v+1][P]),f(L[v][P])):(f(L[v][P+1]),f(L[v+1][P+1]),f(L[v+1][P]))}}function c(_){const M=new A;for(let y=0;y<s.length;y+=3)M.x=s[y+0],M.y=s[y+1],M.z=s[y+2],M.normalize().multiplyScalar(_),s[y+0]=M.x,s[y+1]=M.y,s[y+2]=M.z}function h(){const _=new A;for(let M=0;M<s.length;M+=3){_.x=s[M+0],_.y=s[M+1],_.z=s[M+2];const y=p(_)/2/Math.PI+.5,S=x(_)/Math.PI+.5;r.push(y,1-S)}g(),u()}function u(){for(let _=0;_<r.length;_+=6){const M=r[_+0],y=r[_+2],S=r[_+4],T=Math.max(M,y,S),L=Math.min(M,y,S);T>.9&&L<.1&&(M<.2&&(r[_+0]+=1),y<.2&&(r[_+2]+=1),S<.2&&(r[_+4]+=1))}}function f(_){s.push(_.x,_.y,_.z)}function d(_,M){const y=_*3;M.x=e[y+0],M.y=e[y+1],M.z=e[y+2]}function g(){const _=new A,M=new A,y=new A,S=new A,T=new $,L=new $,v=new $;for(let E=0,P=0;E<s.length;E+=9,P+=6){_.set(s[E+0],s[E+1],s[E+2]),M.set(s[E+3],s[E+4],s[E+5]),y.set(s[E+6],s[E+7],s[E+8]),T.set(r[P+0],r[P+1]),L.set(r[P+2],r[P+3]),v.set(r[P+4],r[P+5]),S.copy(_).add(M).add(y).divideScalar(3);const B=p(S);m(T,P+0,_,B),m(L,P+2,M,B),m(v,P+4,y,B)}}function m(_,M,y,S){S<0&&_.x===1&&(r[M]=_.x-1),y.x===0&&y.z===0&&(r[M]=S/2/Math.PI+.5)}function p(_){return Math.atan2(_.z,-_.x)}function x(_){return Math.atan2(-_.y,Math.sqrt(_.x*_.x+_.z*_.z))}}static fromJSON(e){return new F2(e.vertices,e.indices,e.radius,e.details)}}class L7 extends F2{constructor(e=1,t=0){const n=(1+Math.sqrt(5))/2,i=1/n,s=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-i,-n,0,-i,n,0,i,-n,0,i,n,-i,-n,0,-i,n,0,i,-n,0,i,n,0,-n,0,-i,n,0,-i,-n,0,i,n,0,i],r=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(s,r,e,t),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new L7(e.radius,e.detail)}}const E3=new A,C3=new A,q4=new A,L3=new z1;class Yr extends Z0{constructor(e=null,t=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:e,thresholdAngle:t},e!==null){const i=Math.pow(10,4),s=Math.cos(I3*t),r=e.getIndex(),o=e.getAttribute("position"),l=r?r.count:o.count,c=[0,0,0],h=["a","b","c"],u=new Array(3),f={},d=[];for(let g=0;g<l;g+=3){r?(c[0]=r.getX(g),c[1]=r.getX(g+1),c[2]=r.getX(g+2)):(c[0]=g,c[1]=g+1,c[2]=g+2);const{a:m,b:p,c:x}=L3;if(m.fromBufferAttribute(o,c[0]),p.fromBufferAttribute(o,c[1]),x.fromBufferAttribute(o,c[2]),L3.getNormal(q4),u[0]=`${Math.round(m.x*i)},${Math.round(m.y*i)},${Math.round(m.z*i)}`,u[1]=`${Math.round(p.x*i)},${Math.round(p.y*i)},${Math.round(p.z*i)}`,u[2]=`${Math.round(x.x*i)},${Math.round(x.y*i)},${Math.round(x.z*i)}`,!(u[0]===u[1]||u[1]===u[2]||u[2]===u[0]))for(let _=0;_<3;_++){const M=(_+1)%3,y=u[_],S=u[M],T=L3[h[_]],L=L3[h[M]],v=`${y}_${S}`,E=`${S}_${y}`;E in f&&f[E]?(q4.dot(f[E].normal)<=s&&(d.push(T.x,T.y,T.z),d.push(L.x,L.y,L.z)),f[E]=null):v in f||(f[v]={index0:c[_],index1:c[M],normal:q4.clone()})}}for(const g in f)if(f[g]){const{index0:m,index1:p}=f[g];E3.fromBufferAttribute(o,m),C3.fromBufferAttribute(o,p),d.push(E3.x,E3.y,E3.z),d.push(C3.x,C3.y,C3.z)}this.setAttribute("position",new L0(d,3))}}}class P7 extends s7{constructor(e){super(e),this.uuid=O1(),this.type="Shape",this.holes=[]}getPointsHoles(e){const t=[];for(let n=0,i=this.holes.length;n<i;n++)t[n]=this.holes[n].getPoints(e);return t}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(e){super.copy(e),this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(i.clone())}return this}toJSON(){const e=super.toJSON();e.uuid=this.uuid,e.holes=[];for(let t=0,n=this.holes.length;t<n;t++){const i=this.holes[t];e.holes.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.uuid=e.uuid,this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(new s7().fromJSON(i))}return this}}const Zr={triangulate:function(a,e,t=2){const n=e&&e.length,i=n?e[0]*t:a.length;let s=d8(a,0,i,t,!0);const r=[];if(!s||s.next===s.prev)return r;let o,l,c,h,u,f,d;if(n&&(s=ea(a,e,s,t)),a.length>80*t){o=c=a[0],l=h=a[1];for(let g=t;g<i;g+=t)u=a[g],f=a[g+1],u<o&&(o=u),f<l&&(l=f),u>c&&(c=u),f>h&&(h=f);d=Math.max(c-o,h-l),d=d!==0?1/d:0}return V5(s,r,t,o,l,d),r}};function d8(a,e,t,n,i){let s,r;if(i===ua(a,e,t,n)>0)for(s=e;s<t;s+=n)r=Mt(s,a[s],a[s+1],r);else for(s=t-n;s>=e;s-=n)r=Mt(s,a[s],a[s+1],r);return r&&t4(r,r.next)&&(H5(r),r=r.next),r}function d2(a,e){if(!a)return a;e||(e=a);let t=a,n;do if(n=!1,!t.steiner&&(t4(t,t.next)||$0(t.prev,t,t.next)===0)){if(H5(t),t=e=t.prev,t===t.next)break;n=!0}else t=t.next;while(n||t!==e);return e}function V5(a,e,t,n,i,s,r){if(!a)return;!r&&s&&ra(a,n,i,s);let o=a,l,c;for(;a.prev!==a.next;){if(l=a.prev,c=a.next,s?Kr(a,n,i,s):$r(a)){e.push(l.i/t),e.push(a.i/t),e.push(c.i/t),H5(a),a=c.next,o=c.next;continue}if(a=c,a===o){r?r===1?(a=Qr(d2(a),e,t),V5(a,e,t,n,i,s,2)):r===2&&jr(a,e,t,n,i,s):V5(d2(a),e,t,n,i,s,1);break}}}function $r(a){const e=a.prev,t=a,n=a.next;if($0(e,t,n)>=0)return!1;let i=a.next.next;for(;i!==a.prev;){if(h5(e.x,e.y,t.x,t.y,n.x,n.y,i.x,i.y)&&$0(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function Kr(a,e,t,n){const i=a.prev,s=a,r=a.next;if($0(i,s,r)>=0)return!1;const o=i.x<s.x?i.x<r.x?i.x:r.x:s.x<r.x?s.x:r.x,l=i.y<s.y?i.y<r.y?i.y:r.y:s.y<r.y?s.y:r.y,c=i.x>s.x?i.x>r.x?i.x:r.x:s.x>r.x?s.x:r.x,h=i.y>s.y?i.y>r.y?i.y:r.y:s.y>r.y?s.y:r.y,u=r7(o,l,e,t,n),f=r7(c,h,e,t,n);let d=a.prevZ,g=a.nextZ;for(;d&&d.z>=u&&g&&g.z<=f;){if(d!==a.prev&&d!==a.next&&h5(i.x,i.y,s.x,s.y,r.x,r.y,d.x,d.y)&&$0(d.prev,d,d.next)>=0||(d=d.prevZ,g!==a.prev&&g!==a.next&&h5(i.x,i.y,s.x,s.y,r.x,r.y,g.x,g.y)&&$0(g.prev,g,g.next)>=0))return!1;g=g.nextZ}for(;d&&d.z>=u;){if(d!==a.prev&&d!==a.next&&h5(i.x,i.y,s.x,s.y,r.x,r.y,d.x,d.y)&&$0(d.prev,d,d.next)>=0)return!1;d=d.prevZ}for(;g&&g.z<=f;){if(g!==a.prev&&g!==a.next&&h5(i.x,i.y,s.x,s.y,r.x,r.y,g.x,g.y)&&$0(g.prev,g,g.next)>=0)return!1;g=g.nextZ}return!0}function Qr(a,e,t){let n=a;do{const i=n.prev,s=n.next.next;!t4(i,s)&&p8(i,n,n.next,s)&&G5(i,s)&&G5(s,i)&&(e.push(i.i/t),e.push(n.i/t),e.push(s.i/t),H5(n),H5(n.next),n=a=s),n=n.next}while(n!==a);return d2(n)}function jr(a,e,t,n,i,s){let r=a;do{let o=r.next.next;for(;o!==r.prev;){if(r.i!==o.i&&la(r,o)){let l=m8(r,o);r=d2(r,r.next),l=d2(l,l.next),V5(r,e,t,n,i,s),V5(l,e,t,n,i,s);return}o=o.next}r=r.next}while(r!==a)}function ea(a,e,t,n){const i=[];let s,r,o,l,c;for(s=0,r=e.length;s<r;s++)o=e[s]*n,l=s<r-1?e[s+1]*n:a.length,c=d8(a,o,l,n,!1),c===c.next&&(c.steiner=!0),i.push(oa(c));for(i.sort(ta),s=0;s<i.length;s++)na(i[s],t),t=d2(t,t.next);return t}function ta(a,e){return a.x-e.x}function na(a,e){if(e=ia(a,e),e){const t=m8(e,a);d2(e,e.next),d2(t,t.next)}}function ia(a,e){let t=e;const n=a.x,i=a.y;let s=-1/0,r;do{if(i<=t.y&&i>=t.next.y&&t.next.y!==t.y){const f=t.x+(i-t.y)*(t.next.x-t.x)/(t.next.y-t.y);if(f<=n&&f>s){if(s=f,f===n){if(i===t.y)return t;if(i===t.next.y)return t.next}r=t.x<t.next.x?t:t.next}}t=t.next}while(t!==e);if(!r)return null;if(n===s)return r;const o=r,l=r.x,c=r.y;let h=1/0,u;t=r;do n>=t.x&&t.x>=l&&n!==t.x&&h5(i<c?n:s,i,l,c,i<c?s:n,i,t.x,t.y)&&(u=Math.abs(i-t.y)/(n-t.x),G5(t,a)&&(u<h||u===h&&(t.x>r.x||t.x===r.x&&sa(r,t)))&&(r=t,h=u)),t=t.next;while(t!==o);return r}function sa(a,e){return $0(a.prev,a,e.prev)<0&&$0(e.next,a,a.next)<0}function ra(a,e,t,n){let i=a;do i.z===null&&(i.z=r7(i.x,i.y,e,t,n)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next;while(i!==a);i.prevZ.nextZ=null,i.prevZ=null,aa(i)}function aa(a){let e,t,n,i,s,r,o,l,c=1;do{for(t=a,a=null,s=null,r=0;t;){for(r++,n=t,o=0,e=0;e<c&&(o++,n=n.nextZ,!!n);e++);for(l=c;o>0||l>0&&n;)o!==0&&(l===0||!n||t.z<=n.z)?(i=t,t=t.nextZ,o--):(i=n,n=n.nextZ,l--),s?s.nextZ=i:a=i,i.prevZ=s,s=i;t=n}s.nextZ=null,c*=2}while(r>1);return a}function r7(a,e,t,n,i){return a=32767*(a-t)*i,e=32767*(e-n)*i,a=(a|a<<8)&16711935,a=(a|a<<4)&252645135,a=(a|a<<2)&858993459,a=(a|a<<1)&1431655765,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,a|e<<1}function oa(a){let e=a,t=a;do(e.x<t.x||e.x===t.x&&e.y<t.y)&&(t=e),e=e.next;while(e!==a);return t}function h5(a,e,t,n,i,s,r,o){return(i-r)*(e-o)-(a-r)*(s-o)>=0&&(a-r)*(n-o)-(t-r)*(e-o)>=0&&(t-r)*(s-o)-(i-r)*(n-o)>=0}function la(a,e){return a.next.i!==e.i&&a.prev.i!==e.i&&!ca(a,e)&&(G5(a,e)&&G5(e,a)&&ha(a,e)&&($0(a.prev,a,e.prev)||$0(a,e.prev,e))||t4(a,e)&&$0(a.prev,a,a.next)>0&&$0(e.prev,e,e.next)>0)}function $0(a,e,t){return(e.y-a.y)*(t.x-e.x)-(e.x-a.x)*(t.y-e.y)}function t4(a,e){return a.x===e.x&&a.y===e.y}function p8(a,e,t,n){const i=R3($0(a,e,t)),s=R3($0(a,e,n)),r=R3($0(t,n,a)),o=R3($0(t,n,e));return!!(i!==s&&r!==o||i===0&&P3(a,t,e)||s===0&&P3(a,n,e)||r===0&&P3(t,a,n)||o===0&&P3(t,e,n))}function P3(a,e,t){return e.x<=Math.max(a.x,t.x)&&e.x>=Math.min(a.x,t.x)&&e.y<=Math.max(a.y,t.y)&&e.y>=Math.min(a.y,t.y)}function R3(a){return a>0?1:a<0?-1:0}function ca(a,e){let t=a;do{if(t.i!==a.i&&t.next.i!==a.i&&t.i!==e.i&&t.next.i!==e.i&&p8(t,t.next,a,e))return!0;t=t.next}while(t!==a);return!1}function G5(a,e){return $0(a.prev,a,a.next)<0?$0(a,e,a.next)>=0&&$0(a,a.prev,e)>=0:$0(a,e,a.prev)<0||$0(a,a.next,e)<0}function ha(a,e){let t=a,n=!1;const i=(a.x+e.x)/2,s=(a.y+e.y)/2;do t.y>s!=t.next.y>s&&t.next.y!==t.y&&i<(t.next.x-t.x)*(s-t.y)/(t.next.y-t.y)+t.x&&(n=!n),t=t.next;while(t!==a);return n}function m8(a,e){const t=new a7(a.i,a.x,a.y),n=new a7(e.i,e.x,e.y),i=a.next,s=e.prev;return a.next=e,e.prev=a,t.next=i,i.prev=t,n.next=t,t.prev=n,s.next=n,n.prev=s,n}function Mt(a,e,t,n){const i=new a7(a,e,t);return n?(i.next=n.next,i.prev=n,n.next.prev=i,n.next=i):(i.prev=i,i.next=i),i}function H5(a){a.next.prev=a.prev,a.prev.next=a.next,a.prevZ&&(a.prevZ.nextZ=a.nextZ),a.nextZ&&(a.nextZ.prevZ=a.prevZ)}function a7(a,e,t){this.i=a,this.x=e,this.y=t,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function ua(a,e,t,n){let i=0;for(let s=e,r=t-n;s<t;s+=n)i+=(a[r]-a[s])*(a[s+1]+a[r+1]),r=s;return i}class f2{static area(e){const t=e.length;let n=0;for(let i=t-1,s=0;s<t;i=s++)n+=e[i].x*e[s].y-e[s].x*e[i].y;return n*.5}static isClockWise(e){return f2.area(e)<0}static triangulateShape(e,t){const n=[],i=[],s=[];St(e),bt(n,e);let r=e.length;t.forEach(St);for(let l=0;l<t.length;l++)i.push(r),r+=t[l].length,bt(n,t[l]);const o=Zr.triangulate(n,i);for(let l=0;l<o.length;l+=3)s.push(o.slice(l,l+3));return s}}function St(a){const e=a.length;e>2&&a[e-1].equals(a[0])&&a.pop()}function bt(a,e){for(let t=0;t<e.length;t++)a.push(e[t].x),a.push(e[t].y)}class R7 extends Z0{constructor(e=new P7([new $(.5,.5),new $(-.5,.5),new $(-.5,-.5),new $(.5,-.5)]),t={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];const n=this,i=[],s=[];for(let o=0,l=e.length;o<l;o++){const c=e[o];r(c)}this.setAttribute("position",new L0(i,3)),this.setAttribute("uv",new L0(s,2)),this.computeVertexNormals();function r(o){const l=[],c=t.curveSegments!==void 0?t.curveSegments:12,h=t.steps!==void 0?t.steps:1,u=t.depth!==void 0?t.depth:1;let f=t.bevelEnabled!==void 0?t.bevelEnabled:!0,d=t.bevelThickness!==void 0?t.bevelThickness:.2,g=t.bevelSize!==void 0?t.bevelSize:d-.1,m=t.bevelOffset!==void 0?t.bevelOffset:0,p=t.bevelSegments!==void 0?t.bevelSegments:3;const x=t.extrudePath,_=t.UVGenerator!==void 0?t.UVGenerator:fa;let M,y=!1,S,T,L,v;x&&(M=x.getSpacedPoints(h),y=!0,f=!1,S=x.computeFrenetFrames(h,!1),T=new A,L=new A,v=new A),f||(p=0,d=0,g=0,m=0);const E=o.extractPoints(c);let P=E.shape;const B=E.holes;if(!f2.isClockWise(P)){P=P.reverse();for(let J=0,W=B.length;J<W;J++){const i0=B[J];f2.isClockWise(i0)&&(B[J]=i0.reverse())}}const F=f2.triangulateShape(P,B),D=P;for(let J=0,W=B.length;J<W;J++){const i0=B[J];P=P.concat(i0)}function V(J,W,i0){return W||console.error("THREE.ExtrudeGeometry: vec does not exist"),W.clone().multiplyScalar(i0).add(J)}const Z=P.length,K=F.length;function H(J,W,i0){let p0,l0,R0;const y0=J.x-W.x,_0=J.y-W.y,J0=i0.x-J.x,W0=i0.y-J.y,C=y0*y0+_0*_0,b=y0*W0-_0*J0;if(Math.abs(b)>Number.EPSILON){const U=Math.sqrt(C),n0=Math.sqrt(J0*J0+W0*W0),s0=W.x-_0/U,h0=W.y+y0/U,w0=i0.x-W0/n0,u0=i0.y+J0/n0,Y=((w0-s0)*W0-(u0-h0)*J0)/(y0*W0-_0*J0);p0=s0+y0*Y-J.x,l0=h0+_0*Y-J.y;const g0=p0*p0+l0*l0;if(g0<=2)return new $(p0,l0);R0=Math.sqrt(g0/2)}else{let U=!1;y0>Number.EPSILON?J0>Number.EPSILON&&(U=!0):y0<-Number.EPSILON?J0<-Number.EPSILON&&(U=!0):Math.sign(_0)===Math.sign(W0)&&(U=!0),U?(p0=-_0,l0=y0,R0=Math.sqrt(C)):(p0=y0,l0=_0,R0=Math.sqrt(C/2))}return new $(p0/R0,l0/R0)}const N=[];for(let J=0,W=D.length,i0=W-1,p0=J+1;J<W;J++,i0++,p0++)i0===W&&(i0=0),p0===W&&(p0=0),N[J]=H(D[J],D[i0],D[p0]);const O=[];let j,e0=N.concat();for(let J=0,W=B.length;J<W;J++){const i0=B[J];j=[];for(let p0=0,l0=i0.length,R0=l0-1,y0=p0+1;p0<l0;p0++,R0++,y0++)R0===l0&&(R0=0),y0===l0&&(y0=0),j[p0]=H(i0[p0],i0[R0],i0[y0]);O.push(j),e0=e0.concat(j)}for(let J=0;J<p;J++){const W=J/p,i0=d*Math.cos(W*Math.PI/2),p0=g*Math.sin(W*Math.PI/2)+m;for(let l0=0,R0=D.length;l0<R0;l0++){const y0=V(D[l0],N[l0],p0);I0(y0.x,y0.y,-i0)}for(let l0=0,R0=B.length;l0<R0;l0++){const y0=B[l0];j=O[l0];for(let _0=0,J0=y0.length;_0<J0;_0++){const W0=V(y0[_0],j[_0],p0);I0(W0.x,W0.y,-i0)}}}const t0=g+m;for(let J=0;J<Z;J++){const W=f?V(P[J],e0[J],t0):P[J];y?(L.copy(S.normals[0]).multiplyScalar(W.x),T.copy(S.binormals[0]).multiplyScalar(W.y),v.copy(M[0]).add(L).add(T),I0(v.x,v.y,v.z)):I0(W.x,W.y,0)}for(let J=1;J<=h;J++)for(let W=0;W<Z;W++){const i0=f?V(P[W],e0[W],t0):P[W];y?(L.copy(S.normals[J]).multiplyScalar(i0.x),T.copy(S.binormals[J]).multiplyScalar(i0.y),v.copy(M[J]).add(L).add(T),I0(v.x,v.y,v.z)):I0(i0.x,i0.y,u/h*J)}for(let J=p-1;J>=0;J--){const W=J/p,i0=d*Math.cos(W*Math.PI/2),p0=g*Math.sin(W*Math.PI/2)+m;for(let l0=0,R0=D.length;l0<R0;l0++){const y0=V(D[l0],N[l0],p0);I0(y0.x,y0.y,u+i0)}for(let l0=0,R0=B.length;l0<R0;l0++){const y0=B[l0];j=O[l0];for(let _0=0,J0=y0.length;_0<J0;_0++){const W0=V(y0[_0],j[_0],p0);y?I0(W0.x,W0.y+M[h-1].y,M[h-1].x+i0):I0(W0.x,W0.y,u+i0)}}}f0(),T0();function f0(){const J=i.length/3;if(f){let W=0,i0=Z*W;for(let p0=0;p0<K;p0++){const l0=F[p0];v0(l0[2]+i0,l0[1]+i0,l0[0]+i0)}W=h+p*2,i0=Z*W;for(let p0=0;p0<K;p0++){const l0=F[p0];v0(l0[0]+i0,l0[1]+i0,l0[2]+i0)}}else{for(let W=0;W<K;W++){const i0=F[W];v0(i0[2],i0[1],i0[0])}for(let W=0;W<K;W++){const i0=F[W];v0(i0[0]+Z*h,i0[1]+Z*h,i0[2]+Z*h)}}n.addGroup(J,i.length/3-J,0)}function T0(){const J=i.length/3;let W=0;q(D,W),W+=D.length;for(let i0=0,p0=B.length;i0<p0;i0++){const l0=B[i0];q(l0,W),W+=l0.length}n.addGroup(J,i.length/3-J,1)}function q(J,W){let i0=J.length;for(;--i0>=0;){const p0=i0;let l0=i0-1;l0<0&&(l0=J.length-1);for(let R0=0,y0=h+p*2;R0<y0;R0++){const _0=Z*R0,J0=Z*(R0+1),W0=W+p0+_0,C=W+l0+_0,b=W+l0+J0,U=W+p0+J0;A0(W0,C,b,U)}}}function I0(J,W,i0){l.push(J),l.push(W),l.push(i0)}function v0(J,W,i0){c0(J),c0(W),c0(i0);const p0=i.length/3,l0=_.generateTopUV(n,i,p0-3,p0-2,p0-1);F0(l0[0]),F0(l0[1]),F0(l0[2])}function A0(J,W,i0,p0){c0(J),c0(W),c0(p0),c0(W),c0(i0),c0(p0);const l0=i.length/3,R0=_.generateSideWallUV(n,i,l0-6,l0-3,l0-2,l0-1);F0(R0[0]),F0(R0[1]),F0(R0[3]),F0(R0[1]),F0(R0[2]),F0(R0[3])}function c0(J){i.push(l[J*3+0]),i.push(l[J*3+1]),i.push(l[J*3+2])}function F0(J){s.push(J.x),s.push(J.y)}}}toJSON(){const e=super.toJSON(),t=this.parameters.shapes,n=this.parameters.options;return da(t,n,e)}static fromJSON(e,t){const n=[];for(let s=0,r=e.shapes.length;s<r;s++){const o=t[e.shapes[s]];n.push(o)}const i=e.options.extrudePath;return i!==void 0&&(e.options.extrudePath=new T7[i.type]().fromJSON(i)),new R7(n,e.options)}}const fa={generateTopUV:function(a,e,t,n,i){const s=e[t*3],r=e[t*3+1],o=e[n*3],l=e[n*3+1],c=e[i*3],h=e[i*3+1];return[new $(s,r),new $(o,l),new $(c,h)]},generateSideWallUV:function(a,e,t,n,i,s){const r=e[t*3],o=e[t*3+1],l=e[t*3+2],c=e[n*3],h=e[n*3+1],u=e[n*3+2],f=e[i*3],d=e[i*3+1],g=e[i*3+2],m=e[s*3],p=e[s*3+1],x=e[s*3+2];return Math.abs(o-h)<Math.abs(r-c)?[new $(r,1-l),new $(c,1-u),new $(f,1-g),new $(m,1-x)]:[new $(o,1-l),new $(h,1-u),new $(d,1-g),new $(p,1-x)]}};function da(a,e,t){if(t.shapes=[],Array.isArray(a))for(let n=0,i=a.length;n<i;n++){const s=a[n];t.shapes.push(s.uuid)}else t.shapes.push(a.uuid);return t.options=Object.assign({},e),e.extrudePath!==void 0&&(t.options.extrudePath=e.extrudePath.toJSON()),t}class D7 extends F2{constructor(e=1,t=0){const n=(1+Math.sqrt(5))/2,i=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1],s=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(i,s,e,t),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new D7(e.radius,e.detail)}}class I7 extends F2{constructor(e=1,t=0){const n=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],i=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(n,i,e,t),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new I7(e.radius,e.detail)}}class N7 extends Z0{constructor(e=.5,t=1,n=8,i=1,s=0,r=Math.PI*2){super(),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:i,thetaStart:s,thetaLength:r},n=Math.max(3,n),i=Math.max(1,i);const o=[],l=[],c=[],h=[];let u=e;const f=(t-e)/i,d=new A,g=new $;for(let m=0;m<=i;m++){for(let p=0;p<=n;p++){const x=s+p/n*r;d.x=u*Math.cos(x),d.y=u*Math.sin(x),l.push(d.x,d.y,d.z),c.push(0,0,1),g.x=(d.x/t+1)/2,g.y=(d.y/t+1)/2,h.push(g.x,g.y)}u+=f}for(let m=0;m<i;m++){const p=m*(n+1);for(let x=0;x<n;x++){const _=x+p,M=_,y=_+n+1,S=_+n+2,T=_+1;o.push(M,y,T),o.push(y,S,T)}}this.setIndex(o),this.setAttribute("position",new L0(l,3)),this.setAttribute("normal",new L0(c,3)),this.setAttribute("uv",new L0(h,2))}static fromJSON(e){return new N7(e.innerRadius,e.outerRadius,e.thetaSegments,e.phiSegments,e.thetaStart,e.thetaLength)}}class z7 extends Z0{constructor(e=new P7([new $(0,.5),new $(-.5,-.5),new $(.5,-.5)]),t=12){super(),this.type="ShapeGeometry",this.parameters={shapes:e,curveSegments:t};const n=[],i=[],s=[],r=[];let o=0,l=0;if(Array.isArray(e)===!1)c(e);else for(let h=0;h<e.length;h++)c(e[h]),this.addGroup(o,l,h),o+=l,l=0;this.setIndex(n),this.setAttribute("position",new L0(i,3)),this.setAttribute("normal",new L0(s,3)),this.setAttribute("uv",new L0(r,2));function c(h){const u=i.length/3,f=h.extractPoints(t);let d=f.shape;const g=f.holes;f2.isClockWise(d)===!1&&(d=d.reverse());for(let p=0,x=g.length;p<x;p++){const _=g[p];f2.isClockWise(_)===!0&&(g[p]=_.reverse())}const m=f2.triangulateShape(d,g);for(let p=0,x=g.length;p<x;p++){const _=g[p];d=d.concat(_)}for(let p=0,x=d.length;p<x;p++){const _=d[p];i.push(_.x,_.y,0),s.push(0,0,1),r.push(_.x,_.y)}for(let p=0,x=m.length;p<x;p++){const _=m[p],M=_[0]+u,y=_[1]+u,S=_[2]+u;n.push(M,y,S),l+=3}}}toJSON(){const e=super.toJSON(),t=this.parameters.shapes;return pa(t,e)}static fromJSON(e,t){const n=[];for(let i=0,s=e.shapes.length;i<s;i++){const r=t[e.shapes[i]];n.push(r)}return new z7(n,e.curveSegments)}}function pa(a,e){if(e.shapes=[],Array.isArray(a))for(let t=0,n=a.length;t<n;t++){const i=a[t];e.shapes.push(i.uuid)}else e.shapes.push(a.uuid);return e}class F7 extends Z0{constructor(e=1,t=32,n=16,i=0,s=Math.PI*2,r=0,o=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:i,phiLength:s,thetaStart:r,thetaLength:o},t=Math.max(3,Math.floor(t)),n=Math.max(2,Math.floor(n));const l=Math.min(r+o,Math.PI);let c=0;const h=[],u=new A,f=new A,d=[],g=[],m=[],p=[];for(let x=0;x<=n;x++){const _=[],M=x/n;let y=0;x==0&&r==0?y=.5/t:x==n&&l==Math.PI&&(y=-.5/t);for(let S=0;S<=t;S++){const T=S/t;u.x=-e*Math.cos(i+T*s)*Math.sin(r+M*o),u.y=e*Math.cos(r+M*o),u.z=e*Math.sin(i+T*s)*Math.sin(r+M*o),g.push(u.x,u.y,u.z),f.copy(u).normalize(),m.push(f.x,f.y,f.z),p.push(T+y,1-M),_.push(c++)}h.push(_)}for(let x=0;x<n;x++)for(let _=0;_<t;_++){const M=h[x][_+1],y=h[x][_],S=h[x+1][_],T=h[x+1][_+1];(x!==0||r>0)&&d.push(M,y,T),(x!==n-1||l<Math.PI)&&d.push(y,S,T)}this.setIndex(d),this.setAttribute("position",new L0(g,3)),this.setAttribute("normal",new L0(m,3)),this.setAttribute("uv",new L0(p,2))}static fromJSON(e){return new F7(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class O7 extends F2{constructor(e=1,t=0){const n=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],i=[2,1,0,0,3,2,1,3,0,2,3,1];super(n,i,e,t),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new O7(e.radius,e.detail)}}class U7 extends Z0{constructor(e=1,t=.4,n=8,i=6,s=Math.PI*2){super(),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:n,tubularSegments:i,arc:s},n=Math.floor(n),i=Math.floor(i);const r=[],o=[],l=[],c=[],h=new A,u=new A,f=new A;for(let d=0;d<=n;d++)for(let g=0;g<=i;g++){const m=g/i*s,p=d/n*Math.PI*2;u.x=(e+t*Math.cos(p))*Math.cos(m),u.y=(e+t*Math.cos(p))*Math.sin(m),u.z=t*Math.sin(p),o.push(u.x,u.y,u.z),h.x=e*Math.cos(m),h.y=e*Math.sin(m),f.subVectors(u,h).normalize(),l.push(f.x,f.y,f.z),c.push(g/i),c.push(d/n)}for(let d=1;d<=n;d++)for(let g=1;g<=i;g++){const m=(i+1)*d+g-1,p=(i+1)*(d-1)+g-1,x=(i+1)*(d-1)+g,_=(i+1)*d+g;r.push(m,p,_),r.push(p,x,_)}this.setIndex(r),this.setAttribute("position",new L0(o,3)),this.setAttribute("normal",new L0(l,3)),this.setAttribute("uv",new L0(c,2))}static fromJSON(e){return new U7(e.radius,e.tube,e.radialSegments,e.tubularSegments,e.arc)}}class B7 extends Z0{constructor(e=1,t=.4,n=64,i=8,s=2,r=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:n,radialSegments:i,p:s,q:r},n=Math.floor(n),i=Math.floor(i);const o=[],l=[],c=[],h=[],u=new A,f=new A,d=new A,g=new A,m=new A,p=new A,x=new A;for(let M=0;M<=n;++M){const y=M/n*s*Math.PI*2;_(y,s,r,e,d),_(y+.01,s,r,e,g),p.subVectors(g,d),x.addVectors(g,d),m.crossVectors(p,x),x.crossVectors(m,p),m.normalize(),x.normalize();for(let S=0;S<=i;++S){const T=S/i*Math.PI*2,L=-t*Math.cos(T),v=t*Math.sin(T);u.x=d.x+(L*x.x+v*m.x),u.y=d.y+(L*x.y+v*m.y),u.z=d.z+(L*x.z+v*m.z),l.push(u.x,u.y,u.z),f.subVectors(u,d).normalize(),c.push(f.x,f.y,f.z),h.push(M/n),h.push(S/i)}}for(let M=1;M<=n;M++)for(let y=1;y<=i;y++){const S=(i+1)*(M-1)+(y-1),T=(i+1)*M+(y-1),L=(i+1)*M+y,v=(i+1)*(M-1)+y;o.push(S,T,v),o.push(T,L,v)}this.setIndex(o),this.setAttribute("position",new L0(l,3)),this.setAttribute("normal",new L0(c,3)),this.setAttribute("uv",new L0(h,2));function _(M,y,S,T,L){const v=Math.cos(M),E=Math.sin(M),P=S/y*M,B=Math.cos(P);L.x=T*(2+B)*.5*v,L.y=T*(2+B)*E*.5,L.z=T*Math.sin(P)*.5}}static fromJSON(e){return new B7(e.radius,e.tube,e.tubularSegments,e.radialSegments,e.p,e.q)}}class k7 extends Z0{constructor(e=new u8(new A(-1,-1,0),new A(-1,1,0),new A(1,1,0)),t=64,n=1,i=8,s=!1){super(),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:t,radius:n,radialSegments:i,closed:s};const r=e.computeFrenetFrames(t,s);this.tangents=r.tangents,this.normals=r.normals,this.binormals=r.binormals;const o=new A,l=new A,c=new $;let h=new A;const u=[],f=[],d=[],g=[];m(),this.setIndex(g),this.setAttribute("position",new L0(u,3)),this.setAttribute("normal",new L0(f,3)),this.setAttribute("uv",new L0(d,2));function m(){for(let M=0;M<t;M++)p(M);p(s===!1?t:0),_(),x()}function p(M){h=e.getPointAt(M/t,h);const y=r.normals[M],S=r.binormals[M];for(let T=0;T<=i;T++){const L=T/i*Math.PI*2,v=Math.sin(L),E=-Math.cos(L);l.x=E*y.x+v*S.x,l.y=E*y.y+v*S.y,l.z=E*y.z+v*S.z,l.normalize(),f.push(l.x,l.y,l.z),o.x=h.x+n*l.x,o.y=h.y+n*l.y,o.z=h.z+n*l.z,u.push(o.x,o.y,o.z)}}function x(){for(let M=1;M<=t;M++)for(let y=1;y<=i;y++){const S=(i+1)*(M-1)+(y-1),T=(i+1)*M+(y-1),L=(i+1)*M+y,v=(i+1)*(M-1)+y;g.push(S,T,v),g.push(T,L,v)}}function _(){for(let M=0;M<=t;M++)for(let y=0;y<=i;y++)c.x=M/t,c.y=y/i,d.push(c.x,c.y)}}toJSON(){const e=super.toJSON();return e.path=this.parameters.path.toJSON(),e}static fromJSON(e){return new k7(new T7[e.path.type]().fromJSON(e.path),e.tubularSegments,e.radius,e.radialSegments,e.closed)}}class ma extends Z0{constructor(e=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:e},e!==null){const t=[],n=new Set,i=new A,s=new A;if(e.index!==null){const r=e.attributes.position,o=e.index;let l=e.groups;l.length===0&&(l=[{start:0,count:o.count,materialIndex:0}]);for(let c=0,h=l.length;c<h;++c){const u=l[c],f=u.start,d=u.count;for(let g=f,m=f+d;g<m;g+=3)for(let p=0;p<3;p++){const x=o.getX(g+p),_=o.getX(g+(p+1)%3);i.fromBufferAttribute(r,x),s.fromBufferAttribute(r,_),wt(i,s,n)===!0&&(t.push(i.x,i.y,i.z),t.push(s.x,s.y,s.z))}}}else{const r=e.attributes.position;for(let o=0,l=r.count/3;o<l;o++)for(let c=0;c<3;c++){const h=3*o+c,u=3*o+(c+1)%3;i.fromBufferAttribute(r,h),s.fromBufferAttribute(r,u),wt(i,s,n)===!0&&(t.push(i.x,i.y,i.z),t.push(s.x,s.y,s.z))}}this.setAttribute("position",new L0(t,3))}}}function wt(a,e,t){const n=`${a.x},${a.y},${a.z}-${e.x},${e.y},${e.z}`,i=`${e.x},${e.y},${e.z}-${a.x},${a.y},${a.z}`;return t.has(n)===!0||t.has(i)===!0?!1:(t.add(n),t.add(i),!0)}var Tt=Object.freeze({__proto__:null,BoxGeometry:z2,CapsuleGeometry:A7,CircleGeometry:E7,ConeGeometry:C7,CylinderGeometry:e4,DodecahedronGeometry:L7,EdgesGeometry:Yr,ExtrudeGeometry:R7,IcosahedronGeometry:D7,LatheGeometry:j3,OctahedronGeometry:I7,PlaneGeometry:K3,PolyhedronGeometry:F2,RingGeometry:N7,ShapeGeometry:z7,SphereGeometry:F7,TetrahedronGeometry:O7,TorusGeometry:U7,TorusKnotGeometry:B7,TubeGeometry:k7,WireframeGeometry:ma});class ga extends g1{constructor(e){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new M0(0),this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.fog=e.fog,this}}class xa extends K1{constructor(e){super(e),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}}class g8 extends g1{constructor(e){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new M0(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new M0(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=D2,this.normalScale=new $(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class _a extends g8{constructor(e){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new $(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return c1(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new M0(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new M0(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new M0(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._iridescence=0,this._transmission=0,this.setValues(e)}get sheen(){return this._sheen}set sheen(e){this._sheen>0!=e>0&&this.version++,this._sheen=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!=e>0&&this.version++,this._clearcoat=e}get iridescence(){return this._iridescence}set iridescence(e){this._iridescence>0!=e>0&&this.version++,this._iridescence=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!=e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.ior=e.ior,this.iridescence=e.iridescence,this.iridescenceMap=e.iridescenceMap,this.iridescenceIOR=e.iridescenceIOR,this.iridescenceThicknessRange=[...e.iridescenceThicknessRange],this.iridescenceThicknessMap=e.iridescenceThicknessMap,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}}class va extends g1{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new M0(16777215),this.specular=new M0(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new M0(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=D2,this.normalScale=new $(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Z3,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class ya extends g1{constructor(e){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new M0(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new M0(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=D2,this.normalScale=new $(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.gradientMap=e.gradientMap,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}class x8 extends g1{constructor(e){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=D2,this.normalScale=new $(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.flatShading=e.flatShading,this}}class Ma extends g1{constructor(e){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new M0(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new M0(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=D2,this.normalScale=new $(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Z3,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class Sa extends g1{constructor(e){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new M0(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=D2,this.normalScale=new $(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.flatShading=e.flatShading,this.fog=e.fog,this}}class ba extends y7{constructor(e){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}copy(e){return super.copy(e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this}}function o2(a,e,t){return _8(a)?new a.constructor(a.subarray(e,t!==void 0?t:a.length)):a.slice(e,t)}function D3(a,e,t){return!a||!t&&a.constructor===e?a:typeof e.BYTES_PER_ELEMENT=="number"?new e(a):Array.prototype.slice.call(a)}function _8(a){return ArrayBuffer.isView(a)&&!(a instanceof DataView)}function wa(a){function e(i,s){return a[i]-a[s]}const t=a.length,n=new Array(t);for(let i=0;i!==t;++i)n[i]=i;return n.sort(e),n}function At(a,e,t){const n=a.length,i=new a.constructor(n);for(let s=0,r=0;r!==n;++s){const o=t[s]*e;for(let l=0;l!==e;++l)i[r++]=a[o+l]}return i}function v8(a,e,t,n){let i=1,s=a[0];for(;s!==void 0&&s[n]===void 0;)s=a[i++];if(s===void 0)return;let r=s[n];if(r!==void 0)if(Array.isArray(r))do r=s[n],r!==void 0&&(e.push(s.time),t.push.apply(t,r)),s=a[i++];while(s!==void 0);else if(r.toArray!==void 0)do r=s[n],r!==void 0&&(e.push(s.time),r.toArray(t,t.length)),s=a[i++];while(s!==void 0);else do r=s[n],r!==void 0&&(e.push(s.time),t.push(r)),s=a[i++];while(s!==void 0)}class n4{constructor(e,t,n,i){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=i!==void 0?i:new t.constructor(n),this.sampleValues=t,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(e){const t=this.parameterPositions;let n=this._cachedIndex,i=t[n],s=t[n-1];n:{e:{let r;t:{i:if(!(e<i)){for(let o=n+2;;){if(i===void 0){if(e<s)break i;return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}if(n===o)break;if(s=i,i=t[++n],e<i)break e}r=t.length;break t}if(!(e>=s)){const o=t[1];e<o&&(n=2,s=o);for(let l=n-2;;){if(s===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(n===l)break;if(i=s,s=t[--n-1],e>=s)break e}r=n,n=0;break t}break n}for(;n<r;){const o=n+r>>>1;e<t[o]?r=o:n=o+1}if(i=t[n],s=t[n-1],s===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(i===void 0)return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}this._cachedIndex=n,this.intervalChanged_(n,s,i)}return this.interpolate_(n,s,e,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,n=this.sampleValues,i=this.valueSize,s=e*i;for(let r=0;r!==i;++r)t[r]=n[s+r];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class Ta extends n4{constructor(e,t,n,i){super(e,t,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:ve,endingEnd:ve}}intervalChanged_(e,t,n){const i=this.parameterPositions;let s=e-2,r=e+1,o=i[s],l=i[r];if(o===void 0)switch(this.getSettings_().endingStart){case ye:s=e,o=2*t-n;break;case Me:s=i.length-2,o=t+i[s]-i[s+1];break;default:s=e,o=n}if(l===void 0)switch(this.getSettings_().endingEnd){case ye:r=e,l=2*n-t;break;case Me:r=1,l=n+i[1]-i[0];break;default:r=e-1,l=t}const c=(n-t)*.5,h=this.valueSize;this._weightPrev=c/(t-o),this._weightNext=c/(l-n),this._offsetPrev=s*h,this._offsetNext=r*h}interpolate_(e,t,n,i){const s=this.resultBuffer,r=this.sampleValues,o=this.valueSize,l=e*o,c=l-o,h=this._offsetPrev,u=this._offsetNext,f=this._weightPrev,d=this._weightNext,g=(n-t)/(i-t),m=g*g,p=m*g,x=-f*p+2*f*m-f*g,_=(1+f)*p+(-1.5-2*f)*m+(-.5+f)*g+1,M=(-1-d)*p+(1.5+d)*m+.5*g,y=d*p-d*m;for(let S=0;S!==o;++S)s[S]=x*r[h+S]+_*r[c+S]+M*r[l+S]+y*r[u+S];return s}}class Aa extends n4{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const s=this.resultBuffer,r=this.sampleValues,o=this.valueSize,l=e*o,c=l-o,h=(n-t)/(i-t),u=1-h;for(let f=0;f!==o;++f)s[f]=r[c+f]*u+r[l+f]*h;return s}}class Ea extends n4{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e){return this.copySampleValue_(e-1)}}class V1{constructor(e,t,n,i){if(e===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===void 0||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=D3(t,this.TimeBufferType),this.values=D3(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(e){const t=e.constructor;let n;if(t.toJSON!==this.toJSON)n=t.toJSON(e);else{n={name:e.name,times:D3(e.times,Array),values:D3(e.values,Array)};const i=e.getInterpolation();i!==e.DefaultInterpolation&&(n.interpolation=i)}return n.type=e.ValueTypeName,n}InterpolantFactoryMethodDiscrete(e){return new Ea(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new Aa(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new Ta(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case V3:t=this.InterpolantFactoryMethodDiscrete;break;case G3:t=this.InterpolantFactoryMethodLinear;break;case f4:t=this.InterpolantFactoryMethodSmooth;break}if(t===void 0){const n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(n);return console.warn("THREE.KeyframeTrack:",n),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return V3;case this.InterpolantFactoryMethodLinear:return G3;case this.InterpolantFactoryMethodSmooth:return f4}}getValueSize(){return this.values.length/this.times.length}shift(e){if(e!==0){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]+=e}return this}scale(e){if(e!==1){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]*=e}return this}trim(e,t){const n=this.times,i=n.length;let s=0,r=i-1;for(;s!==i&&n[s]<e;)++s;for(;r!==-1&&n[r]>t;)--r;if(++r,s!==0||r!==i){s>=r&&(r=Math.max(r,1),s=r-1);const o=this.getValueSize();this.times=o2(n,s,r),this.values=o2(this.values,s*o,r*o)}return this}validate(){let e=!0;const t=this.getValueSize();t-Math.floor(t)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const n=this.times,i=this.values,s=n.length;s===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let r=null;for(let o=0;o!==s;o++){const l=n[o];if(typeof l=="number"&&isNaN(l)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,o,l),e=!1;break}if(r!==null&&r>l){console.error("THREE.KeyframeTrack: Out of order keys.",this,o,l,r),e=!1;break}r=l}if(i!==void 0&&_8(i))for(let o=0,l=i.length;o!==l;++o){const c=i[o];if(isNaN(c)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,o,c),e=!1;break}}return e}optimize(){const e=o2(this.times),t=o2(this.values),n=this.getValueSize(),i=this.getInterpolation()===f4,s=e.length-1;let r=1;for(let o=1;o<s;++o){let l=!1;const c=e[o],h=e[o+1];if(c!==h&&(o!==1||c!==e[0]))if(i)l=!0;else{const u=o*n,f=u-n,d=u+n;for(let g=0;g!==n;++g){const m=t[u+g];if(m!==t[f+g]||m!==t[d+g]){l=!0;break}}}if(l){if(o!==r){e[r]=e[o];const u=o*n,f=r*n;for(let d=0;d!==n;++d)t[f+d]=t[u+d]}++r}}if(s>0){e[r]=e[s];for(let o=s*n,l=r*n,c=0;c!==n;++c)t[l+c]=t[o+c];++r}return r!==e.length?(this.times=o2(e,0,r),this.values=o2(t,0,r*n)):(this.times=e,this.values=t),this}clone(){const e=o2(this.times,0),t=o2(this.values,0),n=this.constructor,i=new n(this.name,e,t);return i.createInterpolant=this.createInterpolant,i}}V1.prototype.TimeBufferType=Float32Array;V1.prototype.ValueBufferType=Float32Array;V1.prototype.DefaultInterpolation=G3;class y5 extends V1{}y5.prototype.ValueTypeName="bool";y5.prototype.ValueBufferType=Array;y5.prototype.DefaultInterpolation=V3;y5.prototype.InterpolantFactoryMethodLinear=void 0;y5.prototype.InterpolantFactoryMethodSmooth=void 0;class y8 extends V1{}y8.prototype.ValueTypeName="color";class H3 extends V1{}H3.prototype.ValueTypeName="number";class Ca extends n4{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const s=this.resultBuffer,r=this.sampleValues,o=this.valueSize,l=(n-t)/(i-t);let c=e*o;for(let h=c+o;c!==h;c+=4)N2.slerpFlat(s,0,r,c-o,r,c,l);return s}}class J5 extends V1{InterpolantFactoryMethodLinear(e){return new Ca(this.times,this.values,this.getValueSize(),e)}}J5.prototype.ValueTypeName="quaternion";J5.prototype.DefaultInterpolation=G3;J5.prototype.InterpolantFactoryMethodSmooth=void 0;class M5 extends V1{}M5.prototype.ValueTypeName="string";M5.prototype.ValueBufferType=Array;M5.prototype.DefaultInterpolation=V3;M5.prototype.InterpolantFactoryMethodLinear=void 0;M5.prototype.InterpolantFactoryMethodSmooth=void 0;class W3 extends V1{}W3.prototype.ValueTypeName="vector";class La{constructor(e,t=-1,n,i=b6){this.name=e,this.tracks=n,this.duration=t,this.blendMode=i,this.uuid=O1(),this.duration<0&&this.resetDuration()}static parse(e){const t=[],n=e.tracks,i=1/(e.fps||1);for(let r=0,o=n.length;r!==o;++r)t.push(Ra(n[r]).scale(i));const s=new this(e.name,e.duration,t,e.blendMode);return s.uuid=e.uuid,s}static toJSON(e){const t=[],n=e.tracks,i={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid,blendMode:e.blendMode};for(let s=0,r=n.length;s!==r;++s)t.push(V1.toJSON(n[s]));return i}static CreateFromMorphTargetSequence(e,t,n,i){const s=t.length,r=[];for(let o=0;o<s;o++){let l=[],c=[];l.push((o+s-1)%s,o,(o+1)%s),c.push(0,1,0);const h=wa(l);l=At(l,1,h),c=At(c,1,h),!i&&l[0]===0&&(l.push(s),c.push(c[0])),r.push(new H3(".morphTargetInfluences["+t[o].name+"]",l,c).scale(1/n))}return new this(e,-1,r)}static findByName(e,t){let n=e;if(!Array.isArray(e)){const i=e;n=i.geometry&&i.geometry.animations||i.animations}for(let i=0;i<n.length;i++)if(n[i].name===t)return n[i];return null}static CreateClipsFromMorphTargetSequences(e,t,n){const i={},s=/^([\w-]*?)([\d]+)$/;for(let o=0,l=e.length;o<l;o++){const c=e[o],h=c.name.match(s);if(h&&h.length>1){const u=h[1];let f=i[u];f||(i[u]=f=[]),f.push(c)}}const r=[];for(const o in i)r.push(this.CreateFromMorphTargetSequence(o,i[o],t,n));return r}static parseAnimation(e,t){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const n=function(u,f,d,g,m){if(d.length!==0){const p=[],x=[];v8(d,p,x,g),p.length!==0&&m.push(new u(f,p,x))}},i=[],s=e.name||"default",r=e.fps||30,o=e.blendMode;let l=e.length||-1;const c=e.hierarchy||[];for(let u=0;u<c.length;u++){const f=c[u].keys;if(!(!f||f.length===0))if(f[0].morphTargets){const d={};let g;for(g=0;g<f.length;g++)if(f[g].morphTargets)for(let m=0;m<f[g].morphTargets.length;m++)d[f[g].morphTargets[m]]=-1;for(const m in d){const p=[],x=[];for(let _=0;_!==f[g].morphTargets.length;++_){const M=f[g];p.push(M.time),x.push(M.morphTarget===m?1:0)}i.push(new H3(".morphTargetInfluence["+m+"]",p,x))}l=d.length*r}else{const d=".bones["+t[u].name+"]";n(W3,d+".position",f,"pos",i),n(J5,d+".quaternion",f,"rot",i),n(W3,d+".scale",f,"scl",i)}}return i.length===0?null:new this(s,l,i,o)}resetDuration(){const e=this.tracks;let t=0;for(let n=0,i=e.length;n!==i;++n){const s=this.tracks[n];t=Math.max(t,s.times[s.times.length-1])}return this.duration=t,this}trim(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this}validate(){let e=!0;for(let t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e}optimize(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}clone(){const e=[];for(let t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new this.constructor(this.name,this.duration,e,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function Pa(a){switch(a.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return H3;case"vector":case"vector2":case"vector3":case"vector4":return W3;case"color":return y8;case"quaternion":return J5;case"bool":case"boolean":return y5;case"string":return M5}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+a)}function Ra(a){if(a.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=Pa(a.type);if(a.times===void 0){const t=[],n=[];v8(a.keys,t,n,"value"),a.times=t,a.values=n}return e.parse!==void 0?e.parse(a):new e(a.name,a.times,a.values,a.interpolation)}const q3={enabled:!1,files:{},add:function(a,e){this.enabled!==!1&&(this.files[a]=e)},get:function(a){if(this.enabled!==!1)return this.files[a]},remove:function(a){delete this.files[a]},clear:function(){this.files={}}};class M8{constructor(e,t,n){const i=this;let s=!1,r=0,o=0,l;const c=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(h){o++,s===!1&&i.onStart!==void 0&&i.onStart(h,r,o),s=!0},this.itemEnd=function(h){r++,i.onProgress!==void 0&&i.onProgress(h,r,o),r===o&&(s=!1,i.onLoad!==void 0&&i.onLoad())},this.itemError=function(h){i.onError!==void 0&&i.onError(h)},this.resolveURL=function(h){return l?l(h):h},this.setURLModifier=function(h){return l=h,this},this.addHandler=function(h,u){return c.push(h,u),this},this.removeHandler=function(h){const u=c.indexOf(h);return u!==-1&&c.splice(u,2),this},this.getHandler=function(h){for(let u=0,f=c.length;u<f;u+=2){const d=c[u],g=c[u+1];if(d.global&&(d.lastIndex=0),d.test(h))return g}return null}}}const Da=new M8;class Y5{constructor(e){this.manager=e!==void 0?e:Da,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise(function(i,s){n.load(e,i,t,s)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}const Y1={};class Ia extends Error{constructor(e,t){super(e),this.response=t}}class X3 extends Y5{constructor(e){super(e)}load(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const s=q3.get(e);if(s!==void 0)return this.manager.itemStart(e),setTimeout(()=>{t&&t(s),this.manager.itemEnd(e)},0),s;if(Y1[e]!==void 0){Y1[e].push({onLoad:t,onProgress:n,onError:i});return}Y1[e]=[],Y1[e].push({onLoad:t,onProgress:n,onError:i});const r=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),o=this.mimeType,l=this.responseType;fetch(r).then(c=>{if(c.status===200||c.status===0){if(c.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream>"u"||c.body===void 0||c.body.getReader===void 0)return c;const h=Y1[e],u=c.body.getReader(),f=c.headers.get("Content-Length"),d=f?parseInt(f):0,g=d!==0;let m=0;const p=new ReadableStream({start(x){_();function _(){u.read().then(({done:M,value:y})=>{if(M)x.close();else{m+=y.byteLength;const S=new ProgressEvent("progress",{lengthComputable:g,loaded:m,total:d});for(let T=0,L=h.length;T<L;T++){const v=h[T];v.onProgress&&v.onProgress(S)}x.enqueue(y),_()}})}}});return new Response(p)}else throw new Ia(`fetch for "${c.url}" responded with ${c.status}: ${c.statusText}`,c)}).then(c=>{switch(l){case"arraybuffer":return c.arrayBuffer();case"blob":return c.blob();case"document":return c.text().then(h=>new DOMParser().parseFromString(h,o));case"json":return c.json();default:if(o===void 0)return c.text();{const u=/charset="?([^;"\s]*)"?/i.exec(o),f=u&&u[1]?u[1].toLowerCase():void 0,d=new TextDecoder(f);return c.arrayBuffer().then(g=>d.decode(g))}}}).then(c=>{q3.add(e,c);const h=Y1[e];delete Y1[e];for(let u=0,f=h.length;u<f;u++){const d=h[u];d.onLoad&&d.onLoad(c)}}).catch(c=>{const h=Y1[e];if(h===void 0)throw this.manager.itemError(e),c;delete Y1[e];for(let u=0,f=h.length;u<f;u++){const d=h[u];d.onError&&d.onError(c)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}class Et extends Y5{constructor(e){super(e)}load(e,t,n,i){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const s=this,r=q3.get(e);if(r!==void 0)return s.manager.itemStart(e),setTimeout(function(){t&&t(r),s.manager.itemEnd(e)},0),r;const o=B5("img");function l(){h(),q3.add(e,this),t&&t(this),s.manager.itemEnd(e)}function c(u){h(),i&&i(u),s.manager.itemError(e),s.manager.itemEnd(e)}function h(){o.removeEventListener("load",l,!1),o.removeEventListener("error",c,!1)}return o.addEventListener("load",l,!1),o.addEventListener("error",c,!1),e.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(o.crossOrigin=this.crossOrigin),s.manager.itemStart(e),o.src=e,o}}class O2 extends X0{constructor(e,t=1){super(),this.isLight=!0,this.type="Light",this.color=new M0(e),this.intensity=t}dispose(){}copy(e,t){return super.copy(e,t),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),t}}class S8 extends O2{constructor(e,t,n){super(e,n),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(X0.DefaultUp),this.updateMatrix(),this.groundColor=new M0(t)}copy(e,t){return super.copy(e,t),this.groundColor.copy(e.groundColor),this}}const X4=new O0,Ct=new A,Lt=new A;class V7{constructor(e){this.camera=e,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new $(512,512),this.map=null,this.mapPass=null,this.matrix=new O0,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new p7,this._frameExtents=new $(1,1),this._viewportCount=1,this._viewports=[new H0(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,n=this.matrix;Ct.setFromMatrixPosition(e.matrixWorld),t.position.copy(Ct),Lt.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(Lt),t.updateMatrixWorld(),X4.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(X4),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(X4)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};return this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class Na extends V7{constructor(){super(new p1(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(e){const t=this.camera,n=e7*2*e.angle*this.focus,i=this.mapSize.width/this.mapSize.height,s=e.distance||t.far;(n!==t.fov||i!==t.aspect||s!==t.far)&&(t.fov=n,t.aspect=i,t.far=s,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}class za extends O2{constructor(e,t,n=0,i=Math.PI/3,s=0,r=1){super(e,t),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(X0.DefaultUp),this.updateMatrix(),this.target=new X0,this.distance=n,this.angle=i,this.penumbra=s,this.decay=r,this.map=null,this.shadow=new Na}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}const Pt=new O0,P5=new A,J4=new A;class Fa extends V7{constructor(){super(new p1(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new $(4,2),this._viewportCount=6,this._viewports=[new H0(2,1,1,1),new H0(0,1,1,1),new H0(3,1,1,1),new H0(1,1,1,1),new H0(3,0,1,1),new H0(1,0,1,1)],this._cubeDirections=[new A(1,0,0),new A(-1,0,0),new A(0,0,1),new A(0,0,-1),new A(0,1,0),new A(0,-1,0)],this._cubeUps=[new A(0,1,0),new A(0,1,0),new A(0,1,0),new A(0,1,0),new A(0,0,1),new A(0,0,-1)]}updateMatrices(e,t=0){const n=this.camera,i=this.matrix,s=e.distance||n.far;s!==n.far&&(n.far=s,n.updateProjectionMatrix()),P5.setFromMatrixPosition(e.matrixWorld),n.position.copy(P5),J4.copy(n.position),J4.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(J4),n.updateMatrixWorld(),i.makeTranslation(-P5.x,-P5.y,-P5.z),Pt.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Pt)}}class Oa extends O2{constructor(e,t,n=0,i=1){super(e,t),this.isPointLight=!0,this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new Fa}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}class Ua extends V7{constructor(){super(new m7(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class b8 extends O2{constructor(e,t){super(e,t),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(X0.DefaultUp),this.updateMatrix(),this.target=new X0,this.shadow=new Ua}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}class Ba extends O2{constructor(e,t){super(e,t),this.isAmbientLight=!0,this.type="AmbientLight"}}class ka extends O2{constructor(e,t,n=10,i=10){super(e,t),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=n,this.height=i}get power(){return this.intensity*this.width*this.height*Math.PI}set power(e){this.intensity=e/(this.width*this.height*Math.PI)}copy(e){return super.copy(e),this.width=e.width,this.height=e.height,this}toJSON(e){const t=super.toJSON(e);return t.object.width=this.width,t.object.height=this.height,t}}class Va{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let e=0;e<9;e++)this.coefficients.push(new A)}set(e){for(let t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this}zero(){for(let e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this}getAt(e,t){const n=e.x,i=e.y,s=e.z,r=this.coefficients;return t.copy(r[0]).multiplyScalar(.282095),t.addScaledVector(r[1],.488603*i),t.addScaledVector(r[2],.488603*s),t.addScaledVector(r[3],.488603*n),t.addScaledVector(r[4],1.092548*(n*i)),t.addScaledVector(r[5],1.092548*(i*s)),t.addScaledVector(r[6],.315392*(3*s*s-1)),t.addScaledVector(r[7],1.092548*(n*s)),t.addScaledVector(r[8],.546274*(n*n-i*i)),t}getIrradianceAt(e,t){const n=e.x,i=e.y,s=e.z,r=this.coefficients;return t.copy(r[0]).multiplyScalar(.886227),t.addScaledVector(r[1],2*.511664*i),t.addScaledVector(r[2],2*.511664*s),t.addScaledVector(r[3],2*.511664*n),t.addScaledVector(r[4],2*.429043*n*i),t.addScaledVector(r[5],2*.429043*i*s),t.addScaledVector(r[6],.743125*s*s-.247708),t.addScaledVector(r[7],2*.429043*n*s),t.addScaledVector(r[8],.429043*(n*n-i*i)),t}add(e){for(let t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this}addScaledSH(e,t){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(e.coefficients[n],t);return this}scale(e){for(let t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this}lerp(e,t){for(let n=0;n<9;n++)this.coefficients[n].lerp(e.coefficients[n],t);return this}equals(e){for(let t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0}copy(e){return this.set(e.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(e,t=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(e,t+i*3);return this}toArray(e=[],t=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(e,t+i*3);return e}static getBasisAt(e,t){const n=e.x,i=e.y,s=e.z;t[0]=.282095,t[1]=.488603*i,t[2]=.488603*s,t[3]=.488603*n,t[4]=1.092548*n*i,t[5]=1.092548*i*s,t[6]=.315392*(3*s*s-1),t[7]=1.092548*n*s,t[8]=.546274*(n*n-i*i)}}class Ga extends O2{constructor(e=new Va,t=1){super(void 0,t),this.isLightProbe=!0,this.sh=e}copy(e){return super.copy(e),this.sh.copy(e.sh),this}fromJSON(e){return this.intensity=e.intensity,this.sh.fromArray(e.sh),this}toJSON(e){const t=super.toJSON(e);return t.object.sh=this.sh.toArray(),t}}class G7 extends Y5{constructor(e){super(e),this.textures={}}load(e,t,n,i){const s=this,r=new X3(s.manager);r.setPath(s.path),r.setRequestHeader(s.requestHeader),r.setWithCredentials(s.withCredentials),r.load(e,function(o){try{t(s.parse(JSON.parse(o)))}catch(l){i?i(l):console.error(l),s.manager.itemError(e)}},n,i)}parse(e){const t=this.textures;function n(s){return t[s]===void 0&&console.warn("THREE.MaterialLoader: Undefined texture",s),t[s]}const i=G7.createMaterialFromType(e.type);if(e.uuid!==void 0&&(i.uuid=e.uuid),e.name!==void 0&&(i.name=e.name),e.color!==void 0&&i.color!==void 0&&i.color.setHex(e.color),e.roughness!==void 0&&(i.roughness=e.roughness),e.metalness!==void 0&&(i.metalness=e.metalness),e.sheen!==void 0&&(i.sheen=e.sheen),e.sheenColor!==void 0&&(i.sheenColor=new M0().setHex(e.sheenColor)),e.sheenRoughness!==void 0&&(i.sheenRoughness=e.sheenRoughness),e.emissive!==void 0&&i.emissive!==void 0&&i.emissive.setHex(e.emissive),e.specular!==void 0&&i.specular!==void 0&&i.specular.setHex(e.specular),e.specularIntensity!==void 0&&(i.specularIntensity=e.specularIntensity),e.specularColor!==void 0&&i.specularColor!==void 0&&i.specularColor.setHex(e.specularColor),e.shininess!==void 0&&(i.shininess=e.shininess),e.clearcoat!==void 0&&(i.clearcoat=e.clearcoat),e.clearcoatRoughness!==void 0&&(i.clearcoatRoughness=e.clearcoatRoughness),e.iridescence!==void 0&&(i.iridescence=e.iridescence),e.iridescenceIOR!==void 0&&(i.iridescenceIOR=e.iridescenceIOR),e.iridescenceThicknessRange!==void 0&&(i.iridescenceThicknessRange=e.iridescenceThicknessRange),e.transmission!==void 0&&(i.transmission=e.transmission),e.thickness!==void 0&&(i.thickness=e.thickness),e.attenuationDistance!==void 0&&(i.attenuationDistance=e.attenuationDistance),e.attenuationColor!==void 0&&i.attenuationColor!==void 0&&i.attenuationColor.setHex(e.attenuationColor),e.fog!==void 0&&(i.fog=e.fog),e.flatShading!==void 0&&(i.flatShading=e.flatShading),e.blending!==void 0&&(i.blending=e.blending),e.combine!==void 0&&(i.combine=e.combine),e.side!==void 0&&(i.side=e.side),e.shadowSide!==void 0&&(i.shadowSide=e.shadowSide),e.opacity!==void 0&&(i.opacity=e.opacity),e.transparent!==void 0&&(i.transparent=e.transparent),e.alphaTest!==void 0&&(i.alphaTest=e.alphaTest),e.depthTest!==void 0&&(i.depthTest=e.depthTest),e.depthWrite!==void 0&&(i.depthWrite=e.depthWrite),e.colorWrite!==void 0&&(i.colorWrite=e.colorWrite),e.stencilWrite!==void 0&&(i.stencilWrite=e.stencilWrite),e.stencilWriteMask!==void 0&&(i.stencilWriteMask=e.stencilWriteMask),e.stencilFunc!==void 0&&(i.stencilFunc=e.stencilFunc),e.stencilRef!==void 0&&(i.stencilRef=e.stencilRef),e.stencilFuncMask!==void 0&&(i.stencilFuncMask=e.stencilFuncMask),e.stencilFail!==void 0&&(i.stencilFail=e.stencilFail),e.stencilZFail!==void 0&&(i.stencilZFail=e.stencilZFail),e.stencilZPass!==void 0&&(i.stencilZPass=e.stencilZPass),e.wireframe!==void 0&&(i.wireframe=e.wireframe),e.wireframeLinewidth!==void 0&&(i.wireframeLinewidth=e.wireframeLinewidth),e.wireframeLinecap!==void 0&&(i.wireframeLinecap=e.wireframeLinecap),e.wireframeLinejoin!==void 0&&(i.wireframeLinejoin=e.wireframeLinejoin),e.rotation!==void 0&&(i.rotation=e.rotation),e.linewidth!==1&&(i.linewidth=e.linewidth),e.dashSize!==void 0&&(i.dashSize=e.dashSize),e.gapSize!==void 0&&(i.gapSize=e.gapSize),e.scale!==void 0&&(i.scale=e.scale),e.polygonOffset!==void 0&&(i.polygonOffset=e.polygonOffset),e.polygonOffsetFactor!==void 0&&(i.polygonOffsetFactor=e.polygonOffsetFactor),e.polygonOffsetUnits!==void 0&&(i.polygonOffsetUnits=e.polygonOffsetUnits),e.dithering!==void 0&&(i.dithering=e.dithering),e.alphaToCoverage!==void 0&&(i.alphaToCoverage=e.alphaToCoverage),e.premultipliedAlpha!==void 0&&(i.premultipliedAlpha=e.premultipliedAlpha),e.visible!==void 0&&(i.visible=e.visible),e.toneMapped!==void 0&&(i.toneMapped=e.toneMapped),e.userData!==void 0&&(i.userData=e.userData),e.vertexColors!==void 0&&(typeof e.vertexColors=="number"?i.vertexColors=e.vertexColors>0:i.vertexColors=e.vertexColors),e.uniforms!==void 0)for(const s in e.uniforms){const r=e.uniforms[s];switch(i.uniforms[s]={},r.type){case"t":i.uniforms[s].value=n(r.value);break;case"c":i.uniforms[s].value=new M0().setHex(r.value);break;case"v2":i.uniforms[s].value=new $().fromArray(r.value);break;case"v3":i.uniforms[s].value=new A().fromArray(r.value);break;case"v4":i.uniforms[s].value=new H0().fromArray(r.value);break;case"m3":i.uniforms[s].value=new M1().fromArray(r.value);break;case"m4":i.uniforms[s].value=new O0().fromArray(r.value);break;default:i.uniforms[s].value=r.value}}if(e.defines!==void 0&&(i.defines=e.defines),e.vertexShader!==void 0&&(i.vertexShader=e.vertexShader),e.fragmentShader!==void 0&&(i.fragmentShader=e.fragmentShader),e.glslVersion!==void 0&&(i.glslVersion=e.glslVersion),e.extensions!==void 0)for(const s in e.extensions)i.extensions[s]=e.extensions[s];if(e.size!==void 0&&(i.size=e.size),e.sizeAttenuation!==void 0&&(i.sizeAttenuation=e.sizeAttenuation),e.map!==void 0&&(i.map=n(e.map)),e.matcap!==void 0&&(i.matcap=n(e.matcap)),e.alphaMap!==void 0&&(i.alphaMap=n(e.alphaMap)),e.bumpMap!==void 0&&(i.bumpMap=n(e.bumpMap)),e.bumpScale!==void 0&&(i.bumpScale=e.bumpScale),e.normalMap!==void 0&&(i.normalMap=n(e.normalMap)),e.normalMapType!==void 0&&(i.normalMapType=e.normalMapType),e.normalScale!==void 0){let s=e.normalScale;Array.isArray(s)===!1&&(s=[s,s]),i.normalScale=new $().fromArray(s)}return e.displacementMap!==void 0&&(i.displacementMap=n(e.displacementMap)),e.displacementScale!==void 0&&(i.displacementScale=e.displacementScale),e.displacementBias!==void 0&&(i.displacementBias=e.displacementBias),e.roughnessMap!==void 0&&(i.roughnessMap=n(e.roughnessMap)),e.metalnessMap!==void 0&&(i.metalnessMap=n(e.metalnessMap)),e.emissiveMap!==void 0&&(i.emissiveMap=n(e.emissiveMap)),e.emissiveIntensity!==void 0&&(i.emissiveIntensity=e.emissiveIntensity),e.specularMap!==void 0&&(i.specularMap=n(e.specularMap)),e.specularIntensityMap!==void 0&&(i.specularIntensityMap=n(e.specularIntensityMap)),e.specularColorMap!==void 0&&(i.specularColorMap=n(e.specularColorMap)),e.envMap!==void 0&&(i.envMap=n(e.envMap)),e.envMapIntensity!==void 0&&(i.envMapIntensity=e.envMapIntensity),e.reflectivity!==void 0&&(i.reflectivity=e.reflectivity),e.refractionRatio!==void 0&&(i.refractionRatio=e.refractionRatio),e.lightMap!==void 0&&(i.lightMap=n(e.lightMap)),e.lightMapIntensity!==void 0&&(i.lightMapIntensity=e.lightMapIntensity),e.aoMap!==void 0&&(i.aoMap=n(e.aoMap)),e.aoMapIntensity!==void 0&&(i.aoMapIntensity=e.aoMapIntensity),e.gradientMap!==void 0&&(i.gradientMap=n(e.gradientMap)),e.clearcoatMap!==void 0&&(i.clearcoatMap=n(e.clearcoatMap)),e.clearcoatRoughnessMap!==void 0&&(i.clearcoatRoughnessMap=n(e.clearcoatRoughnessMap)),e.clearcoatNormalMap!==void 0&&(i.clearcoatNormalMap=n(e.clearcoatNormalMap)),e.clearcoatNormalScale!==void 0&&(i.clearcoatNormalScale=new $().fromArray(e.clearcoatNormalScale)),e.iridescenceMap!==void 0&&(i.iridescenceMap=n(e.iridescenceMap)),e.iridescenceThicknessMap!==void 0&&(i.iridescenceThicknessMap=n(e.iridescenceThicknessMap)),e.transmissionMap!==void 0&&(i.transmissionMap=n(e.transmissionMap)),e.thicknessMap!==void 0&&(i.thicknessMap=n(e.thicknessMap)),e.sheenColorMap!==void 0&&(i.sheenColorMap=n(e.sheenColorMap)),e.sheenRoughnessMap!==void 0&&(i.sheenRoughnessMap=n(e.sheenRoughnessMap)),i}setTextures(e){return this.textures=e,this}static createMaterialFromType(e){const t={ShadowMaterial:ga,SpriteMaterial:r8,RawShaderMaterial:xa,ShaderMaterial:K1,PointsMaterial:l8,MeshPhysicalMaterial:_a,MeshStandardMaterial:g8,MeshPhongMaterial:va,MeshToonMaterial:ya,MeshNormalMaterial:x8,MeshLambertMaterial:Ma,MeshDepthMaterial:e8,MeshDistanceMaterial:t8,MeshBasicMaterial:f7,MeshMatcapMaterial:Sa,LineDashedMaterial:ba,LineBasicMaterial:y7,Material:g1};return new t[e]}}class Rt{static decodeText(e){if(typeof TextDecoder<"u")return new TextDecoder().decode(e);let t="";for(let n=0,i=e.length;n<i;n++)t+=String.fromCharCode(e[n]);try{return decodeURIComponent(escape(t))}catch{return t}}static extractUrlBase(e){const t=e.lastIndexOf("/");return t===-1?"./":e.slice(0,t+1)}static resolveURL(e,t){return typeof e!="string"||e===""?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}}class Ha extends Z0{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(e){return super.copy(e),this.instanceCount=e.instanceCount,this}clone(){return new this.constructor().copy(this)}toJSON(){const e=super.toJSON(this);return e.instanceCount=this.instanceCount,e.isInstancedBufferGeometry=!0,e}}class Wa extends Y5{constructor(e){super(e)}load(e,t,n,i){const s=this,r=new X3(s.manager);r.setPath(s.path),r.setRequestHeader(s.requestHeader),r.setWithCredentials(s.withCredentials),r.load(e,function(o){try{t(s.parse(JSON.parse(o)))}catch(l){i?i(l):console.error(l),s.manager.itemError(e)}},n,i)}parse(e){const t={},n={};function i(d,g){if(t[g]!==void 0)return t[g];const p=d.interleavedBuffers[g],x=s(d,p.buffer),_=o5(p.type,x),M=new s8(_,p.stride);return M.uuid=p.uuid,t[g]=M,M}function s(d,g){if(n[g]!==void 0)return n[g];const p=d.arrayBuffers[g],x=new Uint32Array(p).buffer;return n[g]=x,x}const r=e.isInstancedBufferGeometry?new Ha:new Z0,o=e.data.index;if(o!==void 0){const d=o5(o.type,o.array);r.setIndex(new m1(d,1))}const l=e.data.attributes;for(const d in l){const g=l[d];let m;if(g.isInterleavedBufferAttribute){const p=i(e.data,g.data);m=new g5(p,g.itemSize,g.offset,g.normalized)}else{const p=o5(g.type,g.array),x=g.isInstancedBufferAttribute?k5:m1;m=new x(p,g.itemSize,g.normalized)}g.name!==void 0&&(m.name=g.name),g.usage!==void 0&&m.setUsage(g.usage),g.updateRange!==void 0&&(m.updateRange.offset=g.updateRange.offset,m.updateRange.count=g.updateRange.count),r.setAttribute(d,m)}const c=e.data.morphAttributes;if(c)for(const d in c){const g=c[d],m=[];for(let p=0,x=g.length;p<x;p++){const _=g[p];let M;if(_.isInterleavedBufferAttribute){const y=i(e.data,_.data);M=new g5(y,_.itemSize,_.offset,_.normalized)}else{const y=o5(_.type,_.array);M=new m1(y,_.itemSize,_.normalized)}_.name!==void 0&&(M.name=_.name),m.push(M)}r.morphAttributes[d]=m}e.data.morphTargetsRelative&&(r.morphTargetsRelative=!0);const u=e.data.groups||e.data.drawcalls||e.data.offsets;if(u!==void 0)for(let d=0,g=u.length;d!==g;++d){const m=u[d];r.addGroup(m.start,m.count,m.materialIndex)}const f=e.data.boundingSphere;if(f!==void 0){const d=new A;f.center!==void 0&&d.fromArray(f.center),r.boundingSphere=new x5(d,f.radius)}return e.name&&(r.name=e.name),e.userData&&(r.userData=e.userData),r}}class qa extends Y5{constructor(e){super(e)}load(e,t,n,i){const s=this,r=this.path===""?Rt.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||r;const o=new X3(this.manager);o.setPath(this.path),o.setRequestHeader(this.requestHeader),o.setWithCredentials(this.withCredentials),o.load(e,function(l){let c=null;try{c=JSON.parse(l)}catch(u){i!==void 0&&i(u),console.error("THREE:ObjectLoader: Can't parse "+e+".",u.message);return}const h=c.metadata;if(h===void 0||h.type===void 0||h.type.toLowerCase()==="geometry"){console.error("THREE.ObjectLoader: Can't load "+e);return}s.parse(c,t)},n,i)}async loadAsync(e,t){const n=this,i=this.path===""?Rt.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||i;const s=new X3(this.manager);s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials);const r=await s.loadAsync(e,t),o=JSON.parse(r),l=o.metadata;if(l===void 0||l.type===void 0||l.type.toLowerCase()==="geometry")throw new Error("THREE.ObjectLoader: Can't load "+e);return await n.parseAsync(o)}parse(e,t){const n=this.parseAnimations(e.animations),i=this.parseShapes(e.shapes),s=this.parseGeometries(e.geometries,i),r=this.parseImages(e.images,function(){t!==void 0&&t(c)}),o=this.parseTextures(e.textures,r),l=this.parseMaterials(e.materials,o),c=this.parseObject(e.object,s,l,o,n),h=this.parseSkeletons(e.skeletons,c);if(this.bindSkeletons(c,h),t!==void 0){let u=!1;for(const f in r)if(r[f].data instanceof HTMLImageElement){u=!0;break}u===!1&&t(c)}return c}async parseAsync(e){const t=this.parseAnimations(e.animations),n=this.parseShapes(e.shapes),i=this.parseGeometries(e.geometries,n),s=await this.parseImagesAsync(e.images),r=this.parseTextures(e.textures,s),o=this.parseMaterials(e.materials,r),l=this.parseObject(e.object,i,o,r,t),c=this.parseSkeletons(e.skeletons,l);return this.bindSkeletons(l,c),l}parseShapes(e){const t={};if(e!==void 0)for(let n=0,i=e.length;n<i;n++){const s=new P7().fromJSON(e[n]);t[s.uuid]=s}return t}parseSkeletons(e,t){const n={},i={};if(t.traverse(function(s){s.isBone&&(i[s.uuid]=s)}),e!==void 0)for(let s=0,r=e.length;s<r;s++){const o=new v7().fromJSON(e[s],i);n[o.uuid]=o}return n}parseGeometries(e,t){const n={};if(e!==void 0){const i=new Wa;for(let s=0,r=e.length;s<r;s++){let o;const l=e[s];switch(l.type){case"BufferGeometry":case"InstancedBufferGeometry":o=i.parse(l);break;default:l.type in Tt?o=Tt[l.type].fromJSON(l,t):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${l.type}"`)}o.uuid=l.uuid,l.name!==void 0&&(o.name=l.name),o.isBufferGeometry===!0&&l.userData!==void 0&&(o.userData=l.userData),n[l.uuid]=o}}return n}parseMaterials(e,t){const n={},i={};if(e!==void 0){const s=new G7;s.setTextures(t);for(let r=0,o=e.length;r<o;r++){const l=e[r];n[l.uuid]===void 0&&(n[l.uuid]=s.parse(l)),i[l.uuid]=n[l.uuid]}}return i}parseAnimations(e){const t={};if(e!==void 0)for(let n=0;n<e.length;n++){const i=e[n],s=La.parse(i);t[s.uuid]=s}return t}parseImages(e,t){const n=this,i={};let s;function r(l){return n.manager.itemStart(l),s.load(l,function(){n.manager.itemEnd(l)},void 0,function(){n.manager.itemError(l),n.manager.itemEnd(l)})}function o(l){if(typeof l=="string"){const c=l,h=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(c)?c:n.resourcePath+c;return r(h)}else return l.data?{data:o5(l.type,l.data),width:l.width,height:l.height}:null}if(e!==void 0&&e.length>0){const l=new M8(t);s=new Et(l),s.setCrossOrigin(this.crossOrigin);for(let c=0,h=e.length;c<h;c++){const u=e[c],f=u.url;if(Array.isArray(f)){const d=[];for(let g=0,m=f.length;g<m;g++){const p=f[g],x=o(p);x!==null&&(x instanceof HTMLImageElement?d.push(x):d.push(new F3(x.data,x.width,x.height)))}i[u.uuid]=new l5(d)}else{const d=o(u.url);i[u.uuid]=new l5(d)}}}return i}async parseImagesAsync(e){const t=this,n={};let i;async function s(r){if(typeof r=="string"){const o=r,l=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(o)?o:t.resourcePath+o;return await i.loadAsync(l)}else return r.data?{data:o5(r.type,r.data),width:r.width,height:r.height}:null}if(e!==void 0&&e.length>0){i=new Et(this.manager),i.setCrossOrigin(this.crossOrigin);for(let r=0,o=e.length;r<o;r++){const l=e[r],c=l.url;if(Array.isArray(c)){const h=[];for(let u=0,f=c.length;u<f;u++){const d=c[u],g=await s(d);g!==null&&(g instanceof HTMLImageElement?h.push(g):h.push(new F3(g.data,g.width,g.height)))}n[l.uuid]=new l5(h)}else{const h=await s(l.url);n[l.uuid]=new l5(h)}}}return n}parseTextures(e,t){function n(s,r){return typeof s=="number"?s:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",s),r[s])}const i={};if(e!==void 0)for(let s=0,r=e.length;s<r;s++){const o=e[s];o.image===void 0&&console.warn('THREE.ObjectLoader: No "image" specified for',o.uuid),t[o.image]===void 0&&console.warn("THREE.ObjectLoader: Undefined image",o.image);const l=t[o.image],c=l.data;let h;Array.isArray(c)?(h=new d7,c.length===6&&(h.needsUpdate=!0)):(c&&c.data?h=new F3:h=new b1,c&&(h.needsUpdate=!0)),h.source=l,h.uuid=o.uuid,o.name!==void 0&&(h.name=o.name),o.mapping!==void 0&&(h.mapping=n(o.mapping,Xa)),o.offset!==void 0&&h.offset.fromArray(o.offset),o.repeat!==void 0&&h.repeat.fromArray(o.repeat),o.center!==void 0&&h.center.fromArray(o.center),o.rotation!==void 0&&(h.rotation=o.rotation),o.wrap!==void 0&&(h.wrapS=n(o.wrap[0],Dt),h.wrapT=n(o.wrap[1],Dt)),o.format!==void 0&&(h.format=o.format),o.type!==void 0&&(h.type=o.type),o.encoding!==void 0&&(h.encoding=o.encoding),o.minFilter!==void 0&&(h.minFilter=n(o.minFilter,It)),o.magFilter!==void 0&&(h.magFilter=n(o.magFilter,It)),o.anisotropy!==void 0&&(h.anisotropy=o.anisotropy),o.flipY!==void 0&&(h.flipY=o.flipY),o.premultiplyAlpha!==void 0&&(h.premultiplyAlpha=o.premultiplyAlpha),o.unpackAlignment!==void 0&&(h.unpackAlignment=o.unpackAlignment),o.userData!==void 0&&(h.userData=o.userData),i[o.uuid]=h}return i}parseObject(e,t,n,i,s){let r;function o(f){return t[f]===void 0&&console.warn("THREE.ObjectLoader: Undefined geometry",f),t[f]}function l(f){if(f!==void 0){if(Array.isArray(f)){const d=[];for(let g=0,m=f.length;g<m;g++){const p=f[g];n[p]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",p),d.push(n[p])}return d}return n[f]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",f),n[f]}}function c(f){return i[f]===void 0&&console.warn("THREE.ObjectLoader: Undefined texture",f),i[f]}let h,u;switch(e.type){case"Scene":r=new i8,e.background!==void 0&&(Number.isInteger(e.background)?r.background=new M0(e.background):r.background=c(e.background)),e.environment!==void 0&&(r.environment=c(e.environment)),e.fog!==void 0&&(e.fog.type==="Fog"?r.fog=new _7(e.fog.color,e.fog.near,e.fog.far):e.fog.type==="FogExp2"&&(r.fog=new x7(e.fog.color,e.fog.density)));break;case"PerspectiveCamera":r=new p1(e.fov,e.aspect,e.near,e.far),e.focus!==void 0&&(r.focus=e.focus),e.zoom!==void 0&&(r.zoom=e.zoom),e.filmGauge!==void 0&&(r.filmGauge=e.filmGauge),e.filmOffset!==void 0&&(r.filmOffset=e.filmOffset),e.view!==void 0&&(r.view=Object.assign({},e.view));break;case"OrthographicCamera":r=new m7(e.left,e.right,e.top,e.bottom,e.near,e.far),e.zoom!==void 0&&(r.zoom=e.zoom),e.view!==void 0&&(r.view=Object.assign({},e.view));break;case"AmbientLight":r=new Ba(e.color,e.intensity);break;case"DirectionalLight":r=new b8(e.color,e.intensity);break;case"PointLight":r=new Oa(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":r=new ka(e.color,e.intensity,e.width,e.height);break;case"SpotLight":r=new za(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case"HemisphereLight":r=new S8(e.color,e.groundColor,e.intensity);break;case"LightProbe":r=new Ga().fromJSON(e);break;case"SkinnedMesh":h=o(e.geometry),u=l(e.material),r=new Pr(h,u),e.bindMode!==void 0&&(r.bindMode=e.bindMode),e.bindMatrix!==void 0&&r.bindMatrix.fromArray(e.bindMatrix),e.skeleton!==void 0&&(r.skeleton=e.skeleton);break;case"Mesh":h=o(e.geometry),u=l(e.material),r=new S1(h,u);break;case"InstancedMesh":h=o(e.geometry),u=l(e.material);const f=e.count,d=e.instanceMatrix,g=e.instanceColor;r=new Dr(h,u,f),r.instanceMatrix=new k5(new Float32Array(d.array),16),g!==void 0&&(r.instanceColor=new k5(new Float32Array(g.array),g.itemSize));break;case"LOD":r=new Cr;break;case"Line":r=new M7(o(e.geometry),l(e.material));break;case"LineLoop":r=new Nr(o(e.geometry),l(e.material));break;case"LineSegments":r=new Ir(o(e.geometry),l(e.material));break;case"PointCloud":case"Points":r=new zr(o(e.geometry),l(e.material));break;case"Sprite":r=new Er(l(e.material));break;case"Group":r=new I5;break;case"Bone":r=new o8;break;default:r=new X0}if(r.uuid=e.uuid,e.name!==void 0&&(r.name=e.name),e.matrix!==void 0?(r.matrix.fromArray(e.matrix),e.matrixAutoUpdate!==void 0&&(r.matrixAutoUpdate=e.matrixAutoUpdate),r.matrixAutoUpdate&&r.matrix.decompose(r.position,r.quaternion,r.scale)):(e.position!==void 0&&r.position.fromArray(e.position),e.rotation!==void 0&&r.rotation.fromArray(e.rotation),e.quaternion!==void 0&&r.quaternion.fromArray(e.quaternion),e.scale!==void 0&&r.scale.fromArray(e.scale)),e.castShadow!==void 0&&(r.castShadow=e.castShadow),e.receiveShadow!==void 0&&(r.receiveShadow=e.receiveShadow),e.shadow&&(e.shadow.bias!==void 0&&(r.shadow.bias=e.shadow.bias),e.shadow.normalBias!==void 0&&(r.shadow.normalBias=e.shadow.normalBias),e.shadow.radius!==void 0&&(r.shadow.radius=e.shadow.radius),e.shadow.mapSize!==void 0&&r.shadow.mapSize.fromArray(e.shadow.mapSize),e.shadow.camera!==void 0&&(r.shadow.camera=this.parseObject(e.shadow.camera))),e.visible!==void 0&&(r.visible=e.visible),e.frustumCulled!==void 0&&(r.frustumCulled=e.frustumCulled),e.renderOrder!==void 0&&(r.renderOrder=e.renderOrder),e.userData!==void 0&&(r.userData=e.userData),e.layers!==void 0&&(r.layers.mask=e.layers),e.children!==void 0){const f=e.children;for(let d=0;d<f.length;d++)r.add(this.parseObject(f[d],t,n,i,s))}if(e.animations!==void 0){const f=e.animations;for(let d=0;d<f.length;d++){const g=f[d];r.animations.push(s[g])}}if(e.type==="LOD"){e.autoUpdate!==void 0&&(r.autoUpdate=e.autoUpdate);const f=e.levels;for(let d=0;d<f.length;d++){const g=f[d],m=r.getObjectByProperty("uuid",g.object);m!==void 0&&r.addLevel(m,g.distance)}}return r}bindSkeletons(e,t){Object.keys(t).length!==0&&e.traverse(function(n){if(n.isSkinnedMesh===!0&&n.skeleton!==void 0){const i=t[n.skeleton];i===void 0?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",n.skeleton):n.bind(i,n.bindMatrix)}})}}const Xa={UVMapping:h7,CubeReflectionMapping:A2,CubeRefractionMapping:E2,EquirectangularReflectionMapping:O3,EquirectangularRefractionMapping:U3,CubeUVReflectionMapping:W5},Dt={RepeatWrapping:B3,ClampToEdgeWrapping:E1,MirroredRepeatWrapping:k3},It={NearestFilter:l1,NearestMipmapNearestFilter:$4,NearestMipmapLinearFilter:K4,LinearFilter:y1,LinearMipmapNearestFilter:kt,LinearMipmapLinearFilter:q5};class Ja{constructor(e,t,n=0,i=1/0){this.ray=new $3(e,t),this.near=n,this.far=i,this.camera=null,this.layers=new u7,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,t){this.ray.set(e,t)}setFromCamera(e,t){t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}intersectObject(e,t=!0,n=[]){return o7(e,this,n,t),n.sort(Nt),n}intersectObjects(e,t=!0,n=[]){for(let i=0,s=e.length;i<s;i++)o7(e[i],this,n,t);return n.sort(Nt),n}}function Nt(a,e){return a.distance-e.distance}function o7(a,e,t,n){if(a.layers.test(e.layers)&&a.raycast(e,t),n===!0){const i=a.children;for(let s=0,r=i.length;s<r;s++)o7(i[s],e,t,!0)}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:c7}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=c7);new _5(0,0,0,"YXZ");const r5=new A,Ya={type:"change"},Za={type:"lock"},$a={type:"unlock"};class Ka extends I2{constructor(e,t,n){super(),this.domElement=n,this.isLocked=!1,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.currentPolarAngle=Math.PI/2,this.pointerSpeed=1;const i=this;function s(l){if(i.isLocked===!1)return;const c=l.movementX||l.mozMovementX||l.webkitMovementX||0,h=l.movementY||l.mozMovementY||l.webkitMovementY||0;e.rotateOnWorldAxis(e.up,-c*.002*i.pointerSpeed),t.rotateOnWorldAxis(e.up,-c*.002*i.pointerSpeed),!(i.currentPolarAngle-h*.002*i.pointerSpeed>i.maxPolarAngle)&&!(i.currentPolarAngle-h*.002*i.pointerSpeed<i.minPolarAngle)&&(i.currentPolarAngle-=h*.002*i.pointerSpeed,e.rotateX(-h*.002*i.pointerSpeed),t.rotateX(-h*.002*i.pointerSpeed)),i.dispatchEvent(Ya)}function r(){i.domElement.ownerDocument.pointerLockElement===i.domElement?(i.dispatchEvent(Za),i.isLocked=!0):(i.dispatchEvent($a),i.isLocked=!1)}function o(){console.error("THREE.PointerLockControlsManifold: Unable to use Pointer Lock API")}this.connect=function(){i.domElement.ownerDocument.addEventListener("mousemove",s),i.domElement.ownerDocument.addEventListener("pointerlockchange",r),i.domElement.ownerDocument.addEventListener("pointerlockerror",o)},this.disconnect=function(){i.domElement.ownerDocument.removeEventListener("mousemove",s),i.domElement.ownerDocument.removeEventListener("pointerlockchange",r),i.domElement.ownerDocument.removeEventListener("pointerlockerror",o)},this.dispose=function(){this.disconnect()},this.getObject=function(){return e},this.getDirection=function(){const l=new A(0,0,-1);return function(c){return c.copy(l).applyQuaternion(e.quaternion)}}(),this.moveForward=function(l){r5.setFromMatrixColumn(e.matrix,0),r5.crossVectors(e.up,r5),e.position.addScaledVector(r5,l)},this.moveRight=function(l){r5.setFromMatrixColumn(e.matrix,0),e.position.addScaledVector(r5,l)},this.lock=function(){this.domElement.requestPointerLock()},this.unlock=function(){i.domElement.ownerDocument.exitPointerLock()},this.connect()}}const Qa={version:4.3,type:"Object3d",generator:"Triceratops Exporter"},ja={uuid:"5dc496ce-ea4a-48cf-abe4-9f12dd8a1eb4",name:"surface",type:"Mesh",geometry:"b470b82d-41b4-4004-9fd4-dd1796b11638",matrix:[1,0,0,0,0,1,0,0,0,0,1,0,0,40,.125,1],castShadow:!0,receiveShadow:!0,material:"54513180-0bef-4124-ad3a-473b7686bdb8"},eo=[{uuid:"b470b82d-41b4-4004-9fd4-dd1796b11638",type:"BufferGeometry",data:{attributes:{position:{itemSize:3,type:"Float32Array",array:[-40,50,-20.125,40,50,-20.125,-40,50,19.875,40,50,19.875,-40,50,-19.014,-40,50,-17.903,-40,50,-16.792,-40,50,-15.681,-40,50,-14.569,-40,50,-13.458,-40,50,-12.347,-40,50,-11.236,-40,50,-10.125,-40,50,-9.014,-40,50,-7.903,-40,50,-6.792,-40,50,-5.681,-40,50,-4.569,-40,50,-3.458,-40,50,-2.347,-40,50,-1.236,-40,50,-.125,-40,50,.986,-40,50,2.097,-40,50,3.208,-40,50,4.319,-40,50,5.431,-40,50,6.542,-40,50,7.653,-40,50,8.764,-40,50,9.875,-40,50,10.986,-40,50,12.097,-40,50,13.208,-40,50,14.319,-40,50,15.431,-40,50,16.542,-40,50,17.653,-40,50,18.764,40,50,-.125,0,50,-20.125,0,50,-.125,-20,50,-.125,0,50,-10.125,-20,50,-20.125,-20,50,-10.125,-30,50,-10.125,-20,50,-15.125,-30,50,-20.125,-30,50,-15.125,-35,50,-15.125,-30,50,-17.625,-35,50,-17.625,-37.5,50,-17.625,-35,50,-18.875,-37.5,50,-18.875,-37.5,50,-15.125,-35,50,-16.375,-37.5,50,-16.375,-35,50,-10.125,-30,50,-12.625,-35,50,-12.625,-30,50,-.125,-20,50,-5.125,-30,50,-5.125,0,50,9.875,-20,50,9.875,-37.5,50,-12.625,-35,50,-13.875,-37.5,50,-13.875,-37.5,50,-10.125,-35,50,-11.375,-37.5,50,-11.375,-35,50,-5.125,-30,50,-7.625,-35,50,-7.625,-37.5,50,-7.625,-35,50,-8.875,-37.5,50,-8.875,-37.5,50,-5.125,-35,50,-6.375,-37.5,50,-6.375,-35,50,-.125,-30,50,-2.625,-35,50,-2.625,-30,50,9.875,-20,50,4.875,-30,50,4.875,-37.5,50,-2.625,-35,50,-3.875,-37.5,50,-3.875,-37.5,50,-.125,-35,50,-1.375,-37.5,50,-1.375,-35,50,4.875,-30,50,2.375,-35,50,2.375,-37.5,50,2.375,-35,50,1.125,-37.5,50,1.125,-37.5,50,4.875,-35,50,3.625,-37.5,50,3.625,-35,50,9.875,-30,50,7.375,-35,50,7.375,-20,50,14.875,-30,50,14.875,-37.5,50,7.375,-35,50,6.125,-37.5,50,6.125,-37.5,50,9.875,-35,50,8.625,-37.5,50,8.625,-35,50,14.875,-30,50,12.375,-35,50,12.375,-37.5,50,12.375,-35,50,11.125,-37.5,50,11.125,-37.5,50,14.875,-35,50,13.625,-37.5,50,13.625,-30,50,17.375,-35,50,17.375,-37.5,50,17.375,-35,50,16.125,-37.5,50,16.125,-35,50,18.625,-37.5,50,18.625,-28.571,50,19.875,-17.143,50,19.875,-5.714,50,19.875,5.714,50,19.875,17.143,50,19.875,28.571,50,19.875,40,50,18.764,40,50,17.653,40,50,16.542,40,50,15.431,40,50,14.319,40,50,13.208,40,50,12.097,40,50,10.986,40,50,9.875,40,50,8.764,40,50,7.653,40,50,6.542,40,50,5.431,40,50,4.319,40,50,3.208,40,50,2.097,40,50,.986,40,50,-1.236,40,50,-2.347,40,50,-3.458,40,50,-4.569,40,50,-5.681,40,50,-6.792,40,50,-7.903,40,50,-9.014,40,50,-10.125,40,50,-11.236,40,50,-12.347,40,50,-13.458,40,50,-14.569,40,50,-15.681,40,50,-16.792,40,50,-17.903,40,50,-19.014,20,50,-.125,20,50,9.875,30,50,9.875,20,50,14.875,30,50,14.875,35,50,14.875,30,50,17.375,35,50,17.375,37.5,50,17.375,35,50,18.625,37.5,50,18.625,37.5,50,14.875,35,50,16.125,37.5,50,16.125,35,50,9.875,30,50,12.375,35,50,12.375,30,50,-.125,20,50,4.875,30,50,4.875,20,50,-20.125,20,50,-10.125,37.5,50,12.375,35,50,13.625,37.5,50,13.625,37.5,50,9.875,35,50,11.125,37.5,50,11.125,35,50,4.875,30,50,7.375,35,50,7.375,37.5,50,7.375,35,50,8.625,37.5,50,8.625,37.5,50,4.875,35,50,6.125,37.5,50,6.125,35,50,-.125,30,50,2.375,35,50,2.375,30,50,-10.125,20,50,-5.125,30,50,-5.125,37.5,50,2.375,35,50,3.625,37.5,50,3.625,37.5,50,-.125,35,50,1.125,37.5,50,1.125,35,50,-5.125,30,50,-2.625,35,50,-2.625,37.5,50,-2.625,35,50,-1.375,37.5,50,-1.375,37.5,50,-5.125,35,50,-3.875,37.5,50,-3.875,35,50,-10.125,30,50,-7.625,35,50,-7.625,30,50,-20.125,20,50,-15.125,30,50,-15.125,37.5,50,-7.625,35,50,-6.375,37.5,50,-6.375,37.5,50,-10.125,35,50,-8.875,37.5,50,-8.875,35,50,-15.125,30,50,-12.625,35,50,-12.625,37.5,50,-12.625,35,50,-11.375,37.5,50,-11.375,37.5,50,-15.125,35,50,-13.875,37.5,50,-13.875,30,50,-17.625,35,50,-17.625,37.5,50,-17.625,35,50,-16.375,37.5,50,-16.375,35,50,-18.875,37.5,50,-18.875,38.889,50,-20.125,37.778,50,-20.125,36.667,50,-20.125,35.556,50,-20.125,34.444,50,-20.125,33.333,50,-20.125,32.222,50,-20.125,31.111,50,-20.125,28.889,50,-20.125,27.778,50,-20.125,26.667,50,-20.125,25.556,50,-20.125,24.444,50,-20.125,23.333,50,-20.125,22.222,50,-20.125,21.111,50,-20.125,18.889,50,-20.125,17.778,50,-20.125,16.667,50,-20.125,15.556,50,-20.125,14.444,50,-20.125,13.333,50,-20.125,12.222,50,-20.125,11.111,50,-20.125,10,50,-20.125,8.889,50,-20.125,7.778,50,-20.125,6.667,50,-20.125,5.556,50,-20.125,4.444,50,-20.125,3.333,50,-20.125,2.222,50,-20.125,1.111,50,-20.125,-1.111,50,-20.125,-2.222,50,-20.125,-3.333,50,-20.125,-4.444,50,-20.125,-5.556,50,-20.125,-6.667,50,-20.125,-7.778,50,-20.125,-8.889,50,-20.125,-10,50,-20.125,-11.111,50,-20.125,-12.222,50,-20.125,-13.333,50,-20.125,-14.444,50,-20.125,-15.556,50,-20.125,-16.667,50,-20.125,-17.778,50,-20.125,-18.889,50,-20.125,-21.111,50,-20.125,-22.222,50,-20.125,-23.333,50,-20.125,-24.444,50,-20.125,-25.556,50,-20.125,-26.667,50,-20.125,-27.778,50,-20.125,-28.889,50,-20.125,-31.111,50,-20.125,-32.222,50,-20.125,-33.333,50,-20.125,-34.444,50,-20.125,-35.556,50,-20.125,-36.667,50,-20.125,-37.778,50,-20.125,-38.889,50,-20.125,32.5,50,-17.625,30,50,-18.875,32.5,50,-18.875,25,50,-15.125,20,50,-17.625,25,50,-17.625,10,50,-10.125,0,50,-15.125,10,50,-15.125,27.5,50,-17.625,25,50,-18.875,27.5,50,-18.875,22.5,50,-17.625,20,50,-18.875,22.5,50,-18.875,15,50,-15.125,10,50,-17.625,15,50,-17.625,17.5,50,-17.625,15,50,-18.875,17.5,50,-18.875,12.5,50,-17.625,10,50,-18.875,12.5,50,-18.875,5,50,-15.125,0,50,-17.625,5,50,-17.625,-10,50,-10.125,-10,50,-15.125,7.5,50,-17.625,5,50,-18.875,7.5,50,-18.875,2.5,50,-17.625,0,50,-18.875,2.5,50,-18.875,-5,50,-15.125,-10,50,-17.625,-5,50,-17.625,-2.5,50,-17.625,-5,50,-18.875,-2.5,50,-18.875,-7.5,50,-17.625,-10,50,-18.875,-7.5,50,-18.875,-15,50,-15.125,-20,50,-17.625,-15,50,-17.625,-12.5,50,-17.625,-15,50,-18.875,-12.5,50,-18.875,-17.5,50,-17.625,-20,50,-18.875,-17.5,50,-18.875,-25,50,-15.125,-25,50,-17.625,-22.5,50,-17.625,-25,50,-18.875,-22.5,50,-18.875,-27.5,50,-17.625,-30,50,-18.875,-27.5,50,-18.875,-32.5,50,-17.625,-32.5,50,-18.875,-40,30,-20.125,40,30,-20.125,-40,30,19.875,40,30,19.875,-40,30,-19.014,-40,30,-17.903,-40,30,-16.792,-40,30,-15.681,-40,30,-14.569,-40,30,-13.458,-40,30,-12.347,-40,30,-11.236,-40,30,-10.125,-40,30,-9.014,-40,30,-7.903,-40,30,-6.792,-40,30,-5.681,-40,30,-4.569,-40,30,-3.458,-40,30,-2.347,-40,30,-1.236,-40,30,-.125,-40,30,.986,-40,30,2.097,-40,30,3.208,-40,30,4.319,-40,30,5.431,-40,30,6.542,-40,30,7.653,-40,30,8.764,-40,30,9.875,-40,30,10.986,-40,30,12.097,-40,30,13.208,-40,30,14.319,-40,30,15.431,-40,30,16.542,-40,30,17.653,-40,30,18.764,40,30,-.125,0,30,-.125,-20,30,-.125,0,30,-10.125,-20,30,-10.125,-30,30,-10.125,-20,30,-15.125,-30,30,-15.125,-35,30,-15.125,-30,30,-17.625,-35,30,-17.625,-37.5,30,-17.625,-35,30,-18.875,-37.5,30,-18.875,-37.5,30,-15.125,-35,30,-16.375,-37.5,30,-16.375,-35,30,-10.125,-30,30,-12.625,-35,30,-12.625,-30,30,-.125,-20,30,-5.125,-30,30,-5.125,0,30,9.875,-20,30,9.875,-37.5,30,-12.625,-35,30,-13.875,-37.5,30,-13.875,-37.5,30,-10.125,-35,30,-11.375,-37.5,30,-11.375,-35,30,-5.125,-30,30,-7.625,-35,30,-7.625,-37.5,30,-7.625,-35,30,-8.875,-37.5,30,-8.875,-37.5,30,-5.125,-35,30,-6.375,-37.5,30,-6.375,-35,30,-.125,-30,30,-2.625,-35,30,-2.625,-30,30,9.875,-20,30,4.875,-30,30,4.875,-37.5,30,-2.625,-35,30,-3.875,-37.5,30,-3.875,-37.5,30,-.125,-35,30,-1.375,-37.5,30,-1.375,-35,30,4.875,-30,30,2.375,-35,30,2.375,-37.5,30,2.375,-35,30,1.125,-37.5,30,1.125,-37.5,30,4.875,-35,30,3.625,-37.5,30,3.625,-35,30,9.875,-30,30,7.375,-35,30,7.375,-20,30,14.875,-30,30,14.875,-37.5,30,7.375,-35,30,6.125,-37.5,30,6.125,-37.5,30,9.875,-35,30,8.625,-37.5,30,8.625,-35,30,14.875,-30,30,12.375,-35,30,12.375,-37.5,30,12.375,-35,30,11.125,-37.5,30,11.125,-37.5,30,14.875,-35,30,13.625,-37.5,30,13.625,-30,30,17.375,-35,30,17.375,-37.5,30,17.375,-35,30,16.125,-37.5,30,16.125,-35,30,18.625,-37.5,30,18.625,-28.571,30,19.875,-17.143,30,19.875,-5.714,30,19.875,5.714,30,19.875,17.143,30,19.875,28.571,30,19.875,40,30,18.764,40,30,17.653,40,30,16.542,40,30,15.431,40,30,14.319,40,30,13.208,40,30,12.097,40,30,10.986,40,30,9.875,40,30,8.764,40,30,7.653,40,30,6.542,40,30,5.431,40,30,4.319,40,30,3.208,40,30,2.097,40,30,.986,40,30,-1.236,40,30,-2.347,40,30,-3.458,40,30,-4.569,40,30,-5.681,40,30,-6.792,40,30,-7.903,40,30,-9.014,40,30,-10.125,40,30,-11.236,40,30,-12.347,40,30,-13.458,40,30,-14.569,40,30,-15.681,40,30,-16.792,40,30,-17.903,40,30,-19.014,20,30,-.125,20,30,9.875,30,30,9.875,20,30,14.875,30,30,14.875,35,30,14.875,30,30,17.375,35,30,17.375,37.5,30,17.375,35,30,18.625,37.5,30,18.625,37.5,30,14.875,35,30,16.125,37.5,30,16.125,35,30,9.875,30,30,12.375,35,30,12.375,30,30,-.125,20,30,4.875,30,30,4.875,20,30,-10.125,37.5,30,12.375,35,30,13.625,37.5,30,13.625,37.5,30,9.875,35,30,11.125,37.5,30,11.125,35,30,4.875,30,30,7.375,35,30,7.375,37.5,30,7.375,35,30,8.625,37.5,30,8.625,37.5,30,4.875,35,30,6.125,37.5,30,6.125,35,30,-.125,30,30,2.375,35,30,2.375,30,30,-10.125,20,30,-5.125,30,30,-5.125,37.5,30,2.375,35,30,3.625,37.5,30,3.625,37.5,30,-.125,35,30,1.125,37.5,30,1.125,35,30,-5.125,30,30,-2.625,35,30,-2.625,37.5,30,-2.625,35,30,-1.375,37.5,30,-1.375,37.5,30,-5.125,35,30,-3.875,37.5,30,-3.875,35,30,-10.125,30,30,-7.625,35,30,-7.625,20,30,-15.125,30,30,-15.125,37.5,30,-7.625,35,30,-6.375,37.5,30,-6.375,37.5,30,-10.125,35,30,-8.875,37.5,30,-8.875,35,30,-15.125,30,30,-12.625,35,30,-12.625,37.5,30,-12.625,35,30,-11.375,37.5,30,-11.375,37.5,30,-15.125,35,30,-13.875,37.5,30,-13.875,30,30,-17.625,35,30,-17.625,37.5,30,-17.625,35,30,-16.375,37.5,30,-16.375,35,30,-18.875,37.5,30,-18.875,28.571,30,-20.125,17.143,30,-20.125,5.714,30,-20.125,-5.714,30,-20.125,-17.143,30,-20.125,-28.571,30,-20.125,-40,-10,-20.125,40,-10,-20.125,-40,-10,19.875,40,-10,19.875,-40,-10,-19.014,-40,-10,-17.903,-40,-10,-16.792,-40,-10,-15.681,-40,-10,-14.569,-40,-10,-13.458,-40,-10,-12.347,-40,-10,-11.236,-40,-10,-10.125,-40,-10,-9.014,-40,-10,-7.903,-40,-10,-6.792,-40,-10,-5.681,-40,-10,-4.569,-40,-10,-3.458,-40,-10,-2.347,-40,-10,-1.236,-40,-10,-.125,-40,-10,.986,-40,-10,2.097,-40,-10,3.208,-40,-10,4.319,-40,-10,5.431,-40,-10,6.542,-40,-10,7.653,-40,-10,8.764,-40,-10,9.875,-40,-10,10.986,-40,-10,12.097,-40,-10,13.208,-40,-10,14.319,-40,-10,15.431,-40,-10,16.542,-40,-10,17.653,-40,-10,18.764,40,-10,-.125,0,-10,-.125,-20,-10,-.125,0,-10,-10.125,-20,-10,-10.125,-30,-10,-10.125,-20,-10,-15.125,-30,-10,-15.125,-35,-10,-15.125,-30,-10,-17.625,-35,-10,-17.625,-37.5,-10,-17.625,-35,-10,-18.875,-37.5,-10,-18.875,-37.5,-10,-15.125,-35,-10,-16.375,-37.5,-10,-16.375,-35,-10,-10.125,-30,-10,-12.625,-35,-10,-12.625,-30,-10,-.125,-20,-10,-5.125,-30,-10,-5.125,0,-10,9.875,-20,-10,9.875,-37.5,-10,-12.625,-35,-10,-13.875,-37.5,-10,-13.875,-37.5,-10,-10.125,-35,-10,-11.375,-37.5,-10,-11.375,-35,-10,-5.125,-30,-10,-7.625,-35,-10,-7.625,-37.5,-10,-7.625,-35,-10,-8.875,-37.5,-10,-8.875,-37.5,-10,-5.125,-35,-10,-6.375,-37.5,-10,-6.375,-35,-10,-.125,-30,-10,-2.625,-35,-10,-2.625,-30,-10,9.875,-20,-10,4.875,-30,-10,4.875,-37.5,-10,-2.625,-35,-10,-3.875,-37.5,-10,-3.875,-37.5,-10,-.125,-35,-10,-1.375,-37.5,-10,-1.375,-35,-10,4.875,-30,-10,2.375,-35,-10,2.375,-37.5,-10,2.375,-35,-10,1.125,-37.5,-10,1.125,-37.5,-10,4.875,-35,-10,3.625,-37.5,-10,3.625,-35,-10,9.875,-30,-10,7.375,-35,-10,7.375,-20,-10,14.875,-30,-10,14.875,-37.5,-10,7.375,-35,-10,6.125,-37.5,-10,6.125,-37.5,-10,9.875,-35,-10,8.625,-37.5,-10,8.625,-35,-10,14.875,-30,-10,12.375,-35,-10,12.375,-37.5,-10,12.375,-35,-10,11.125,-37.5,-10,11.125,-37.5,-10,14.875,-35,-10,13.625,-37.5,-10,13.625,-30,-10,17.375,-35,-10,17.375,-37.5,-10,17.375,-35,-10,16.125,-37.5,-10,16.125,-35,-10,18.625,-37.5,-10,18.625,-28.571,-10,19.875,-17.143,-10,19.875,-5.714,-10,19.875,5.714,-10,19.875,17.143,-10,19.875,28.571,-10,19.875,40,-10,18.764,40,-10,17.653,40,-10,16.542,40,-10,15.431,40,-10,14.319,40,-10,13.208,40,-10,12.097,40,-10,10.986,40,-10,9.875,40,-10,8.764,40,-10,7.653,40,-10,6.542,40,-10,5.431,40,-10,4.319,40,-10,3.208,40,-10,2.097,40,-10,.986,40,-10,-1.236,40,-10,-2.347,40,-10,-3.458,40,-10,-4.569,40,-10,-5.681,40,-10,-6.792,40,-10,-7.903,40,-10,-9.014,40,-10,-10.125,40,-10,-11.236,40,-10,-12.347,40,-10,-13.458,40,-10,-14.569,40,-10,-15.681,40,-10,-16.792,40,-10,-17.903,40,-10,-19.014,20,-10,-.125,20,-10,9.875,30,-10,9.875,20,-10,14.875,30,-10,14.875,35,-10,14.875,30,-10,17.375,35,-10,17.375,37.5,-10,17.375,35,-10,18.625,37.5,-10,18.625,37.5,-10,14.875,35,-10,16.125,37.5,-10,16.125,35,-10,9.875,30,-10,12.375,35,-10,12.375,30,-10,-.125,20,-10,4.875,30,-10,4.875,20,-10,-10.125,37.5,-10,12.375,35,-10,13.625,37.5,-10,13.625,37.5,-10,9.875,35,-10,11.125,37.5,-10,11.125,35,-10,4.875,30,-10,7.375,35,-10,7.375,37.5,-10,7.375,35,-10,8.625,37.5,-10,8.625,37.5,-10,4.875,35,-10,6.125,37.5,-10,6.125,35,-10,-.125,30,-10,2.375,35,-10,2.375,30,-10,-10.125,20,-10,-5.125,30,-10,-5.125,37.5,-10,2.375,35,-10,3.625,37.5,-10,3.625,37.5,-10,-.125,35,-10,1.125,37.5,-10,1.125,35,-10,-5.125,30,-10,-2.625,35,-10,-2.625,37.5,-10,-2.625,35,-10,-1.375,37.5,-10,-1.375,37.5,-10,-5.125,35,-10,-3.875,37.5,-10,-3.875,35,-10,-10.125,30,-10,-7.625,35,-10,-7.625,20,-10,-15.125,30,-10,-15.125,37.5,-10,-7.625,35,-10,-6.375,37.5,-10,-6.375,37.5,-10,-10.125,35,-10,-8.875,37.5,-10,-8.875,35,-10,-15.125,30,-10,-12.625,35,-10,-12.625,37.5,-10,-12.625,35,-10,-11.375,37.5,-10,-11.375,37.5,-10,-15.125,35,-10,-13.875,37.5,-10,-13.875,30,-10,-17.625,35,-10,-17.625,37.5,-10,-17.625,35,-10,-16.375,37.5,-10,-16.375,35,-10,-18.875,37.5,-10,-18.875,28.571,-10,-20.125,17.143,-10,-20.125,5.714,-10,-20.125,-5.714,-10,-20.125,-17.143,-10,-20.125,-28.571,-10,-20.125,-40,10,-20.125,40,10,-20.125,-40,10,19.875,40,10,19.875,-40,10,-19.014,-40,10,-17.903,-40,10,-16.792,-40,10,-15.681,-40,10,-14.569,-40,10,-13.458,-40,10,-12.347,-40,10,-11.236,-40,10,-10.125,-40,10,-9.014,-40,10,-7.903,-40,10,-6.792,-40,10,-5.681,-40,10,-4.569,-40,10,-3.458,-40,10,-2.347,-40,10,-1.236,-40,10,-.125,-40,10,.986,-40,10,2.097,-40,10,3.208,-40,10,4.319,-40,10,5.431,-40,10,6.542,-40,10,7.653,-40,10,8.764,-40,10,9.875,-40,10,10.986,-40,10,12.097,-40,10,13.208,-40,10,14.319,-40,10,15.431,-40,10,16.542,-40,10,17.653,-40,10,18.764,40,10,-.125,0,10,-.125,-20,10,-.125,0,10,-10.125,-20,10,-10.125,-30,10,-10.125,-20,10,-15.125,-30,10,-15.125,-35,10,-15.125,-30,10,-17.625,-35,10,-17.625,-37.5,10,-17.625,-35,10,-18.875,-37.5,10,-18.875,-37.5,10,-15.125,-35,10,-16.375,-37.5,10,-16.375,-35,10,-10.125,-30,10,-12.625,-35,10,-12.625,-30,10,-.125,-20,10,-5.125,-30,10,-5.125,0,10,9.875,-20,10,9.875,-37.5,10,-12.625,-35,10,-13.875,-37.5,10,-13.875,-37.5,10,-10.125,-35,10,-11.375,-37.5,10,-11.375,-35,10,-5.125,-30,10,-7.625,-35,10,-7.625,-37.5,10,-7.625,-35,10,-8.875,-37.5,10,-8.875,-37.5,10,-5.125,-35,10,-6.375,-37.5,10,-6.375,-35,10,-.125,-30,10,-2.625,-35,10,-2.625,-30,10,9.875,-20,10,4.875,-30,10,4.875,-37.5,10,-2.625,-35,10,-3.875,-37.5,10,-3.875,-37.5,10,-.125,-35,10,-1.375,-37.5,10,-1.375,-35,10,4.875,-30,10,2.375,-35,10,2.375,-37.5,10,2.375,-35,10,1.125,-37.5,10,1.125,-37.5,10,4.875,-35,10,3.625,-37.5,10,3.625,-35,10,9.875,-30,10,7.375,-35,10,7.375,-20,10,14.875,-30,10,14.875,-37.5,10,7.375,-35,10,6.125,-37.5,10,6.125,-37.5,10,9.875,-35,10,8.625,-37.5,10,8.625,-35,10,14.875,-30,10,12.375,-35,10,12.375,-37.5,10,12.375,-35,10,11.125,-37.5,10,11.125,-37.5,10,14.875,-35,10,13.625,-37.5,10,13.625,-30,10,17.375,-35,10,17.375,-37.5,10,17.375,-35,10,16.125,-37.5,10,16.125,-35,10,18.625,-37.5,10,18.625,-28.571,10,19.875,-17.143,10,19.875,-5.714,10,19.875,5.714,10,19.875,17.143,10,19.875,28.571,10,19.875,40,10,18.764,40,10,17.653,40,10,16.542,40,10,15.431,40,10,14.319,40,10,13.208,40,10,12.097,40,10,10.986,40,10,9.875,40,10,8.764,40,10,7.653,40,10,6.542,40,10,5.431,40,10,4.319,40,10,3.208,40,10,2.097,40,10,.986,40,10,-1.236,40,10,-2.347,40,10,-3.458,40,10,-4.569,40,10,-5.681,40,10,-6.792,40,10,-7.903,40,10,-9.014,40,10,-10.125,40,10,-11.236,40,10,-12.347,40,10,-13.458,40,10,-14.569,40,10,-15.681,40,10,-16.792,40,10,-17.903,40,10,-19.014,20,10,-.125,20,10,9.875,30,10,9.875,20,10,14.875,30,10,14.875,35,10,14.875,30,10,17.375,35,10,17.375,37.5,10,17.375,35,10,18.625,37.5,10,18.625,37.5,10,14.875,35,10,16.125,37.5,10,16.125,35,10,9.875,30,10,12.375,35,10,12.375,30,10,-.125,20,10,4.875,30,10,4.875,20,10,-10.125,37.5,10,12.375,35,10,13.625,37.5,10,13.625,37.5,10,9.875,35,10,11.125,37.5,10,11.125,35,10,4.875,30,10,7.375,35,10,7.375,37.5,10,7.375,35,10,8.625,37.5,10,8.625,37.5,10,4.875,35,10,6.125,37.5,10,6.125,35,10,-.125,30,10,2.375,35,10,2.375,30,10,-10.125,20,10,-5.125,30,10,-5.125,37.5,10,2.375,35,10,3.625,37.5,10,3.625,37.5,10,-.125,35,10,1.125,37.5,10,1.125,35,10,-5.125,30,10,-2.625,35,10,-2.625,37.5,10,-2.625,35,10,-1.375,37.5,10,-1.375,37.5,10,-5.125,35,10,-3.875,37.5,10,-3.875,35,10,-10.125,30,10,-7.625,35,10,-7.625,20,10,-15.125,30,10,-15.125,37.5,10,-7.625,35,10,-6.375,37.5,10,-6.375,37.5,10,-10.125,35,10,-8.875,37.5,10,-8.875,35,10,-15.125,30,10,-12.625,35,10,-12.625,37.5,10,-12.625,35,10,-11.375,37.5,10,-11.375,37.5,10,-15.125,35,10,-13.875,37.5,10,-13.875,30,10,-17.625,35,10,-17.625,37.5,10,-17.625,35,10,-16.375,37.5,10,-16.375,35,10,-18.875,37.5,10,-18.875,28.571,10,-20.125,17.143,10,-20.125,5.714,10,-20.125,-5.714,10,-20.125,-17.143,10,-20.125,-28.571,10,-20.125,-40,-50,-20.125,40,-50,-20.125,-40,-50,19.875,40,-50,19.875,-40,-50,-19.014,-40,-50,-17.903,-40,-50,-16.792,-40,-50,-15.681,-40,-50,-14.569,-40,-50,-13.458,-40,-50,-12.347,-40,-50,-11.236,-40,-50,-10.125,-40,-50,-9.014,-40,-50,-7.903,-40,-50,-6.792,-40,-50,-5.681,-40,-50,-4.569,-40,-50,-3.458,-40,-50,-2.347,-40,-50,-1.236,-40,-50,-.125,-40,-50,.986,-40,-50,2.097,-40,-50,3.208,-40,-50,4.319,-40,-50,5.431,-40,-50,6.542,-40,-50,7.653,-40,-50,8.764,-40,-50,9.875,-40,-50,10.986,-40,-50,12.097,-40,-50,13.208,-40,-50,14.319,-40,-50,15.431,-40,-50,16.542,-40,-50,17.653,-40,-50,18.764,40,-50,-.125,0,-50,-20.125,0,-50,-.125,-20,-50,-.125,0,-50,-10.125,-20,-50,-20.125,-20,-50,-10.125,-30,-50,-10.125,-20,-50,-15.125,-30,-50,-20.125,-30,-50,-15.125,-35,-50,-15.125,-30,-50,-17.625,-35,-50,-17.625,-37.5,-50,-17.625,-35,-50,-18.875,-37.5,-50,-18.875,-37.5,-50,-15.125,-35,-50,-16.375,-37.5,-50,-16.375,-35,-50,-10.125,-30,-50,-12.625,-35,-50,-12.625,-30,-50,-.125,-20,-50,-5.125,-30,-50,-5.125,0,-50,9.875,-20,-50,9.875,-37.5,-50,-12.625,-35,-50,-13.875,-37.5,-50,-13.875,-37.5,-50,-10.125,-35,-50,-11.375,-37.5,-50,-11.375,-35,-50,-5.125,-30,-50,-7.625,-35,-50,-7.625,-37.5,-50,-7.625,-35,-50,-8.875,-37.5,-50,-8.875,-37.5,-50,-5.125,-35,-50,-6.375,-37.5,-50,-6.375,-35,-50,-.125,-30,-50,-2.625,-35,-50,-2.625,-30,-50,9.875,-20,-50,4.875,-30,-50,4.875,-37.5,-50,-2.625,-35,-50,-3.875,-37.5,-50,-3.875,-37.5,-50,-.125,-35,-50,-1.375,-37.5,-50,-1.375,-35,-50,4.875,-30,-50,2.375,-35,-50,2.375,-37.5,-50,2.375,-35,-50,1.125,-37.5,-50,1.125,-37.5,-50,4.875,-35,-50,3.625,-37.5,-50,3.625,-35,-50,9.875,-30,-50,7.375,-35,-50,7.375,-20,-50,14.875,-30,-50,14.875,-37.5,-50,7.375,-35,-50,6.125,-37.5,-50,6.125,-37.5,-50,9.875,-35,-50,8.625,-37.5,-50,8.625,-35,-50,14.875,-30,-50,12.375,-35,-50,12.375,-37.5,-50,12.375,-35,-50,11.125,-37.5,-50,11.125,-37.5,-50,14.875,-35,-50,13.625,-37.5,-50,13.625,-30,-50,17.375,-35,-50,17.375,-37.5,-50,17.375,-35,-50,16.125,-37.5,-50,16.125,-35,-50,18.625,-37.5,-50,18.625,-28.571,-50,19.875,-17.143,-50,19.875,-5.714,-50,19.875,5.714,-50,19.875,17.143,-50,19.875,28.571,-50,19.875,40,-50,18.764,40,-50,17.653,40,-50,16.542,40,-50,15.431,40,-50,14.319,40,-50,13.208,40,-50,12.097,40,-50,10.986,40,-50,9.875,40,-50,8.764,40,-50,7.653,40,-50,6.542,40,-50,5.431,40,-50,4.319,40,-50,3.208,40,-50,2.097,40,-50,.986,40,-50,-1.236,40,-50,-2.347,40,-50,-3.458,40,-50,-4.569,40,-50,-5.681,40,-50,-6.792,40,-50,-7.903,40,-50,-9.014,40,-50,-10.125,40,-50,-11.236,40,-50,-12.347,40,-50,-13.458,40,-50,-14.569,40,-50,-15.681,40,-50,-16.792,40,-50,-17.903,40,-50,-19.014,20,-50,-.125,20,-50,9.875,30,-50,9.875,20,-50,14.875,30,-50,14.875,35,-50,14.875,30,-50,17.375,35,-50,17.375,37.5,-50,17.375,35,-50,18.625,37.5,-50,18.625,37.5,-50,14.875,35,-50,16.125,37.5,-50,16.125,35,-50,9.875,30,-50,12.375,35,-50,12.375,30,-50,-.125,20,-50,4.875,30,-50,4.875,20,-50,-20.125,20,-50,-10.125,37.5,-50,12.375,35,-50,13.625,37.5,-50,13.625,37.5,-50,9.875,35,-50,11.125,37.5,-50,11.125,35,-50,4.875,30,-50,7.375,35,-50,7.375,37.5,-50,7.375,35,-50,8.625,37.5,-50,8.625,37.5,-50,4.875,35,-50,6.125,37.5,-50,6.125,35,-50,-.125,30,-50,2.375,35,-50,2.375,30,-50,-10.125,20,-50,-5.125,30,-50,-5.125,37.5,-50,2.375,35,-50,3.625,37.5,-50,3.625,37.5,-50,-.125,35,-50,1.125,37.5,-50,1.125,35,-50,-5.125,30,-50,-2.625,35,-50,-2.625,37.5,-50,-2.625,35,-50,-1.375,37.5,-50,-1.375,37.5,-50,-5.125,35,-50,-3.875,37.5,-50,-3.875,35,-50,-10.125,30,-50,-7.625,35,-50,-7.625,30,-50,-20.125,20,-50,-15.125,30,-50,-15.125,37.5,-50,-7.625,35,-50,-6.375,37.5,-50,-6.375,37.5,-50,-10.125,35,-50,-8.875,37.5,-50,-8.875,35,-50,-15.125,30,-50,-12.625,35,-50,-12.625,37.5,-50,-12.625,35,-50,-11.375,37.5,-50,-11.375,37.5,-50,-15.125,35,-50,-13.875,37.5,-50,-13.875,30,-50,-17.625,35,-50,-17.625,37.5,-50,-17.625,35,-50,-16.375,37.5,-50,-16.375,35,-50,-18.875,37.5,-50,-18.875,38.889,-50,-20.125,37.778,-50,-20.125,36.667,-50,-20.125,35.556,-50,-20.125,34.444,-50,-20.125,33.333,-50,-20.125,32.222,-50,-20.125,31.111,-50,-20.125,28.889,-50,-20.125,27.778,-50,-20.125,26.667,-50,-20.125,25.556,-50,-20.125,24.444,-50,-20.125,23.333,-50,-20.125,22.222,-50,-20.125,21.111,-50,-20.125,18.889,-50,-20.125,17.778,-50,-20.125,16.667,-50,-20.125,15.556,-50,-20.125,14.444,-50,-20.125,13.333,-50,-20.125,12.222,-50,-20.125,11.111,-50,-20.125,10,-50,-20.125,8.889,-50,-20.125,7.778,-50,-20.125,6.667,-50,-20.125,5.556,-50,-20.125,4.444,-50,-20.125,3.333,-50,-20.125,2.222,-50,-20.125,1.111,-50,-20.125,-1.111,-50,-20.125,-2.222,-50,-20.125,-3.333,-50,-20.125,-4.444,-50,-20.125,-5.556,-50,-20.125,-6.667,-50,-20.125,-7.778,-50,-20.125,-8.889,-50,-20.125,-10,-50,-20.125,-11.111,-50,-20.125,-12.222,-50,-20.125,-13.333,-50,-20.125,-14.444,-50,-20.125,-15.556,-50,-20.125,-16.667,-50,-20.125,-17.778,-50,-20.125,-18.889,-50,-20.125,-21.111,-50,-20.125,-22.222,-50,-20.125,-23.333,-50,-20.125,-24.444,-50,-20.125,-25.556,-50,-20.125,-26.667,-50,-20.125,-27.778,-50,-20.125,-28.889,-50,-20.125,-31.111,-50,-20.125,-32.222,-50,-20.125,-33.333,-50,-20.125,-34.444,-50,-20.125,-35.556,-50,-20.125,-36.667,-50,-20.125,-37.778,-50,-20.125,-38.889,-50,-20.125,32.5,-50,-17.625,30,-50,-18.875,32.5,-50,-18.875,25,-50,-15.125,20,-50,-17.625,25,-50,-17.625,10,-50,-10.125,0,-50,-15.125,10,-50,-15.125,27.5,-50,-17.625,25,-50,-18.875,27.5,-50,-18.875,22.5,-50,-17.625,20,-50,-18.875,22.5,-50,-18.875,15,-50,-15.125,10,-50,-17.625,15,-50,-17.625,17.5,-50,-17.625,15,-50,-18.875,17.5,-50,-18.875,12.5,-50,-17.625,10,-50,-18.875,12.5,-50,-18.875,5,-50,-15.125,0,-50,-17.625,5,-50,-17.625,-10,-50,-10.125,-10,-50,-15.125,7.5,-50,-17.625,5,-50,-18.875,7.5,-50,-18.875,2.5,-50,-17.625,0,-50,-18.875,2.5,-50,-18.875,-5,-50,-15.125,-10,-50,-17.625,-5,-50,-17.625,-2.5,-50,-17.625,-5,-50,-18.875,-2.5,-50,-18.875,-7.5,-50,-17.625,-10,-50,-18.875,-7.5,-50,-18.875,-15,-50,-15.125,-20,-50,-17.625,-15,-50,-17.625,-12.5,-50,-17.625,-15,-50,-18.875,-12.5,-50,-18.875,-17.5,-50,-17.625,-20,-50,-18.875,-17.5,-50,-18.875,-25,-50,-15.125,-25,-50,-17.625,-22.5,-50,-17.625,-25,-50,-18.875,-22.5,-50,-18.875,-27.5,-50,-17.625,-30,-50,-18.875,-27.5,-50,-18.875,-32.5,-50,-17.625,-32.5,-50,-18.875,-40,-30,-20.125,40,-30,-20.125,-40,-30,19.875,40,-30,19.875,-40,-30,-19.014,-40,-30,-17.903,-40,-30,-16.792,-40,-30,-15.681,-40,-30,-14.569,-40,-30,-13.458,-40,-30,-12.347,-40,-30,-11.236,-40,-30,-10.125,-40,-30,-9.014,-40,-30,-7.903,-40,-30,-6.792,-40,-30,-5.681,-40,-30,-4.569,-40,-30,-3.458,-40,-30,-2.347,-40,-30,-1.236,-40,-30,-.125,-40,-30,.986,-40,-30,2.097,-40,-30,3.208,-40,-30,4.319,-40,-30,5.431,-40,-30,6.542,-40,-30,7.653,-40,-30,8.764,-40,-30,9.875,-40,-30,10.986,-40,-30,12.097,-40,-30,13.208,-40,-30,14.319,-40,-30,15.431,-40,-30,16.542,-40,-30,17.653,-40,-30,18.764,40,-30,-.125,0,-30,-.125,-20,-30,-.125,0,-30,-10.125,-20,-30,-10.125,-30,-30,-10.125,-20,-30,-15.125,-30,-30,-15.125,-35,-30,-15.125,-30,-30,-17.625,-35,-30,-17.625,-37.5,-30,-17.625,-35,-30,-18.875,-37.5,-30,-18.875,-37.5,-30,-15.125,-35,-30,-16.375,-37.5,-30,-16.375,-35,-30,-10.125,-30,-30,-12.625,-35,-30,-12.625,-30,-30,-.125,-20,-30,-5.125,-30,-30,-5.125,0,-30,9.875,-20,-30,9.875,-37.5,-30,-12.625,-35,-30,-13.875,-37.5,-30,-13.875,-37.5,-30,-10.125,-35,-30,-11.375,-37.5,-30,-11.375,-35,-30,-5.125,-30,-30,-7.625,-35,-30,-7.625,-37.5,-30,-7.625,-35,-30,-8.875,-37.5,-30,-8.875,-37.5,-30,-5.125,-35,-30,-6.375,-37.5,-30,-6.375,-35,-30,-.125,-30,-30,-2.625,-35,-30,-2.625,-30,-30,9.875,-20,-30,4.875,-30,-30,4.875,-37.5,-30,-2.625,-35,-30,-3.875,-37.5,-30,-3.875,-37.5,-30,-.125,-35,-30,-1.375,-37.5,-30,-1.375,-35,-30,4.875,-30,-30,2.375,-35,-30,2.375,-37.5,-30,2.375,-35,-30,1.125,-37.5,-30,1.125,-37.5,-30,4.875,-35,-30,3.625,-37.5,-30,3.625,-35,-30,9.875,-30,-30,7.375,-35,-30,7.375,-20,-30,14.875,-30,-30,14.875,-37.5,-30,7.375,-35,-30,6.125,-37.5,-30,6.125,-37.5,-30,9.875,-35,-30,8.625,-37.5,-30,8.625,-35,-30,14.875,-30,-30,12.375,-35,-30,12.375,-37.5,-30,12.375,-35,-30,11.125,-37.5,-30,11.125,-37.5,-30,14.875,-35,-30,13.625,-37.5,-30,13.625,-30,-30,17.375,-35,-30,17.375,-37.5,-30,17.375,-35,-30,16.125,-37.5,-30,16.125,-35,-30,18.625,-37.5,-30,18.625,-28.571,-30,19.875,-17.143,-30,19.875,-5.714,-30,19.875,5.714,-30,19.875,17.143,-30,19.875,28.571,-30,19.875,40,-30,18.764,40,-30,17.653,40,-30,16.542,40,-30,15.431,40,-30,14.319,40,-30,13.208,40,-30,12.097,40,-30,10.986,40,-30,9.875,40,-30,8.764,40,-30,7.653,40,-30,6.542,40,-30,5.431,40,-30,4.319,40,-30,3.208,40,-30,2.097,40,-30,.986,40,-30,-1.236,40,-30,-2.347,40,-30,-3.458,40,-30,-4.569,40,-30,-5.681,40,-30,-6.792,40,-30,-7.903,40,-30,-9.014,40,-30,-10.125,40,-30,-11.236,40,-30,-12.347,40,-30,-13.458,40,-30,-14.569,40,-30,-15.681,40,-30,-16.792,40,-30,-17.903,40,-30,-19.014,20,-30,-.125,20,-30,9.875,30,-30,9.875,20,-30,14.875,30,-30,14.875,35,-30,14.875,30,-30,17.375,35,-30,17.375,37.5,-30,17.375,35,-30,18.625,37.5,-30,18.625,37.5,-30,14.875,35,-30,16.125,37.5,-30,16.125,35,-30,9.875,30,-30,12.375,35,-30,12.375,30,-30,-.125,20,-30,4.875,30,-30,4.875,20,-30,-10.125,37.5,-30,12.375,35,-30,13.625,37.5,-30,13.625,37.5,-30,9.875,35,-30,11.125,37.5,-30,11.125,35,-30,4.875,30,-30,7.375,35,-30,7.375,37.5,-30,7.375,35,-30,8.625,37.5,-30,8.625,37.5,-30,4.875,35,-30,6.125,37.5,-30,6.125,35,-30,-.125,30,-30,2.375,35,-30,2.375,30,-30,-10.125,20,-30,-5.125,30,-30,-5.125,37.5,-30,2.375,35,-30,3.625,37.5,-30,3.625,37.5,-30,-.125,35,-30,1.125,37.5,-30,1.125,35,-30,-5.125,30,-30,-2.625,35,-30,-2.625,37.5,-30,-2.625,35,-30,-1.375,37.5,-30,-1.375,37.5,-30,-5.125,35,-30,-3.875,37.5,-30,-3.875,35,-30,-10.125,30,-30,-7.625,35,-30,-7.625,20,-30,-15.125,30,-30,-15.125,37.5,-30,-7.625,35,-30,-6.375,37.5,-30,-6.375,37.5,-30,-10.125,35,-30,-8.875,37.5,-30,-8.875,35,-30,-15.125,30,-30,-12.625,35,-30,-12.625,37.5,-30,-12.625,35,-30,-11.375,37.5,-30,-11.375,37.5,-30,-15.125,35,-30,-13.875,37.5,-30,-13.875,30,-30,-17.625,35,-30,-17.625,37.5,-30,-17.625,35,-30,-16.375,37.5,-30,-16.375,35,-30,-18.875,37.5,-30,-18.875,28.571,-30,-20.125,17.143,-30,-20.125,5.714,-30,-20.125,-5.714,-30,-20.125,-17.143,-30,-20.125,-28.571,-30,-20.125,-40,30,19.875,-28.571,30,19.875,-17.143,30,19.875,-5.714,30,19.875,5.714,30,19.875,17.143,30,19.875,28.571,30,19.875,40,30,19.875,-28.571,30.184,21.786,-17.143,30.184,21.786,-5.714,30.184,21.786,5.714,30.184,21.786,17.143,30.184,21.786,28.571,30.184,21.786,-28.571,30.75,23.674,-17.143,30.75,23.674,-5.714,30.75,23.674,5.714,30.75,23.674,17.143,30.75,23.674,28.571,30.75,23.674,-28.571,31.701,25.455,-17.143,31.701,25.455,-5.714,31.701,25.455,5.714,31.701,25.455,17.143,31.701,25.455,28.571,31.701,25.455,-28.571,33.003,27.019,-17.143,33.003,27.019,-5.714,33.003,27.019,5.714,33.003,27.019,17.143,33.003,27.019,28.571,33.003,27.019,-28.571,34.593,28.287,-17.143,34.593,28.287,-5.714,34.593,28.287,5.714,34.593,28.287,17.143,34.593,28.287,28.571,34.593,28.287,-28.571,36.366,29.191,-17.143,36.366,29.191,-5.714,36.366,29.191,5.714,36.366,29.191,17.143,36.366,29.191,28.571,36.366,29.191,-28.571,38.204,29.712,-17.143,38.204,29.712,-5.714,38.204,29.712,5.714,38.204,29.712,17.143,38.204,29.712,28.571,38.204,29.712,-40,40,29.875,-28.571,40,29.875,-17.143,40,29.875,-5.714,40,29.875,5.714,40,29.875,17.143,40,29.875,28.571,40,29.875,40,40,29.875,-28.571,41.911,29.691,-17.143,41.911,29.691,-5.714,41.911,29.691,5.714,41.911,29.691,17.143,41.911,29.691,28.571,41.911,29.691,-28.571,43.799,29.125,-17.143,43.799,29.125,-5.714,43.799,29.125,5.714,43.799,29.125,17.143,43.799,29.125,28.571,43.799,29.125,-28.571,45.58,28.174,-17.143,45.58,28.174,-5.714,45.58,28.174,5.714,45.58,28.174,17.143,45.58,28.174,28.571,45.58,28.174,-28.571,47.144,26.872,-17.143,47.144,26.872,-5.714,47.144,26.872,5.714,47.144,26.872,17.143,47.144,26.872,28.571,47.144,26.872,-28.571,48.412,25.282,-17.143,48.412,25.282,-5.714,48.412,25.282,5.714,48.412,25.282,17.143,48.412,25.282,28.571,48.412,25.282,-28.571,49.316,23.509,-17.143,49.316,23.509,-5.714,49.316,23.509,5.714,49.316,23.509,17.143,49.316,23.509,28.571,49.316,23.509,-28.571,49.837,21.671,-17.143,49.837,21.671,-5.714,49.837,21.671,5.714,49.837,21.671,17.143,49.837,21.671,28.571,49.837,21.671,-40,50,19.875,-28.571,50,19.875,-17.143,50,19.875,-5.714,50,19.875,5.714,50,19.875,17.143,50,19.875,28.571,50,19.875,40,50,19.875,-40,30.04,20.774,-40,30.167,21.695,-40,30.386,22.627,-40,30.702,23.556,-40,31.117,24.468,-40,31.63,25.347,-40,32.236,26.178,-40,32.929,26.946,-40,33.697,27.639,-40,34.528,28.245,-40,35.407,28.758,-40,36.319,29.173,-40,37.248,29.489,-40,38.18,29.708,-40,39.101,29.835,-40,40.899,29.835,-40,41.82,29.708,-40,42.752,29.489,-40,43.681,29.173,-40,44.593,28.758,-40,45.472,28.245,-40,46.303,27.639,-40,47.071,26.946,-40,47.764,26.178,-40,48.37,25.347,-40,48.883,24.468,-40,49.298,23.556,-40,49.614,22.627,-40,49.833,21.695,-40,49.96,20.774,-34.286,30.184,21.786,-28.571,30.045,20.818,-34.286,30.045,20.818,-37.143,30.045,20.818,-34.286,30.011,20.343,-37.143,30.011,20.343,-37.143,30.184,21.786,-34.286,30.102,21.3,-37.143,30.102,21.3,-34.286,30.75,23.674,-28.571,30.417,22.732,-34.286,30.417,22.732,-37.143,30.417,22.732,-34.286,30.288,22.258,-37.143,30.288,22.258,-37.143,30.75,23.674,-34.286,30.571,23.205,-37.143,30.571,23.205,-34.286,31.701,25.455,-28.571,31.177,24.582,-34.286,31.177,24.582,-37.143,31.177,24.582,-34.286,30.951,24.131,-37.143,30.951,24.131,-37.143,31.701,25.455,-34.286,31.427,25.023,-37.143,31.427,25.023,-34.286,33.003,27.019,-28.571,32.311,26.268,-34.286,32.311,26.268,-37.143,32.311,26.268,-34.286,31.995,25.868,-37.143,31.995,25.868,-37.143,33.003,27.019,-34.286,32.647,26.652,-37.143,32.647,26.652,-34.286,34.593,28.287,-28.571,33.768,27.695,-34.286,33.768,27.695,-37.143,33.768,27.695,-34.286,33.377,27.367,-37.143,33.377,27.367,-37.143,34.593,28.287,-34.286,34.174,28.002,-37.143,34.174,28.002,-34.286,36.366,29.191,-28.571,35.464,28.787,-34.286,35.464,28.787,-37.143,35.464,28.787,-34.286,35.023,28.549,-37.143,35.023,28.549,-37.143,36.366,29.191,-34.286,35.912,29.001,-37.143,35.912,29.001,-34.286,38.204,29.712,-28.571,37.284,29.499,-34.286,37.284,29.499,-37.143,37.284,29.499,-34.286,36.823,29.357,-37.143,36.823,29.357,-37.143,38.204,29.712,-34.286,37.744,29.617,-37.143,37.744,29.617,-34.286,40,29.875,-28.571,39.113,29.836,-34.286,39.113,29.836,-37.143,39.113,29.836,-34.286,38.66,29.785,-37.143,38.66,29.785,-34.286,41.911,29.691,-28.571,40.943,29.83,-34.286,40.943,29.83,-37.143,40.943,29.83,-34.286,40.468,29.864,-37.143,40,29.875,-37.143,40.468,29.864,-37.143,41.911,29.691,-34.286,41.425,29.773,-37.143,41.425,29.773,-34.286,43.799,29.125,-28.571,42.857,29.458,-34.286,42.857,29.458,-37.143,42.857,29.458,-34.286,42.383,29.587,-37.143,42.383,29.587,-37.143,43.799,29.125,-34.286,43.33,29.304,-37.143,43.33,29.304,-34.286,45.58,28.174,-28.571,44.707,28.698,-34.286,44.707,28.698,-37.143,44.707,28.698,-34.286,44.256,28.924,-37.143,44.256,28.924,-37.143,45.58,28.174,-34.286,45.148,28.448,-37.143,45.148,28.448,-34.286,47.144,26.872,-28.571,46.393,27.564,-34.286,46.393,27.564,-37.143,46.393,27.564,-34.286,45.993,27.88,-37.143,45.993,27.88,-37.143,47.144,26.872,-34.286,46.777,27.228,-37.143,46.777,27.228,-34.286,48.412,25.282,-28.571,47.82,26.107,-34.286,47.82,26.107,-37.143,47.82,26.107,-34.286,47.492,26.498,-37.143,47.492,26.498,-37.143,48.412,25.282,-34.286,48.127,25.701,-37.143,48.127,25.701,-34.286,49.316,23.509,-28.571,48.912,24.411,-34.286,48.912,24.411,-37.143,48.912,24.411,-34.286,48.674,24.852,-37.143,48.674,24.852,-37.143,49.316,23.509,-34.286,49.126,23.963,-37.143,49.126,23.963,-34.286,49.837,21.671,-28.571,49.624,22.591,-34.286,49.624,22.591,-37.143,49.624,22.591,-34.286,49.482,23.052,-37.143,49.482,23.052,-37.143,49.837,21.671,-34.286,49.742,22.131,-37.143,49.742,22.131,-28.571,49.961,20.762,-34.286,49.961,20.762,-37.143,49.961,20.762,-34.286,49.91,21.215,-37.143,49.91,21.215,-34.286,49.99,20.315,-37.143,49.99,20.315,40,49.96,20.774,40,49.833,21.695,40,49.614,22.627,40,49.298,23.556,40,48.883,24.468,40,48.37,25.347,40,47.764,26.178,40,47.071,26.946,40,46.303,27.639,40,45.472,28.245,40,44.593,28.758,40,43.681,29.173,40,42.752,29.489,40,41.82,29.708,40,40.899,29.835,40,39.101,29.835,40,38.18,29.708,40,37.248,29.489,40,36.319,29.173,40,35.407,28.758,40,34.528,28.245,40,33.697,27.639,40,32.929,26.946,40,32.236,26.178,40,31.63,25.347,40,31.117,24.468,40,30.702,23.556,40,30.386,22.627,40,30.167,21.695,40,30.04,20.774,34.286,49.837,21.671,28.571,49.961,20.762,34.286,49.961,20.762,37.143,49.961,20.762,34.286,49.99,20.315,37.143,49.99,20.315,37.143,49.837,21.671,34.286,49.91,21.215,37.143,49.91,21.215,34.286,49.316,23.509,28.571,49.624,22.591,34.286,49.624,22.591,37.143,49.624,22.591,34.286,49.742,22.131,37.143,49.742,22.131,37.143,49.316,23.509,34.286,49.482,23.052,37.143,49.482,23.052,34.286,48.412,25.282,28.571,48.912,24.411,34.286,48.912,24.411,37.143,48.912,24.411,34.286,49.126,23.963,37.143,49.126,23.963,37.143,48.412,25.282,34.286,48.674,24.852,37.143,48.674,24.852,34.286,47.144,26.872,28.571,47.82,26.107,34.286,47.82,26.107,37.143,47.82,26.107,34.286,48.127,25.701,37.143,48.127,25.701,37.143,47.144,26.872,34.286,47.492,26.498,37.143,47.492,26.498,34.286,45.58,28.174,28.571,46.393,27.564,34.286,46.393,27.564,37.143,46.393,27.564,34.286,46.777,27.228,37.143,46.777,27.228,37.143,45.58,28.174,34.286,45.993,27.88,37.143,45.993,27.88,34.286,43.799,29.125,28.571,44.707,28.698,34.286,44.707,28.698,37.143,44.707,28.698,34.286,45.148,28.448,37.143,45.148,28.448,37.143,43.799,29.125,34.286,44.256,28.924,37.143,44.256,28.924,34.286,41.911,29.691,28.571,42.857,29.458,34.286,42.857,29.458,37.143,42.857,29.458,34.286,43.33,29.304,37.143,43.33,29.304,37.143,41.911,29.691,34.286,42.383,29.587,37.143,42.383,29.587,34.286,40,29.875,28.571,40.943,29.83,34.286,40.943,29.83,37.143,40.943,29.83,34.286,41.425,29.773,37.143,41.425,29.773,37.143,40,29.875,34.286,40.468,29.864,37.143,40.468,29.864,34.286,38.204,29.712,28.571,39.113,29.836,34.286,39.113,29.836,37.143,39.113,29.836,37.143,38.204,29.712,34.286,38.66,29.785,37.143,38.66,29.785,34.286,36.366,29.191,28.571,37.284,29.499,34.286,37.284,29.499,37.143,37.284,29.499,34.286,37.744,29.617,37.143,37.744,29.617,37.143,36.366,29.191,34.286,36.823,29.357,37.143,36.823,29.357,34.286,34.593,28.287,28.571,35.464,28.787,34.286,35.464,28.787,37.143,35.464,28.787,34.286,35.912,29.001,37.143,35.912,29.001,37.143,34.593,28.287,34.286,35.023,28.549,37.143,35.023,28.549,34.286,33.003,27.019,28.571,33.768,27.695,34.286,33.768,27.695,37.143,33.768,27.695,34.286,34.174,28.002,37.143,34.174,28.002,37.143,33.003,27.019,34.286,33.377,27.367,37.143,33.377,27.367,34.286,31.701,25.455,28.571,32.311,26.268,34.286,32.311,26.268,37.143,32.311,26.268,34.286,32.647,26.652,37.143,32.647,26.652,37.143,31.701,25.455,34.286,31.995,25.868,37.143,31.995,25.868,34.286,30.75,23.674,28.571,31.177,24.582,34.286,31.177,24.582,37.143,31.177,24.582,34.286,31.427,25.023,37.143,31.427,25.023,37.143,30.75,23.674,34.286,30.951,24.131,37.143,30.951,24.131,34.286,30.184,21.786,28.571,30.417,22.732,34.286,30.417,22.732,37.143,30.417,22.732,34.286,30.571,23.205,37.143,30.571,23.205,37.143,30.184,21.786,34.286,30.288,22.258,37.143,30.288,22.258,28.571,30.045,20.818,34.286,30.045,20.818,37.143,30.045,20.818,34.286,30.102,21.3,37.143,30.102,21.3,34.286,30.011,20.343,37.143,30.011,20.343,-40,-10,19.875,-28.571,-10,19.875,-17.143,-10,19.875,-5.714,-10,19.875,5.714,-10,19.875,17.143,-10,19.875,28.571,-10,19.875,40,-10,19.875,-28.571,-9.816,21.786,-17.143,-9.816,21.786,-5.714,-9.816,21.786,5.714,-9.816,21.786,17.143,-9.816,21.786,28.571,-9.816,21.786,-28.571,-9.25,23.674,-17.143,-9.25,23.674,-5.714,-9.25,23.674,5.714,-9.25,23.674,17.143,-9.25,23.674,28.571,-9.25,23.674,-28.571,-8.299,25.455,-17.143,-8.299,25.455,-5.714,-8.299,25.455,5.714,-8.299,25.455,17.143,-8.299,25.455,28.571,-8.299,25.455,-28.571,-6.997,27.019,-17.143,-6.997,27.019,-5.714,-6.997,27.019,5.714,-6.997,27.019,17.143,-6.997,27.019,28.571,-6.997,27.019,-28.571,-5.407,28.287,-17.143,-5.407,28.287,-5.714,-5.407,28.287,5.714,-5.407,28.287,17.143,-5.407,28.287,28.571,-5.407,28.287,-28.571,-3.634,29.191,-17.143,-3.634,29.191,-5.714,-3.634,29.191,5.714,-3.634,29.191,17.143,-3.634,29.191,28.571,-3.634,29.191,-28.571,-1.796,29.712,-17.143,-1.796,29.712,-5.714,-1.796,29.712,5.714,-1.796,29.712,17.143,-1.796,29.712,28.571,-1.796,29.712,-40,0,29.875,-28.571,0,29.875,-17.143,0,29.875,-5.714,0,29.875,5.714,0,29.875,17.143,0,29.875,28.571,0,29.875,40,0,29.875,-28.571,1.911,29.691,-17.143,1.911,29.691,-5.714,1.911,29.691,5.714,1.911,29.691,17.143,1.911,29.691,28.571,1.911,29.691,-28.571,3.799,29.125,-17.143,3.799,29.125,-5.714,3.799,29.125,5.714,3.799,29.125,17.143,3.799,29.125,28.571,3.799,29.125,-28.571,5.58,28.174,-17.143,5.58,28.174,-5.714,5.58,28.174,5.714,5.58,28.174,17.143,5.58,28.174,28.571,5.58,28.174,-28.571,7.144,26.872,-17.143,7.144,26.872,-5.714,7.144,26.872,5.714,7.144,26.872,17.143,7.144,26.872,28.571,7.144,26.872,-28.571,8.412,25.282,-17.143,8.412,25.282,-5.714,8.412,25.282,5.714,8.412,25.282,17.143,8.412,25.282,28.571,8.412,25.282,-28.571,9.316,23.509,-17.143,9.316,23.509,-5.714,9.316,23.509,5.714,9.316,23.509,17.143,9.316,23.509,28.571,9.316,23.509,-28.571,9.837,21.671,-17.143,9.837,21.671,-5.714,9.837,21.671,5.714,9.837,21.671,17.143,9.837,21.671,28.571,9.837,21.671,-40,10,19.875,-28.571,10,19.875,-17.143,10,19.875,-5.714,10,19.875,5.714,10,19.875,17.143,10,19.875,28.571,10,19.875,40,10,19.875,-40,-9.96,20.774,-40,-9.833,21.695,-40,-9.614,22.627,-40,-9.298,23.556,-40,-8.883,24.468,-40,-8.37,25.347,-40,-7.764,26.178,-40,-7.071,26.946,-40,-6.303,27.639,-40,-5.472,28.245,-40,-4.593,28.758,-40,-3.681,29.173,-40,-2.752,29.489,-40,-1.82,29.708,-40,-.899,29.835,-40,.899,29.835,-40,1.82,29.708,-40,2.752,29.489,-40,3.681,29.173,-40,4.593,28.758,-40,5.472,28.245,-40,6.303,27.639,-40,7.071,26.946,-40,7.764,26.178,-40,8.37,25.347,-40,8.883,24.468,-40,9.298,23.556,-40,9.614,22.627,-40,9.833,21.695,-40,9.96,20.774,-34.286,-9.816,21.786,-28.571,-9.955,20.818,-34.286,-9.955,20.818,-37.143,-9.955,20.818,-34.286,-9.989,20.343,-37.143,-9.989,20.343,-37.143,-9.816,21.786,-34.286,-9.898,21.3,-37.143,-9.898,21.3,-34.286,-9.25,23.674,-28.571,-9.583,22.732,-34.286,-9.583,22.732,-37.143,-9.583,22.732,-34.286,-9.712,22.258,-37.143,-9.712,22.258,-37.143,-9.25,23.674,-34.286,-9.429,23.205,-37.143,-9.429,23.205,-34.286,-8.299,25.455,-28.571,-8.823,24.582,-34.286,-8.823,24.582,-37.143,-8.823,24.582,-34.286,-9.049,24.131,-37.143,-9.049,24.131,-37.143,-8.299,25.455,-34.286,-8.573,25.023,-37.143,-8.573,25.023,-34.286,-6.997,27.019,-28.571,-7.689,26.268,-34.286,-7.689,26.268,-37.143,-7.689,26.268,-34.286,-8.005,25.868,-37.143,-8.005,25.868,-37.143,-6.997,27.019,-34.286,-7.353,26.652,-37.143,-7.353,26.652,-34.286,-5.407,28.287,-28.571,-6.232,27.695,-34.286,-6.232,27.695,-37.143,-6.232,27.695,-34.286,-6.623,27.367,-37.143,-6.623,27.367,-37.143,-5.407,28.287,-34.286,-5.826,28.002,-37.143,-5.826,28.002,-34.286,-3.634,29.191,-28.571,-4.536,28.787,-34.286,-4.536,28.787,-37.143,-4.536,28.787,-34.286,-4.977,28.549,-37.143,-4.977,28.549,-37.143,-3.634,29.191,-34.286,-4.088,29.001,-37.143,-4.088,29.001,-34.286,-1.796,29.712,-28.571,-2.716,29.499,-34.286,-2.716,29.499,-37.143,-2.716,29.499,-34.286,-3.177,29.357,-37.143,-3.177,29.357,-37.143,-1.796,29.712,-34.286,-2.256,29.617,-37.143,-2.256,29.617,-34.286,0,29.875,-28.571,-.887,29.836,-34.286,-.887,29.836,-37.143,-.887,29.836,-34.286,-1.34,29.785,-37.143,-1.34,29.785,-34.286,1.911,29.691,-28.571,.943,29.83,-34.286,.943,29.83,-37.143,.943,29.83,-34.286,.468,29.864,-37.143,0,29.875,-37.143,.468,29.864,-37.143,1.911,29.691,-34.286,1.425,29.773,-37.143,1.425,29.773,-34.286,3.799,29.125,-28.571,2.857,29.458,-34.286,2.857,29.458,-37.143,2.857,29.458,-34.286,2.383,29.587,-37.143,2.383,29.587,-37.143,3.799,29.125,-34.286,3.33,29.304,-37.143,3.33,29.304,-34.286,5.58,28.174,-28.571,4.707,28.698,-34.286,4.707,28.698,-37.143,4.707,28.698,-34.286,4.256,28.924,-37.143,4.256,28.924,-37.143,5.58,28.174,-34.286,5.148,28.448,-37.143,5.148,28.448,-34.286,7.144,26.872,-28.571,6.393,27.564,-34.286,6.393,27.564,-37.143,6.393,27.564,-34.286,5.993,27.88,-37.143,5.993,27.88,-37.143,7.144,26.872,-34.286,6.777,27.228,-37.143,6.777,27.228,-34.286,8.412,25.282,-28.571,7.82,26.107,-34.286,7.82,26.107,-37.143,7.82,26.107,-34.286,7.492,26.498,-37.143,7.492,26.498,-37.143,8.412,25.282,-34.286,8.127,25.701,-37.143,8.127,25.701,-34.286,9.316,23.509,-28.571,8.912,24.411,-34.286,8.912,24.411,-37.143,8.912,24.411,-34.286,8.674,24.852,-37.143,8.674,24.852,-37.143,9.316,23.509,-34.286,9.126,23.963,-37.143,9.126,23.963,-34.286,9.837,21.671,-28.571,9.624,22.591,-34.286,9.624,22.591,-37.143,9.624,22.591,-34.286,9.482,23.052,-37.143,9.482,23.052,-37.143,9.837,21.671,-34.286,9.742,22.131,-37.143,9.742,22.131,-28.571,9.961,20.762,-34.286,9.961,20.762,-37.143,9.961,20.762,-34.286,9.91,21.215,-37.143,9.91,21.215,-34.286,9.99,20.315,-37.143,9.99,20.315,40,9.96,20.774,40,9.833,21.695,40,9.614,22.627,40,9.298,23.556,40,8.883,24.468,40,8.37,25.347,40,7.764,26.178,40,7.071,26.946,40,6.303,27.639,40,5.472,28.245,40,4.593,28.758,40,3.681,29.173,40,2.752,29.489,40,1.82,29.708,40,.899,29.835,40,-.899,29.835,40,-1.82,29.708,40,-2.752,29.489,40,-3.681,29.173,40,-4.593,28.758,40,-5.472,28.245,40,-6.303,27.639,40,-7.071,26.946,40,-7.764,26.178,40,-8.37,25.347,40,-8.883,24.468,40,-9.298,23.556,40,-9.614,22.627,40,-9.833,21.695,40,-9.96,20.774,34.286,9.837,21.671,28.571,9.961,20.762,34.286,9.961,20.762,37.143,9.961,20.762,34.286,9.99,20.315,37.143,9.99,20.315,37.143,9.837,21.671,34.286,9.91,21.215,37.143,9.91,21.215,34.286,9.316,23.509,28.571,9.624,22.591,34.286,9.624,22.591,37.143,9.624,22.591,34.286,9.742,22.131,37.143,9.742,22.131,37.143,9.316,23.509,34.286,9.482,23.052,37.143,9.482,23.052,34.286,8.412,25.282,28.571,8.912,24.411,34.286,8.912,24.411,37.143,8.912,24.411,34.286,9.126,23.963,37.143,9.126,23.963,37.143,8.412,25.282,34.286,8.674,24.852,37.143,8.674,24.852,34.286,7.144,26.872,28.571,7.82,26.107,34.286,7.82,26.107,37.143,7.82,26.107,34.286,8.127,25.701,37.143,8.127,25.701,37.143,7.144,26.872,34.286,7.492,26.498,37.143,7.492,26.498,34.286,5.58,28.174,28.571,6.393,27.564,34.286,6.393,27.564,37.143,6.393,27.564,34.286,6.777,27.228,37.143,6.777,27.228,37.143,5.58,28.174,34.286,5.993,27.88,37.143,5.993,27.88,34.286,3.799,29.125,28.571,4.707,28.698,34.286,4.707,28.698,37.143,4.707,28.698,34.286,5.148,28.448,37.143,5.148,28.448,37.143,3.799,29.125,34.286,4.256,28.924,37.143,4.256,28.924,34.286,1.911,29.691,28.571,2.857,29.458,34.286,2.857,29.458,37.143,2.857,29.458,34.286,3.33,29.304,37.143,3.33,29.304,37.143,1.911,29.691,34.286,2.383,29.587,37.143,2.383,29.587,34.286,0,29.875,28.571,.943,29.83,34.286,.943,29.83,37.143,.943,29.83,34.286,1.425,29.773,37.143,1.425,29.773,37.143,0,29.875,34.286,.468,29.864,37.143,.468,29.864,34.286,-1.796,29.712,28.571,-.887,29.836,34.286,-.887,29.836,37.143,-.887,29.836,37.143,-1.796,29.712,34.286,-1.34,29.785,37.143,-1.34,29.785,34.286,-3.634,29.191,28.571,-2.716,29.499,34.286,-2.716,29.499,37.143,-2.716,29.499,34.286,-2.256,29.617,37.143,-2.256,29.617,37.143,-3.634,29.191,34.286,-3.177,29.357,37.143,-3.177,29.357,34.286,-5.407,28.287,28.571,-4.536,28.787,34.286,-4.536,28.787,37.143,-4.536,28.787,34.286,-4.088,29.001,37.143,-4.088,29.001,37.143,-5.407,28.287,34.286,-4.977,28.549,37.143,-4.977,28.549,34.286,-6.997,27.019,28.571,-6.232,27.695,34.286,-6.232,27.695,37.143,-6.232,27.695,34.286,-5.826,28.002,37.143,-5.826,28.002,37.143,-6.997,27.019,34.286,-6.623,27.367,37.143,-6.623,27.367,34.286,-8.299,25.455,28.571,-7.689,26.268,34.286,-7.689,26.268,37.143,-7.689,26.268,34.286,-7.353,26.652,37.143,-7.353,26.652,37.143,-8.299,25.455,34.286,-8.005,25.868,37.143,-8.005,25.868,34.286,-9.25,23.674,28.571,-8.823,24.582,34.286,-8.823,24.582,37.143,-8.823,24.582,34.286,-8.573,25.023,37.143,-8.573,25.023,37.143,-9.25,23.674,34.286,-9.049,24.131,37.143,-9.049,24.131,34.286,-9.816,21.786,28.571,-9.583,22.732,34.286,-9.583,22.732,37.143,-9.583,22.732,34.286,-9.429,23.205,37.143,-9.429,23.205,37.143,-9.816,21.786,34.286,-9.712,22.258,37.143,-9.712,22.258,28.571,-9.955,20.818,34.286,-9.955,20.818,37.143,-9.955,20.818,34.286,-9.898,21.3,37.143,-9.898,21.3,34.286,-9.989,20.343,37.143,-9.989,20.343,-40,-50,19.875,-28.571,-50,19.875,-17.143,-50,19.875,-5.714,-50,19.875,5.714,-50,19.875,17.143,-50,19.875,28.571,-50,19.875,40,-50,19.875,-28.571,-49.816,21.786,-17.143,-49.816,21.786,-5.714,-49.816,21.786,5.714,-49.816,21.786,17.143,-49.816,21.786,28.571,-49.816,21.786,-28.571,-49.25,23.674,-17.143,-49.25,23.674,-5.714,-49.25,23.674,5.714,-49.25,23.674,17.143,-49.25,23.674,28.571,-49.25,23.674,-28.571,-48.299,25.455,-17.143,-48.299,25.455,-5.714,-48.299,25.455,5.714,-48.299,25.455,17.143,-48.299,25.455,28.571,-48.299,25.455,-28.571,-46.997,27.019,-17.143,-46.997,27.019,-5.714,-46.997,27.019,5.714,-46.997,27.019,17.143,-46.997,27.019,28.571,-46.997,27.019,-28.571,-45.407,28.287,-17.143,-45.407,28.287,-5.714,-45.407,28.287,5.714,-45.407,28.287,17.143,-45.407,28.287,28.571,-45.407,28.287,-28.571,-43.634,29.191,-17.143,-43.634,29.191,-5.714,-43.634,29.191,5.714,-43.634,29.191,17.143,-43.634,29.191,28.571,-43.634,29.191,-28.571,-41.796,29.712,-17.143,-41.796,29.712,-5.714,-41.796,29.712,5.714,-41.796,29.712,17.143,-41.796,29.712,28.571,-41.796,29.712,-40,-40,29.875,-28.571,-40,29.875,-17.143,-40,29.875,-5.714,-40,29.875,5.714,-40,29.875,17.143,-40,29.875,28.571,-40,29.875,40,-40,29.875,-28.571,-38.089,29.691,-17.143,-38.089,29.691,-5.714,-38.089,29.691,5.714,-38.089,29.691,17.143,-38.089,29.691,28.571,-38.089,29.691,-28.571,-36.201,29.125,-17.143,-36.201,29.125,-5.714,-36.201,29.125,5.714,-36.201,29.125,17.143,-36.201,29.125,28.571,-36.201,29.125,-28.571,-34.42,28.174,-17.143,-34.42,28.174,-5.714,-34.42,28.174,5.714,-34.42,28.174,17.143,-34.42,28.174,28.571,-34.42,28.174,-28.571,-32.856,26.872,-17.143,-32.856,26.872,-5.714,-32.856,26.872,5.714,-32.856,26.872,17.143,-32.856,26.872,28.571,-32.856,26.872,-28.571,-31.588,25.282,-17.143,-31.588,25.282,-5.714,-31.588,25.282,5.714,-31.588,25.282,17.143,-31.588,25.282,28.571,-31.588,25.282,-28.571,-30.684,23.509,-17.143,-30.684,23.509,-5.714,-30.684,23.509,5.714,-30.684,23.509,17.143,-30.684,23.509,28.571,-30.684,23.509,-28.571,-30.163,21.671,-17.143,-30.163,21.671,-5.714,-30.163,21.671,5.714,-30.163,21.671,17.143,-30.163,21.671,28.571,-30.163,21.671,-40,-30,19.875,-28.571,-30,19.875,-17.143,-30,19.875,-5.714,-30,19.875,5.714,-30,19.875,17.143,-30,19.875,28.571,-30,19.875,40,-30,19.875,-40,-49.96,20.774,-40,-49.833,21.695,-40,-49.614,22.627,-40,-49.298,23.556,-40,-48.883,24.468,-40,-48.37,25.347,-40,-47.764,26.178,-40,-47.071,26.946,-40,-46.303,27.639,-40,-45.472,28.245,-40,-44.593,28.758,-40,-43.681,29.173,-40,-42.752,29.489,-40,-41.82,29.708,-40,-40.899,29.835,-40,-39.101,29.835,-40,-38.18,29.708,-40,-37.248,29.489,-40,-36.319,29.173,-40,-35.407,28.758,-40,-34.528,28.245,-40,-33.697,27.639,-40,-32.929,26.946,-40,-32.236,26.178,-40,-31.63,25.347,-40,-31.117,24.468,-40,-30.702,23.556,-40,-30.386,22.627,-40,-30.167,21.695,-40,-30.04,20.774,-34.286,-49.816,21.786,-28.571,-49.955,20.818,-34.286,-49.955,20.818,-37.143,-49.955,20.818,-34.286,-49.989,20.343,-37.143,-49.989,20.343,-37.143,-49.816,21.786,-34.286,-49.898,21.3,-37.143,-49.898,21.3,-34.286,-49.25,23.674,-28.571,-49.583,22.732,-34.286,-49.583,22.732,-37.143,-49.583,22.732,-34.286,-49.712,22.258,-37.143,-49.712,22.258,-37.143,-49.25,23.674,-34.286,-49.429,23.205,-37.143,-49.429,23.205,-34.286,-48.299,25.455,-28.571,-48.823,24.582,-34.286,-48.823,24.582,-37.143,-48.823,24.582,-34.286,-49.049,24.131,-37.143,-49.049,24.131,-37.143,-48.299,25.455,-34.286,-48.573,25.023,-37.143,-48.573,25.023,-34.286,-46.997,27.019,-28.571,-47.689,26.268,-34.286,-47.689,26.268,-37.143,-47.689,26.268,-34.286,-48.005,25.868,-37.143,-48.005,25.868,-37.143,-46.997,27.019,-34.286,-47.353,26.652,-37.143,-47.353,26.652,-34.286,-45.407,28.287,-28.571,-46.232,27.695,-34.286,-46.232,27.695,-37.143,-46.232,27.695,-34.286,-46.623,27.367,-37.143,-46.623,27.367,-37.143,-45.407,28.287,-34.286,-45.826,28.002,-37.143,-45.826,28.002,-34.286,-43.634,29.191,-28.571,-44.536,28.787,-34.286,-44.536,28.787,-37.143,-44.536,28.787,-34.286,-44.977,28.549,-37.143,-44.977,28.549,-37.143,-43.634,29.191,-34.286,-44.088,29.001,-37.143,-44.088,29.001,-34.286,-41.796,29.712,-28.571,-42.716,29.499,-34.286,-42.716,29.499,-37.143,-42.716,29.499,-34.286,-43.177,29.357,-37.143,-43.177,29.357,-37.143,-41.796,29.712,-34.286,-42.256,29.617,-37.143,-42.256,29.617,-34.286,-40,29.875,-28.571,-40.887,29.836,-34.286,-40.887,29.836,-37.143,-40.887,29.836,-34.286,-41.34,29.785,-37.143,-41.34,29.785,-37.143,-40,29.875,-34.286,-40.44,29.865,-37.143,-40.44,29.865,-34.286,-38.089,29.691,-28.571,-39.057,29.83,-34.286,-39.057,29.83,-37.143,-39.057,29.83,-34.286,-39.532,29.864,-37.143,-39.532,29.864,-37.143,-38.089,29.691,-34.286,-38.575,29.773,-37.143,-38.575,29.773,-34.286,-36.201,29.125,-28.571,-37.143,29.458,-34.286,-37.143,29.458,-37.143,-37.143,29.458,-34.286,-37.617,29.587,-37.143,-37.617,29.587,-37.143,-36.201,29.125,-34.286,-36.67,29.304,-37.143,-36.67,29.304,-34.286,-34.42,28.174,-28.571,-35.293,28.698,-34.286,-35.293,28.698,-37.143,-35.293,28.698,-34.286,-35.744,28.924,-37.143,-35.744,28.924,-37.143,-34.42,28.174,-34.286,-34.852,28.448,-37.143,-34.852,28.448,-34.286,-32.856,26.872,-28.571,-33.607,27.564,-34.286,-33.607,27.564,-37.143,-33.607,27.564,-34.286,-34.007,27.88,-37.143,-34.007,27.88,-37.143,-32.856,26.872,-34.286,-33.223,27.228,-37.143,-33.223,27.228,-34.286,-31.588,25.282,-28.571,-32.18,26.107,-34.286,-32.18,26.107,-37.143,-32.18,26.107,-34.286,-32.508,26.498,-37.143,-32.508,26.498,-37.143,-31.588,25.282,-34.286,-31.873,25.701,-37.143,-31.873,25.701,-34.286,-30.684,23.509,-28.571,-31.088,24.411,-34.286,-31.088,24.411,-37.143,-31.088,24.411,-34.286,-31.326,24.852,-37.143,-31.326,24.852,-37.143,-30.684,23.509,-34.286,-30.874,23.963,-37.143,-30.874,23.963,-34.286,-30.163,21.671,-28.571,-30.376,22.591,-34.286,-30.376,22.591,-37.143,-30.376,22.591,-34.286,-30.518,23.052,-37.143,-30.518,23.052,-37.143,-30.163,21.671,-34.286,-30.258,22.131,-37.143,-30.258,22.131,-28.571,-30.039,20.762,-34.286,-30.039,20.762,-37.143,-30.039,20.762,-34.286,-30.09,21.215,-37.143,-30.09,21.215,-34.286,-30.01,20.315,-37.143,-30.01,20.315,40,-30.04,20.774,40,-30.167,21.695,40,-30.386,22.627,40,-30.702,23.556,40,-31.117,24.468,40,-31.63,25.347,40,-32.236,26.178,40,-32.929,26.946,40,-33.697,27.639,40,-34.528,28.245,40,-35.407,28.758,40,-36.319,29.173,40,-37.248,29.489,40,-38.18,29.708,40,-39.101,29.835,40,-40.899,29.835,40,-41.82,29.708,40,-42.752,29.489,40,-43.681,29.173,40,-44.593,28.758,40,-45.472,28.245,40,-46.303,27.639,40,-47.071,26.946,40,-47.764,26.178,40,-48.37,25.347,40,-48.883,24.468,40,-49.298,23.556,40,-49.614,22.627,40,-49.833,21.695,40,-49.96,20.774,34.286,-30.163,21.671,28.571,-30.039,20.762,34.286,-30.039,20.762,37.143,-30.039,20.762,34.286,-30.01,20.315,37.143,-30.01,20.315,37.143,-30.163,21.671,34.286,-30.09,21.215,37.143,-30.09,21.215,34.286,-30.684,23.509,28.571,-30.376,22.591,34.286,-30.376,22.591,37.143,-30.376,22.591,34.286,-30.258,22.131,37.143,-30.258,22.131,37.143,-30.684,23.509,34.286,-30.518,23.052,37.143,-30.518,23.052,34.286,-31.588,25.282,28.571,-31.088,24.411,34.286,-31.088,24.411,37.143,-31.088,24.411,34.286,-30.874,23.963,37.143,-30.874,23.963,37.143,-31.588,25.282,34.286,-31.326,24.852,37.143,-31.326,24.852,34.286,-32.856,26.872,28.571,-32.18,26.107,34.286,-32.18,26.107,37.143,-32.18,26.107,34.286,-31.873,25.701,37.143,-31.873,25.701,37.143,-32.856,26.872,34.286,-32.508,26.498,37.143,-32.508,26.498,34.286,-34.42,28.174,28.571,-33.607,27.564,34.286,-33.607,27.564,37.143,-33.607,27.564,34.286,-33.223,27.228,37.143,-33.223,27.228,37.143,-34.42,28.174,34.286,-34.007,27.88,37.143,-34.007,27.88,34.286,-36.201,29.125,28.571,-35.293,28.698,34.286,-35.293,28.698,37.143,-35.293,28.698,34.286,-34.852,28.448,37.143,-34.852,28.448,37.143,-36.201,29.125,34.286,-35.744,28.924,37.143,-35.744,28.924,34.286,-38.089,29.691,28.571,-37.143,29.458,34.286,-37.143,29.458,37.143,-37.143,29.458,34.286,-36.67,29.304,37.143,-36.67,29.304,37.143,-38.089,29.691,34.286,-37.617,29.587,37.143,-37.617,29.587,34.286,-40,29.875,28.571,-39.057,29.83,34.286,-39.057,29.83,37.143,-39.057,29.83,34.286,-38.575,29.773,37.143,-38.575,29.773,37.143,-40,29.875,34.286,-39.532,29.864,37.143,-39.532,29.864,34.286,-41.796,29.712,28.571,-40.887,29.836,34.286,-40.887,29.836,37.143,-40.887,29.836,34.286,-40.44,29.865,37.143,-40.44,29.865,37.143,-41.796,29.712,34.286,-41.34,29.785,37.143,-41.34,29.785,34.286,-43.634,29.191,28.571,-42.716,29.499,34.286,-42.716,29.499,37.143,-42.716,29.499,34.286,-42.256,29.617,37.143,-42.256,29.617,37.143,-43.634,29.191,34.286,-43.177,29.357,37.143,-43.177,29.357,34.286,-45.407,28.287,28.571,-44.536,28.787,34.286,-44.536,28.787,37.143,-44.536,28.787,34.286,-44.088,29.001,37.143,-44.088,29.001,37.143,-45.407,28.287,34.286,-44.977,28.549,37.143,-44.977,28.549,34.286,-46.997,27.019,28.571,-46.232,27.695,34.286,-46.232,27.695,37.143,-46.232,27.695,34.286,-45.826,28.002,37.143,-45.826,28.002,37.143,-46.997,27.019,34.286,-46.623,27.367,37.143,-46.623,27.367,34.286,-48.299,25.455,28.571,-47.689,26.268,34.286,-47.689,26.268,37.143,-47.689,26.268,34.286,-47.353,26.652,37.143,-47.353,26.652,37.143,-48.299,25.455,34.286,-48.005,25.868,37.143,-48.005,25.868,34.286,-49.25,23.674,28.571,-48.823,24.582,34.286,-48.823,24.582,37.143,-48.823,24.582,34.286,-48.573,25.023,37.143,-48.573,25.023,37.143,-49.25,23.674,34.286,-49.049,24.131,37.143,-49.049,24.131,34.286,-49.816,21.786,28.571,-49.583,22.732,34.286,-49.583,22.732,37.143,-49.583,22.732,34.286,-49.429,23.205,37.143,-49.429,23.205,37.143,-49.816,21.786,34.286,-49.712,22.258,37.143,-49.712,22.258,28.571,-49.955,20.818,34.286,-49.955,20.818,37.143,-49.955,20.818,34.286,-49.898,21.3,37.143,-49.898,21.3,34.286,-49.989,20.343,37.143,-49.989,20.343,-40,30,-20.125,-28.571,30,-20.125,-17.143,30,-20.125,-5.714,30,-20.125,5.714,30,-20.125,17.143,30,-20.125,28.571,30,-20.125,40,30,-20.125,-28.571,29.816,-22.036,-17.143,29.816,-22.036,-5.714,29.816,-22.036,5.714,29.816,-22.036,17.143,29.816,-22.036,28.571,29.816,-22.036,-28.571,29.25,-23.924,-17.143,29.25,-23.924,-5.714,29.25,-23.924,5.714,29.25,-23.924,17.143,29.25,-23.924,28.571,29.25,-23.924,-28.571,28.299,-25.705,-17.143,28.299,-25.705,-5.714,28.299,-25.705,5.714,28.299,-25.705,17.143,28.299,-25.705,28.571,28.299,-25.705,-28.571,26.997,-27.269,-17.143,26.997,-27.269,-5.714,26.997,-27.269,5.714,26.997,-27.269,17.143,26.997,-27.269,28.571,26.997,-27.269,-28.571,25.407,-28.537,-17.143,25.407,-28.537,-5.714,25.407,-28.537,5.714,25.407,-28.537,17.143,25.407,-28.537,28.571,25.407,-28.537,-28.571,23.634,-29.441,-17.143,23.634,-29.441,-5.714,23.634,-29.441,5.714,23.634,-29.441,17.143,23.634,-29.441,28.571,23.634,-29.441,-28.571,21.796,-29.962,-17.143,21.796,-29.962,-5.714,21.796,-29.962,5.714,21.796,-29.962,17.143,21.796,-29.962,28.571,21.796,-29.962,-40,20,-30.125,-28.571,20,-30.125,-17.143,20,-30.125,-5.714,20,-30.125,5.714,20,-30.125,17.143,20,-30.125,28.571,20,-30.125,40,20,-30.125,-28.571,18.089,-29.941,-17.143,18.089,-29.941,-5.714,18.089,-29.941,5.714,18.089,-29.941,17.143,18.089,-29.941,28.571,18.089,-29.941,-28.571,16.201,-29.375,-17.143,16.201,-29.375,-5.714,16.201,-29.375,5.714,16.201,-29.375,17.143,16.201,-29.375,28.571,16.201,-29.375,-28.571,14.42,-28.424,-17.143,14.42,-28.424,-5.714,14.42,-28.424,5.714,14.42,-28.424,17.143,14.42,-28.424,28.571,14.42,-28.424,-28.571,12.856,-27.122,-17.143,12.856,-27.122,-5.714,12.856,-27.122,5.714,12.856,-27.122,17.143,12.856,-27.122,28.571,12.856,-27.122,-28.571,11.588,-25.532,-17.143,11.588,-25.532,-5.714,11.588,-25.532,5.714,11.588,-25.532,17.143,11.588,-25.532,28.571,11.588,-25.532,-28.571,10.684,-23.759,-17.143,10.684,-23.759,-5.714,10.684,-23.759,5.714,10.684,-23.759,17.143,10.684,-23.759,28.571,10.684,-23.759,-28.571,10.163,-21.921,-17.143,10.163,-21.921,-5.714,10.163,-21.921,5.714,10.163,-21.921,17.143,10.163,-21.921,28.571,10.163,-21.921,-40,10,-20.125,-28.571,10,-20.125,-17.143,10,-20.125,-5.714,10,-20.125,5.714,10,-20.125,17.143,10,-20.125,28.571,10,-20.125,40,10,-20.125,-40,29.96,-21.024,-40,29.833,-21.945,-40,29.614,-22.877,-40,29.298,-23.806,-40,28.883,-24.718,-40,28.37,-25.597,-40,27.764,-26.428,-40,27.071,-27.196,-40,26.303,-27.889,-40,25.472,-28.495,-40,24.593,-29.008,-40,23.681,-29.423,-40,22.752,-29.739,-40,21.82,-29.958,-40,20.899,-30.085,-40,19.101,-30.085,-40,18.18,-29.958,-40,17.248,-29.739,-40,16.319,-29.423,-40,15.407,-29.008,-40,14.528,-28.495,-40,13.697,-27.889,-40,12.929,-27.196,-40,12.236,-26.428,-40,11.63,-25.597,-40,11.117,-24.718,-40,10.702,-23.806,-40,10.386,-22.877,-40,10.167,-21.945,-40,10.04,-21.024,-34.286,29.816,-22.036,-28.571,29.955,-21.068,-34.286,29.955,-21.068,-37.143,29.955,-21.068,-34.286,29.989,-20.593,-37.143,29.989,-20.593,-37.143,29.816,-22.036,-34.286,29.898,-21.55,-37.143,29.898,-21.55,-34.286,29.25,-23.924,-28.571,29.583,-22.982,-34.286,29.583,-22.982,-37.143,29.583,-22.982,-34.286,29.712,-22.508,-37.143,29.712,-22.508,-37.143,29.25,-23.924,-34.286,29.429,-23.455,-37.143,29.429,-23.455,-34.286,28.299,-25.705,-28.571,28.823,-24.832,-34.286,28.823,-24.832,-37.143,28.823,-24.832,-34.286,29.049,-24.381,-37.143,29.049,-24.381,-37.143,28.299,-25.705,-34.286,28.573,-25.273,-37.143,28.573,-25.273,-34.286,26.997,-27.269,-28.571,27.689,-26.518,-34.286,27.689,-26.518,-37.143,27.689,-26.518,-34.286,28.005,-26.118,-37.143,28.005,-26.118,-37.143,26.997,-27.269,-34.286,27.353,-26.902,-37.143,27.353,-26.902,-34.286,25.407,-28.537,-28.571,26.232,-27.945,-34.286,26.232,-27.945,-37.143,26.232,-27.945,-34.286,26.623,-27.617,-37.143,26.623,-27.617,-37.143,25.407,-28.537,-34.286,25.826,-28.252,-37.143,25.826,-28.252,-34.286,23.634,-29.441,-28.571,24.536,-29.037,-34.286,24.536,-29.037,-37.143,24.536,-29.037,-34.286,24.977,-28.799,-37.143,24.977,-28.799,-37.143,23.634,-29.441,-34.286,24.088,-29.251,-37.143,24.088,-29.251,-34.286,21.796,-29.962,-28.571,22.716,-29.749,-34.286,22.716,-29.749,-37.143,22.716,-29.749,-34.286,23.177,-29.607,-37.143,23.177,-29.607,-37.143,21.796,-29.962,-34.286,22.256,-29.867,-37.143,22.256,-29.867,-34.286,20,-30.125,-28.571,20.887,-30.086,-34.286,20.887,-30.086,-37.143,20.887,-30.086,-34.286,21.34,-30.035,-37.143,21.34,-30.035,-37.143,20,-30.125,-34.286,20.44,-30.115,-37.143,20.44,-30.115,-34.286,18.089,-29.941,-28.571,19.057,-30.08,-34.286,19.057,-30.08,-37.143,19.057,-30.08,-34.286,19.532,-30.114,-37.143,19.532,-30.114,-37.143,18.089,-29.941,-34.286,18.575,-30.023,-37.143,18.575,-30.023,-34.286,16.201,-29.375,-28.571,17.143,-29.708,-34.286,17.143,-29.708,-37.143,17.143,-29.708,-34.286,17.617,-29.837,-37.143,17.617,-29.837,-37.143,16.201,-29.375,-34.286,16.67,-29.554,-37.143,16.67,-29.554,-34.286,14.42,-28.424,-28.571,15.293,-28.948,-34.286,15.293,-28.948,-37.143,15.293,-28.948,-34.286,15.744,-29.174,-37.143,15.744,-29.174,-37.143,14.42,-28.424,-34.286,14.852,-28.698,-37.143,14.852,-28.698,-34.286,12.856,-27.122,-28.571,13.607,-27.814,-34.286,13.607,-27.814,-37.143,13.607,-27.814,-34.286,14.007,-28.13,-37.143,14.007,-28.13,-37.143,12.856,-27.122,-34.286,13.223,-27.478,-37.143,13.223,-27.478,-34.286,11.588,-25.532,-28.571,12.18,-26.357,-34.286,12.18,-26.357,-37.143,12.18,-26.357,-34.286,12.508,-26.748,-37.143,12.508,-26.748,-37.143,11.588,-25.532,-34.286,11.873,-25.951,-37.143,11.873,-25.951,-34.286,10.684,-23.759,-28.571,11.088,-24.661,-34.286,11.088,-24.661,-37.143,11.088,-24.661,-34.286,11.326,-25.102,-37.143,11.326,-25.102,-37.143,10.684,-23.759,-34.286,10.874,-24.213,-37.143,10.874,-24.213,-34.286,10.163,-21.921,-28.571,10.376,-22.841,-34.286,10.376,-22.841,-37.143,10.376,-22.841,-34.286,10.518,-23.302,-37.143,10.518,-23.302,-37.143,10.163,-21.921,-34.286,10.258,-22.381,-37.143,10.258,-22.381,-28.571,10.039,-21.012,-34.286,10.039,-21.012,-37.143,10.039,-21.012,-34.286,10.09,-21.465,-37.143,10.09,-21.465,-34.286,10.01,-20.565,-37.143,10.01,-20.565,40,10.04,-21.024,40,10.167,-21.945,40,10.386,-22.877,40,10.702,-23.806,40,11.117,-24.718,40,11.63,-25.597,40,12.236,-26.428,40,12.929,-27.196,40,13.697,-27.889,40,14.528,-28.495,40,15.407,-29.008,40,16.319,-29.423,40,17.248,-29.739,40,18.18,-29.958,40,19.101,-30.085,40,20.899,-30.085,40,21.82,-29.958,40,22.752,-29.739,40,23.681,-29.423,40,24.593,-29.008,40,25.472,-28.495,40,26.303,-27.889,40,27.071,-27.196,40,27.764,-26.428,40,28.37,-25.597,40,28.883,-24.718,40,29.298,-23.806,40,29.614,-22.877,40,29.833,-21.945,40,29.96,-21.024,34.286,10.163,-21.921,28.571,10.039,-21.012,34.286,10.039,-21.012,37.143,10.039,-21.012,34.286,10.01,-20.565,37.143,10.01,-20.565,37.143,10.163,-21.921,34.286,10.09,-21.465,37.143,10.09,-21.465,34.286,10.684,-23.759,28.571,10.376,-22.841,34.286,10.376,-22.841,37.143,10.376,-22.841,34.286,10.258,-22.381,37.143,10.258,-22.381,37.143,10.684,-23.759,34.286,10.518,-23.302,37.143,10.518,-23.302,34.286,11.588,-25.532,28.571,11.088,-24.661,34.286,11.088,-24.661,37.143,11.088,-24.661,34.286,10.874,-24.213,37.143,10.874,-24.213,37.143,11.588,-25.532,34.286,11.326,-25.102,37.143,11.326,-25.102,34.286,12.856,-27.122,28.571,12.18,-26.357,34.286,12.18,-26.357,37.143,12.18,-26.357,34.286,11.873,-25.951,37.143,11.873,-25.951,37.143,12.856,-27.122,34.286,12.508,-26.748,37.143,12.508,-26.748,34.286,14.42,-28.424,28.571,13.607,-27.814,34.286,13.607,-27.814,37.143,13.607,-27.814,34.286,13.223,-27.478,37.143,13.223,-27.478,37.143,14.42,-28.424,34.286,14.007,-28.13,37.143,14.007,-28.13,34.286,16.201,-29.375,28.571,15.293,-28.948,34.286,15.293,-28.948,37.143,15.293,-28.948,34.286,14.852,-28.698,37.143,14.852,-28.698,37.143,16.201,-29.375,34.286,15.744,-29.174,37.143,15.744,-29.174,34.286,18.089,-29.941,28.571,17.143,-29.708,34.286,17.143,-29.708,37.143,17.143,-29.708,34.286,16.67,-29.554,37.143,16.67,-29.554,37.143,18.089,-29.941,34.286,17.617,-29.837,37.143,17.617,-29.837,34.286,20,-30.125,28.571,19.057,-30.08,34.286,19.057,-30.08,37.143,19.057,-30.08,34.286,18.575,-30.023,37.143,18.575,-30.023,37.143,20,-30.125,34.286,19.532,-30.114,37.143,19.532,-30.114,34.286,21.796,-29.962,28.571,20.887,-30.086,34.286,20.887,-30.086,37.143,20.887,-30.086,34.286,20.44,-30.115,37.143,20.44,-30.115,37.143,21.796,-29.962,34.286,21.34,-30.035,37.143,21.34,-30.035,34.286,23.634,-29.441,28.571,22.716,-29.749,34.286,22.716,-29.749,37.143,22.716,-29.749,34.286,22.256,-29.867,37.143,22.256,-29.867,37.143,23.634,-29.441,34.286,23.177,-29.607,37.143,23.177,-29.607,34.286,25.407,-28.537,28.571,24.536,-29.037,34.286,24.536,-29.037,37.143,24.536,-29.037,34.286,24.088,-29.251,37.143,24.088,-29.251,37.143,25.407,-28.537,34.286,24.977,-28.799,37.143,24.977,-28.799,34.286,26.997,-27.269,28.571,26.232,-27.945,34.286,26.232,-27.945,37.143,26.232,-27.945,34.286,25.826,-28.252,37.143,25.826,-28.252,37.143,26.997,-27.269,34.286,26.623,-27.617,37.143,26.623,-27.617,34.286,28.299,-25.705,28.571,27.689,-26.518,34.286,27.689,-26.518,37.143,27.689,-26.518,34.286,27.353,-26.902,37.143,27.353,-26.902,37.143,28.299,-25.705,34.286,28.005,-26.118,37.143,28.005,-26.118,34.286,29.25,-23.924,28.571,28.823,-24.832,34.286,28.823,-24.832,37.143,28.823,-24.832,34.286,28.573,-25.273,37.143,28.573,-25.273,37.143,29.25,-23.924,34.286,29.049,-24.381,37.143,29.049,-24.381,34.286,29.816,-22.036,28.571,29.583,-22.982,34.286,29.583,-22.982,37.143,29.583,-22.982,34.286,29.429,-23.455,37.143,29.429,-23.455,37.143,29.816,-22.036,34.286,29.712,-22.508,37.143,29.712,-22.508,28.571,29.955,-21.068,34.286,29.955,-21.068,37.143,29.955,-21.068,34.286,29.898,-21.55,37.143,29.898,-21.55,34.286,29.989,-20.593,37.143,29.989,-20.593,-40,-10,-20.125,-28.571,-10,-20.125,-17.143,-10,-20.125,-5.714,-10,-20.125,5.714,-10,-20.125,17.143,-10,-20.125,28.571,-10,-20.125,40,-10,-20.125,-28.571,-10.184,-22.036,-17.143,-10.184,-22.036,-5.714,-10.184,-22.036,5.714,-10.184,-22.036,17.143,-10.184,-22.036,28.571,-10.184,-22.036,-28.571,-10.75,-23.924,-17.143,-10.75,-23.924,-5.714,-10.75,-23.924,5.714,-10.75,-23.924,17.143,-10.75,-23.924,28.571,-10.75,-23.924,-28.571,-11.701,-25.705,-17.143,-11.701,-25.705,-5.714,-11.701,-25.705,5.714,-11.701,-25.705,17.143,-11.701,-25.705,28.571,-11.701,-25.705,-28.571,-13.003,-27.269,-17.143,-13.003,-27.269,-5.714,-13.003,-27.269,5.714,-13.003,-27.269,17.143,-13.003,-27.269,28.571,-13.003,-27.269,-28.571,-14.593,-28.537,-17.143,-14.593,-28.537,-5.714,-14.593,-28.537,5.714,-14.593,-28.537,17.143,-14.593,-28.537,28.571,-14.593,-28.537,-28.571,-16.366,-29.441,-17.143,-16.366,-29.441,-5.714,-16.366,-29.441,5.714,-16.366,-29.441,17.143,-16.366,-29.441,28.571,-16.366,-29.441,-28.571,-18.204,-29.962,-17.143,-18.204,-29.962,-5.714,-18.204,-29.962,5.714,-18.204,-29.962,17.143,-18.204,-29.962,28.571,-18.204,-29.962,-40,-20,-30.125,-28.571,-20,-30.125,-17.143,-20,-30.125,-5.714,-20,-30.125,5.714,-20,-30.125,17.143,-20,-30.125,28.571,-20,-30.125,40,-20,-30.125,-28.571,-21.911,-29.941,-17.143,-21.911,-29.941,-5.714,-21.911,-29.941,5.714,-21.911,-29.941,17.143,-21.911,-29.941,28.571,-21.911,-29.941,-28.571,-23.799,-29.375,-17.143,-23.799,-29.375,-5.714,-23.799,-29.375,5.714,-23.799,-29.375,17.143,-23.799,-29.375,28.571,-23.799,-29.375,-28.571,-25.58,-28.424,-17.143,-25.58,-28.424,-5.714,-25.58,-28.424,5.714,-25.58,-28.424,17.143,-25.58,-28.424,28.571,-25.58,-28.424,-28.571,-27.144,-27.122,-17.143,-27.144,-27.122,-5.714,-27.144,-27.122,5.714,-27.144,-27.122,17.143,-27.144,-27.122,28.571,-27.144,-27.122,-28.571,-28.412,-25.532,-17.143,-28.412,-25.532,-5.714,-28.412,-25.532,5.714,-28.412,-25.532,17.143,-28.412,-25.532,28.571,-28.412,-25.532,-28.571,-29.316,-23.759,-17.143,-29.316,-23.759,-5.714,-29.316,-23.759,5.714,-29.316,-23.759,17.143,-29.316,-23.759,28.571,-29.316,-23.759,-28.571,-29.837,-21.921,-17.143,-29.837,-21.921,-5.714,-29.837,-21.921,5.714,-29.837,-21.921,17.143,-29.837,-21.921,28.571,-29.837,-21.921,-40,-30,-20.125,-28.571,-30,-20.125,-17.143,-30,-20.125,-5.714,-30,-20.125,5.714,-30,-20.125,17.143,-30,-20.125,28.571,-30,-20.125,40,-30,-20.125,-40,-10.04,-21.024,-40,-10.167,-21.945,-40,-10.386,-22.877,-40,-10.702,-23.806,-40,-11.117,-24.718,-40,-11.63,-25.597,-40,-12.236,-26.428,-40,-12.929,-27.196,-40,-13.697,-27.889,-40,-14.528,-28.495,-40,-15.407,-29.008,-40,-16.319,-29.423,-40,-17.248,-29.739,-40,-18.18,-29.958,-40,-19.101,-30.085,-40,-20.899,-30.085,-40,-21.82,-29.958,-40,-22.752,-29.739,-40,-23.681,-29.423,-40,-24.593,-29.008,-40,-25.472,-28.495,-40,-26.303,-27.889,-40,-27.071,-27.196,-40,-27.764,-26.428,-40,-28.37,-25.597,-40,-28.883,-24.718,-40,-29.298,-23.806,-40,-29.614,-22.877,-40,-29.833,-21.945,-40,-29.96,-21.024,-34.286,-10.184,-22.036,-28.571,-10.045,-21.068,-34.286,-10.045,-21.068,-37.143,-10.045,-21.068,-34.286,-10.011,-20.593,-37.143,-10.011,-20.593,-37.143,-10.184,-22.036,-34.286,-10.102,-21.55,-37.143,-10.102,-21.55,-34.286,-10.75,-23.924,-28.571,-10.417,-22.982,-34.286,-10.417,-22.982,-37.143,-10.417,-22.982,-34.286,-10.288,-22.508,-37.143,-10.288,-22.508,-37.143,-10.75,-23.924,-34.286,-10.571,-23.455,-37.143,-10.571,-23.455,-34.286,-11.701,-25.705,-28.571,-11.177,-24.832,-34.286,-11.177,-24.832,-37.143,-11.177,-24.832,-34.286,-10.951,-24.381,-37.143,-10.951,-24.381,-37.143,-11.701,-25.705,-34.286,-11.427,-25.273,-37.143,-11.427,-25.273,-34.286,-13.003,-27.269,-28.571,-12.311,-26.518,-34.286,-12.311,-26.518,-37.143,-12.311,-26.518,-34.286,-11.995,-26.118,-37.143,-11.995,-26.118,-37.143,-13.003,-27.269,-34.286,-12.647,-26.902,-37.143,-12.647,-26.902,-34.286,-14.593,-28.537,-28.571,-13.768,-27.945,-34.286,-13.768,-27.945,-37.143,-13.768,-27.945,-34.286,-13.377,-27.617,-37.143,-13.377,-27.617,-37.143,-14.593,-28.537,-34.286,-14.174,-28.252,-37.143,-14.174,-28.252,-34.286,-16.366,-29.441,-28.571,-15.464,-29.037,-34.286,-15.464,-29.037,-37.143,-15.464,-29.037,-34.286,-15.023,-28.799,-37.143,-15.023,-28.799,-37.143,-16.366,-29.441,-34.286,-15.912,-29.251,-37.143,-15.912,-29.251,-34.286,-18.204,-29.962,-28.571,-17.284,-29.749,-34.286,-17.284,-29.749,-37.143,-17.284,-29.749,-34.286,-16.823,-29.607,-37.143,-16.823,-29.607,-37.143,-18.204,-29.962,-34.286,-17.744,-29.867,-37.143,-17.744,-29.867,-34.286,-20,-30.125,-28.571,-19.113,-30.086,-34.286,-19.113,-30.086,-37.143,-19.113,-30.086,-34.286,-18.66,-30.035,-37.143,-18.66,-30.035,-37.143,-20,-30.125,-34.286,-19.56,-30.115,-37.143,-19.56,-30.115,-34.286,-21.911,-29.941,-28.571,-20.943,-30.08,-34.286,-20.943,-30.08,-37.143,-20.943,-30.08,-34.286,-20.468,-30.114,-37.143,-20.468,-30.114,-37.143,-21.911,-29.941,-34.286,-21.425,-30.023,-37.143,-21.425,-30.023,-34.286,-23.799,-29.375,-28.571,-22.857,-29.708,-34.286,-22.857,-29.708,-37.143,-22.857,-29.708,-34.286,-22.383,-29.837,-37.143,-22.383,-29.837,-37.143,-23.799,-29.375,-34.286,-23.33,-29.554,-37.143,-23.33,-29.554,-34.286,-25.58,-28.424,-28.571,-24.707,-28.948,-34.286,-24.707,-28.948,-37.143,-24.707,-28.948,-34.286,-24.256,-29.174,-37.143,-24.256,-29.174,-37.143,-25.58,-28.424,-34.286,-25.148,-28.698,-37.143,-25.148,-28.698,-34.286,-27.144,-27.122,-28.571,-26.393,-27.814,-34.286,-26.393,-27.814,-37.143,-26.393,-27.814,-34.286,-25.993,-28.13,-37.143,-25.993,-28.13,-37.143,-27.144,-27.122,-34.286,-26.777,-27.478,-37.143,-26.777,-27.478,-34.286,-28.412,-25.532,-28.571,-27.82,-26.357,-34.286,-27.82,-26.357,-37.143,-27.82,-26.357,-34.286,-27.492,-26.748,-37.143,-27.492,-26.748,-37.143,-28.412,-25.532,-34.286,-28.127,-25.951,-37.143,-28.127,-25.951,-34.286,-29.316,-23.759,-28.571,-28.912,-24.661,-34.286,-28.912,-24.661,-37.143,-28.912,-24.661,-34.286,-28.674,-25.102,-37.143,-28.674,-25.102,-37.143,-29.316,-23.759,-34.286,-29.126,-24.213,-37.143,-29.126,-24.213,-34.286,-29.837,-21.921,-28.571,-29.624,-22.841,-34.286,-29.624,-22.841,-37.143,-29.624,-22.841,-34.286,-29.482,-23.302,-37.143,-29.482,-23.302,-37.143,-29.837,-21.921,-34.286,-29.742,-22.381,-37.143,-29.742,-22.381,-28.571,-29.961,-21.012,-34.286,-29.961,-21.012,-37.143,-29.961,-21.012,-34.286,-29.91,-21.465,-37.143,-29.91,-21.465,-34.286,-29.99,-20.565,-37.143,-29.99,-20.565,40,-29.96,-21.024,40,-29.833,-21.945,40,-29.614,-22.877,40,-29.298,-23.806,40,-28.883,-24.718,40,-28.37,-25.597,40,-27.764,-26.428,40,-27.071,-27.196,40,-26.303,-27.889,40,-25.472,-28.495,40,-24.593,-29.008,40,-23.681,-29.423,40,-22.752,-29.739,40,-21.82,-29.958,40,-20.899,-30.085,40,-19.101,-30.085,40,-18.18,-29.958,40,-17.248,-29.739,40,-16.319,-29.423,40,-15.407,-29.008,40,-14.528,-28.495,40,-13.697,-27.889,40,-12.929,-27.196,40,-12.236,-26.428,40,-11.63,-25.597,40,-11.117,-24.718,40,-10.702,-23.806,40,-10.386,-22.877,40,-10.167,-21.945,40,-10.04,-21.024,34.286,-29.837,-21.921,28.571,-29.961,-21.012,34.286,-29.961,-21.012,37.143,-29.961,-21.012,34.286,-29.99,-20.565,37.143,-29.99,-20.565,37.143,-29.837,-21.921,34.286,-29.91,-21.465,37.143,-29.91,-21.465,34.286,-29.316,-23.759,28.571,-29.624,-22.841,34.286,-29.624,-22.841,37.143,-29.624,-22.841,34.286,-29.742,-22.381,37.143,-29.742,-22.381,37.143,-29.316,-23.759,34.286,-29.482,-23.302,37.143,-29.482,-23.302,34.286,-28.412,-25.532,28.571,-28.912,-24.661,34.286,-28.912,-24.661,37.143,-28.912,-24.661,34.286,-29.126,-24.213,37.143,-29.126,-24.213,37.143,-28.412,-25.532,34.286,-28.674,-25.102,37.143,-28.674,-25.102,34.286,-27.144,-27.122,28.571,-27.82,-26.357,34.286,-27.82,-26.357,37.143,-27.82,-26.357,34.286,-28.127,-25.951,37.143,-28.127,-25.951,37.143,-27.144,-27.122,34.286,-27.492,-26.748,37.143,-27.492,-26.748,34.286,-25.58,-28.424,28.571,-26.393,-27.814,34.286,-26.393,-27.814,37.143,-26.393,-27.814,34.286,-26.777,-27.478,37.143,-26.777,-27.478,37.143,-25.58,-28.424,34.286,-25.993,-28.13,37.143,-25.993,-28.13,34.286,-23.799,-29.375,28.571,-24.707,-28.948,34.286,-24.707,-28.948,37.143,-24.707,-28.948,34.286,-25.148,-28.698,37.143,-25.148,-28.698,37.143,-23.799,-29.375,34.286,-24.256,-29.174,37.143,-24.256,-29.174,34.286,-21.911,-29.941,28.571,-22.857,-29.708,34.286,-22.857,-29.708,37.143,-22.857,-29.708,34.286,-23.33,-29.554,37.143,-23.33,-29.554,37.143,-21.911,-29.941,34.286,-22.383,-29.837,37.143,-22.383,-29.837,34.286,-20,-30.125,28.571,-20.943,-30.08,34.286,-20.943,-30.08,37.143,-20.943,-30.08,34.286,-21.425,-30.023,37.143,-21.425,-30.023,37.143,-20,-30.125,34.286,-20.468,-30.114,37.143,-20.468,-30.114,34.286,-18.204,-29.962,28.571,-19.113,-30.086,34.286,-19.113,-30.086,37.143,-19.113,-30.086,34.286,-19.56,-30.115,37.143,-19.56,-30.115,37.143,-18.204,-29.962,34.286,-18.66,-30.035,37.143,-18.66,-30.035,34.286,-16.366,-29.441,28.571,-17.284,-29.749,34.286,-17.284,-29.749,37.143,-17.284,-29.749,34.286,-17.744,-29.867,37.143,-17.744,-29.867,37.143,-16.366,-29.441,34.286,-16.823,-29.607,37.143,-16.823,-29.607,34.286,-14.593,-28.537,28.571,-15.464,-29.037,34.286,-15.464,-29.037,37.143,-15.464,-29.037,34.286,-15.912,-29.251,37.143,-15.912,-29.251,37.143,-14.593,-28.537,34.286,-15.023,-28.799,37.143,-15.023,-28.799,34.286,-13.003,-27.269,28.571,-13.768,-27.945,34.286,-13.768,-27.945,37.143,-13.768,-27.945,34.286,-14.174,-28.252,37.143,-14.174,-28.252,37.143,-13.003,-27.269,34.286,-13.377,-27.617,37.143,-13.377,-27.617,34.286,-11.701,-25.705,28.571,-12.311,-26.518,34.286,-12.311,-26.518,37.143,-12.311,-26.518,34.286,-12.647,-26.902,37.143,-12.647,-26.902,37.143,-11.701,-25.705,34.286,-11.995,-26.118,37.143,-11.995,-26.118,34.286,-10.75,-23.924,28.571,-11.177,-24.832,34.286,-11.177,-24.832,37.143,-11.177,-24.832,34.286,-11.427,-25.273,37.143,-11.427,-25.273,37.143,-10.75,-23.924,34.286,-10.951,-24.381,37.143,-10.951,-24.381,34.286,-10.184,-22.036,28.571,-10.417,-22.982,34.286,-10.417,-22.982,37.143,-10.417,-22.982,34.286,-10.571,-23.455,37.143,-10.571,-23.455,37.143,-10.184,-22.036,34.286,-10.288,-22.508,37.143,-10.288,-22.508,28.571,-10.045,-21.068,34.286,-10.045,-21.068,37.143,-10.045,-21.068,34.286,-10.102,-21.55,37.143,-10.102,-21.55,34.286,-10.011,-20.593,37.143,-10.011,-20.593,-40,50.25,-20.125,40,50.25,-20.125,-40,50.25,19.875,40,50.25,19.875,-40,50.25,-19.014,-40,50.25,-17.903,-40,50.25,-16.792,-40,50.25,-15.681,-40,50.25,-14.569,-40,50.25,-13.458,-40,50.25,-12.347,-40,50.25,-11.236,-40,50.25,-10.125,-40,50.25,-9.014,-40,50.25,-7.903,-40,50.25,-6.792,-40,50.25,-5.681,-40,50.25,-4.569,-40,50.25,-3.458,-40,50.25,-2.347,-40,50.25,-1.236,-40,50.25,-.125,-40,50.25,.986,-40,50.25,2.097,-40,50.25,3.208,-40,50.25,4.319,-40,50.25,5.431,-40,50.25,6.542,-40,50.25,7.653,-40,50.25,8.764,-40,50.25,9.875,-40,50.25,10.986,-40,50.25,12.097,-40,50.25,13.208,-40,50.25,14.319,-40,50.25,15.431,-40,50.25,16.542,-40,50.25,17.653,-40,50.25,18.764,40,50.25,-.125,0,50.25,-20.125,0,50.25,-.125,-20,50.25,-.125,0,50.25,-10.125,-20,50.25,-10.125,-30,50.25,-10.125,-20,50.25,-15.125,-30,50.25,-15.125,-35,50.25,-15.125,-30,50.25,-17.625,-35,50.25,-17.625,-37.5,50.25,-17.625,-35,50.25,-18.875,-37.5,50.25,-18.875,-37.5,50.25,-15.125,-35,50.25,-16.375,-37.5,50.25,-16.375,-35,50.25,-10.125,-30,50.25,-12.625,-35,50.25,-12.625,-30,50.25,-.125,-20,50.25,-5.125,-30,50.25,-5.125,0,50.25,9.875,-20,50.25,9.875,-37.5,50.25,-12.625,-35,50.25,-13.875,-37.5,50.25,-13.875,-37.5,50.25,-10.125,-35,50.25,-11.375,-37.5,50.25,-11.375,-35,50.25,-5.125,-30,50.25,-7.625,-35,50.25,-7.625,-37.5,50.25,-7.625,-35,50.25,-8.875,-37.5,50.25,-8.875,-37.5,50.25,-5.125,-35,50.25,-6.375,-37.5,50.25,-6.375,-35,50.25,-.125,-30,50.25,-2.625,-35,50.25,-2.625,-30,50.25,9.875,-20,50.25,4.875,-30,50.25,4.875,-37.5,50.25,-2.625,-35,50.25,-3.875,-37.5,50.25,-3.875,-37.5,50.25,-.125,-35,50.25,-1.375,-37.5,50.25,-1.375,-35,50.25,4.875,-30,50.25,2.375,-35,50.25,2.375,-37.5,50.25,2.375,-35,50.25,1.125,-37.5,50.25,1.125,-37.5,50.25,4.875,-35,50.25,3.625,-37.5,50.25,3.625,-35,50.25,9.875,-30,50.25,7.375,-35,50.25,7.375,-20,50.25,14.875,-30,50.25,14.875,-37.5,50.25,7.375,-35,50.25,6.125,-37.5,50.25,6.125,-37.5,50.25,9.875,-35,50.25,8.625,-37.5,50.25,8.625,-35,50.25,14.875,-30,50.25,12.375,-35,50.25,12.375,-37.5,50.25,12.375,-35,50.25,11.125,-37.5,50.25,11.125,-37.5,50.25,14.875,-35,50.25,13.625,-37.5,50.25,13.625,-30,50.25,17.375,-35,50.25,17.375,-37.5,50.25,17.375,-35,50.25,16.125,-37.5,50.25,16.125,-35,50.25,18.625,-37.5,50.25,18.625,-28.571,50.25,19.875,-17.143,50.25,19.875,-5.714,50.25,19.875,5.714,50.25,19.875,17.143,50.25,19.875,28.571,50.25,19.875,40,50.25,18.764,40,50.25,17.653,40,50.25,16.542,40,50.25,15.431,40,50.25,14.319,40,50.25,13.208,40,50.25,12.097,40,50.25,10.986,40,50.25,9.875,40,50.25,8.764,40,50.25,7.653,40,50.25,6.542,40,50.25,5.431,40,50.25,4.319,40,50.25,3.208,40,50.25,2.097,40,50.25,.986,40,50.25,-1.236,40,50.25,-2.347,40,50.25,-3.458,40,50.25,-4.569,40,50.25,-5.681,40,50.25,-6.792,40,50.25,-7.903,40,50.25,-9.014,40,50.25,-10.125,40,50.25,-11.236,40,50.25,-12.347,40,50.25,-13.458,40,50.25,-14.569,40,50.25,-15.681,40,50.25,-16.792,40,50.25,-17.903,40,50.25,-19.014,20,50.25,-.125,20,50.25,9.875,30,50.25,9.875,20,50.25,14.875,30,50.25,14.875,35,50.25,14.875,30,50.25,17.375,35,50.25,17.375,37.5,50.25,17.375,35,50.25,18.625,37.5,50.25,18.625,37.5,50.25,14.875,35,50.25,16.125,37.5,50.25,16.125,35,50.25,9.875,30,50.25,12.375,35,50.25,12.375,30,50.25,-.125,20,50.25,4.875,30,50.25,4.875,20,50.25,-20.125,20,50.25,-10.125,37.5,50.25,12.375,35,50.25,13.625,37.5,50.25,13.625,37.5,50.25,9.875,35,50.25,11.125,37.5,50.25,11.125,35,50.25,4.875,30,50.25,7.375,35,50.25,7.375,37.5,50.25,7.375,35,50.25,8.625,37.5,50.25,8.625,37.5,50.25,4.875,35,50.25,6.125,37.5,50.25,6.125,35,50.25,-.125,30,50.25,2.375,35,50.25,2.375,30,50.25,-10.125,20,50.25,-5.125,30,50.25,-5.125,37.5,50.25,2.375,35,50.25,3.625,37.5,50.25,3.625,37.5,50.25,-.125,35,50.25,1.125,37.5,50.25,1.125,35,50.25,-5.125,30,50.25,-2.625,35,50.25,-2.625,37.5,50.25,-2.625,35,50.25,-1.375,37.5,50.25,-1.375,37.5,50.25,-5.125,35,50.25,-3.875,37.5,50.25,-3.875,35,50.25,-10.125,30,50.25,-7.625,35,50.25,-7.625,30,50.25,-20.125,20,50.25,-15.125,30,50.25,-15.125,37.5,50.25,-7.625,35,50.25,-6.375,37.5,50.25,-6.375,37.5,50.25,-10.125,35,50.25,-8.875,37.5,50.25,-8.875,35,50.25,-15.125,30,50.25,-12.625,35,50.25,-12.625,37.5,50.25,-12.625,35,50.25,-11.375,37.5,50.25,-11.375,37.5,50.25,-15.125,35,50.25,-13.875,37.5,50.25,-13.875,30,50.25,-17.625,35,50.25,-17.625,37.5,50.25,-17.625,35,50.25,-16.375,37.5,50.25,-16.375,35,50.25,-18.875,37.5,50.25,-18.875,38.889,50.25,-20.125,37.778,50.25,-20.125,36.667,50.25,-20.125,35.556,50.25,-20.125,34.444,50.25,-20.125,33.333,50.25,-20.125,32.222,50.25,-20.125,31.111,50.25,-20.125,28.889,50.25,-20.125,27.778,50.25,-20.125,26.667,50.25,-20.125,25.556,50.25,-20.125,24.444,50.25,-20.125,23.333,50.25,-20.125,22.222,50.25,-20.125,21.111,50.25,-20.125,18.889,50.25,-20.125,17.778,50.25,-20.125,16.667,50.25,-20.125,15.556,50.25,-20.125,14.444,50.25,-20.125,13.333,50.25,-20.125,12.222,50.25,-20.125,11.111,50.25,-20.125,10,50.25,-20.125,8.889,50.25,-20.125,7.778,50.25,-20.125,6.667,50.25,-20.125,5.556,50.25,-20.125,4.444,50.25,-20.125,3.333,50.25,-20.125,2.222,50.25,-20.125,1.111,50.25,-20.125,-1.111,50.25,-20.125,-2.222,50.25,-20.125,-3.333,50.25,-20.125,-4.444,50.25,-20.125,-5.556,50.25,-20.125,-6.667,50.25,-20.125,-7.778,50.25,-20.125,-8.889,50.25,-20.125,-10,50.25,-20.125,-11.111,50.25,-20.125,-12.222,50.25,-20.125,-13.333,50.25,-20.125,-14.444,50.25,-20.125,-15.556,50.25,-20.125,-16.667,50.25,-20.125,-17.778,50.25,-20.125,-18.889,50.25,-20.125,-20,50.25,-20.125,-21.111,50.25,-20.125,-22.222,50.25,-20.125,-23.333,50.25,-20.125,-24.444,50.25,-20.125,-25.556,50.25,-20.125,-26.667,50.25,-20.125,-27.778,50.25,-20.125,-28.889,50.25,-20.125,-30,50.25,-20.125,-31.111,50.25,-20.125,-32.222,50.25,-20.125,-33.333,50.25,-20.125,-34.444,50.25,-20.125,-35.556,50.25,-20.125,-36.667,50.25,-20.125,-37.778,50.25,-20.125,-38.889,50.25,-20.125,32.5,50.25,-17.625,30,50.25,-18.875,32.5,50.25,-18.875,25,50.25,-15.125,20,50.25,-17.625,25,50.25,-17.625,10,50.25,-10.125,0,50.25,-15.125,10,50.25,-15.125,27.5,50.25,-17.625,25,50.25,-18.875,27.5,50.25,-18.875,22.5,50.25,-17.625,20,50.25,-18.875,22.5,50.25,-18.875,15,50.25,-15.125,10,50.25,-17.625,15,50.25,-17.625,17.5,50.25,-17.625,15,50.25,-18.875,17.5,50.25,-18.875,12.5,50.25,-17.625,10,50.25,-18.875,12.5,50.25,-18.875,5,50.25,-15.125,0,50.25,-17.625,5,50.25,-17.625,-10,50.25,-10.125,-10,50.25,-15.125,7.5,50.25,-17.625,5,50.25,-18.875,7.5,50.25,-18.875,2.5,50.25,-17.625,0,50.25,-18.875,2.5,50.25,-18.875,-5,50.25,-15.125,-10,50.25,-17.625,-5,50.25,-17.625,-2.5,50.25,-17.625,-5,50.25,-18.875,-2.5,50.25,-18.875,-7.5,50.25,-17.625,-10,50.25,-18.875,-7.5,50.25,-18.875,-15,50.25,-15.125,-20,50.25,-17.625,-15,50.25,-17.625,-12.5,50.25,-17.625,-15,50.25,-18.875,-12.5,50.25,-18.875,-17.5,50.25,-17.625,-20,50.25,-18.875,-17.5,50.25,-18.875,-25,50.25,-15.125,-25,50.25,-17.625,-22.5,50.25,-17.625,-25,50.25,-18.875,-22.5,50.25,-18.875,-27.5,50.25,-17.625,-30,50.25,-18.875,-27.5,50.25,-18.875,-32.5,50.25,-17.625,-32.5,50.25,-18.875,-40,29.75,-20.125,40,29.75,-20.125,-40,29.75,19.875,40,29.75,19.875,-40,29.75,-19.014,-40,29.75,-17.903,-40,29.75,-16.792,-40,29.75,-15.681,-40,29.75,-14.569,-40,29.75,-13.458,-40,29.75,-12.347,-40,29.75,-11.236,-40,29.75,-10.125,-40,29.75,-9.014,-40,29.75,-7.903,-40,29.75,-6.792,-40,29.75,-5.681,-40,29.75,-4.569,-40,29.75,-3.458,-40,29.75,-2.347,-40,29.75,-1.236,-40,29.75,-.125,-40,29.75,.986,-40,29.75,2.097,-40,29.75,3.208,-40,29.75,4.319,-40,29.75,5.431,-40,29.75,6.542,-40,29.75,7.653,-40,29.75,8.764,-40,29.75,9.875,-40,29.75,10.986,-40,29.75,12.097,-40,29.75,13.208,-40,29.75,14.319,-40,29.75,15.431,-40,29.75,16.542,-40,29.75,17.653,-40,29.75,18.764,40,29.75,-.125,0,29.75,-.125,-20,29.75,-.125,0,29.75,-10.125,-20,29.75,-10.125,-30,29.75,-10.125,-20,29.75,-15.125,-30,29.75,-15.125,-35,29.75,-15.125,-30,29.75,-17.625,-35,29.75,-17.625,-37.5,29.75,-17.625,-35,29.75,-18.875,-37.5,29.75,-18.875,-37.5,29.75,-15.125,-35,29.75,-16.375,-37.5,29.75,-16.375,-35,29.75,-10.125,-30,29.75,-12.625,-35,29.75,-12.625,-30,29.75,-.125,-20,29.75,-5.125,-30,29.75,-5.125,0,29.75,9.875,-20,29.75,9.875,-37.5,29.75,-12.625,-35,29.75,-13.875,-37.5,29.75,-13.875,-37.5,29.75,-10.125,-35,29.75,-11.375,-37.5,29.75,-11.375,-35,29.75,-5.125,-30,29.75,-7.625,-35,29.75,-7.625,-37.5,29.75,-7.625,-35,29.75,-8.875,-37.5,29.75,-8.875,-37.5,29.75,-5.125,-35,29.75,-6.375,-37.5,29.75,-6.375,-35,29.75,-.125,-30,29.75,-2.625,-35,29.75,-2.625,-30,29.75,9.875,-20,29.75,4.875,-30,29.75,4.875,-37.5,29.75,-2.625,-35,29.75,-3.875,-37.5,29.75,-3.875,-37.5,29.75,-.125,-35,29.75,-1.375,-37.5,29.75,-1.375,-35,29.75,4.875,-30,29.75,2.375,-35,29.75,2.375,-37.5,29.75,2.375,-35,29.75,1.125,-37.5,29.75,1.125,-37.5,29.75,4.875,-35,29.75,3.625,-37.5,29.75,3.625,-35,29.75,9.875,-30,29.75,7.375,-35,29.75,7.375,-20,29.75,14.875,-30,29.75,14.875,-37.5,29.75,7.375,-35,29.75,6.125,-37.5,29.75,6.125,-37.5,29.75,9.875,-35,29.75,8.625,-37.5,29.75,8.625,-35,29.75,14.875,-30,29.75,12.375,-35,29.75,12.375,-37.5,29.75,12.375,-35,29.75,11.125,-37.5,29.75,11.125,-37.5,29.75,14.875,-35,29.75,13.625,-37.5,29.75,13.625,-30,29.75,17.375,-35,29.75,17.375,-37.5,29.75,17.375,-35,29.75,16.125,-37.5,29.75,16.125,-35,29.75,18.625,-37.5,29.75,18.625,-28.571,29.75,19.875,-17.143,29.75,19.875,-5.714,29.75,19.875,5.714,29.75,19.875,17.143,29.75,19.875,28.571,29.75,19.875,40,29.75,18.764,40,29.75,17.653,40,29.75,16.542,40,29.75,15.431,40,29.75,14.319,40,29.75,13.208,40,29.75,12.097,40,29.75,10.986,40,29.75,9.875,40,29.75,8.764,40,29.75,7.653,40,29.75,6.542,40,29.75,5.431,40,29.75,4.319,40,29.75,3.208,40,29.75,2.097,40,29.75,.986,40,29.75,-1.236,40,29.75,-2.347,40,29.75,-3.458,40,29.75,-4.569,40,29.75,-5.681,40,29.75,-6.792,40,29.75,-7.903,40,29.75,-9.014,40,29.75,-10.125,40,29.75,-11.236,40,29.75,-12.347,40,29.75,-13.458,40,29.75,-14.569,40,29.75,-15.681,40,29.75,-16.792,40,29.75,-17.903,40,29.75,-19.014,20,29.75,-.125,20,29.75,9.875,30,29.75,9.875,20,29.75,14.875,30,29.75,14.875,35,29.75,14.875,30,29.75,17.375,35,29.75,17.375,37.5,29.75,17.375,35,29.75,18.625,37.5,29.75,18.625,37.5,29.75,14.875,35,29.75,16.125,37.5,29.75,16.125,35,29.75,9.875,30,29.75,12.375,35,29.75,12.375,30,29.75,-.125,20,29.75,4.875,30,29.75,4.875,20,29.75,-10.125,37.5,29.75,12.375,35,29.75,13.625,37.5,29.75,13.625,37.5,29.75,9.875,35,29.75,11.125,37.5,29.75,11.125,35,29.75,4.875,30,29.75,7.375,35,29.75,7.375,37.5,29.75,7.375,35,29.75,8.625,37.5,29.75,8.625,37.5,29.75,4.875,35,29.75,6.125,37.5,29.75,6.125,35,29.75,-.125,30,29.75,2.375,35,29.75,2.375,30,29.75,-10.125,20,29.75,-5.125,30,29.75,-5.125,37.5,29.75,2.375,35,29.75,3.625,37.5,29.75,3.625,37.5,29.75,-.125,35,29.75,1.125,37.5,29.75,1.125,35,29.75,-5.125,30,29.75,-2.625,35,29.75,-2.625,37.5,29.75,-2.625,35,29.75,-1.375,37.5,29.75,-1.375,37.5,29.75,-5.125,35,29.75,-3.875,37.5,29.75,-3.875,35,29.75,-10.125,30,29.75,-7.625,35,29.75,-7.625,20,29.75,-15.125,30,29.75,-15.125,37.5,29.75,-7.625,35,29.75,-6.375,37.5,29.75,-6.375,37.5,29.75,-10.125,35,29.75,-8.875,37.5,29.75,-8.875,35,29.75,-15.125,30,29.75,-12.625,35,29.75,-12.625,37.5,29.75,-12.625,35,29.75,-11.375,37.5,29.75,-11.375,37.5,29.75,-15.125,35,29.75,-13.875,37.5,29.75,-13.875,30,29.75,-17.625,35,29.75,-17.625,37.5,29.75,-17.625,35,29.75,-16.375,37.5,29.75,-16.375,35,29.75,-18.875,37.5,29.75,-18.875,28.571,29.75,-20.125,17.143,29.75,-20.125,5.714,29.75,-20.125,-5.714,29.75,-20.125,-17.143,29.75,-20.125,-28.571,29.75,-20.125,-40,-10.25,-20.125,40,-10.25,-20.125,-40,-10.25,19.875,40,-10.25,19.875,-40,-10.25,-19.014,-40,-10.25,-17.903,-40,-10.25,-16.792,-40,-10.25,-15.681,-40,-10.25,-14.569,-40,-10.25,-13.458,-40,-10.25,-12.347,-40,-10.25,-11.236,-40,-10.25,-10.125,-40,-10.25,-9.014,-40,-10.25,-7.903,-40,-10.25,-6.792,-40,-10.25,-5.681,-40,-10.25,-4.569,-40,-10.25,-3.458,-40,-10.25,-2.347,-40,-10.25,-1.236,-40,-10.25,-.125,-40,-10.25,.986,-40,-10.25,2.097,-40,-10.25,3.208,-40,-10.25,4.319,-40,-10.25,5.431,-40,-10.25,6.542,-40,-10.25,7.653,-40,-10.25,8.764,-40,-10.25,9.875,-40,-10.25,10.986,-40,-10.25,12.097,-40,-10.25,13.208,-40,-10.25,14.319,-40,-10.25,15.431,-40,-10.25,16.542,-40,-10.25,17.653,-40,-10.25,18.764,40,-10.25,-.125,0,-10.25,-.125,-20,-10.25,-.125,0,-10.25,-10.125,-20,-10.25,-10.125,-30,-10.25,-10.125,-20,-10.25,-15.125,-30,-10.25,-15.125,-35,-10.25,-15.125,-30,-10.25,-17.625,-35,-10.25,-17.625,-37.5,-10.25,-17.625,-35,-10.25,-18.875,-37.5,-10.25,-18.875,-37.5,-10.25,-15.125,-35,-10.25,-16.375,-37.5,-10.25,-16.375,-35,-10.25,-10.125,-30,-10.25,-12.625,-35,-10.25,-12.625,-30,-10.25,-.125,-20,-10.25,-5.125,-30,-10.25,-5.125,0,-10.25,9.875,-20,-10.25,9.875,-37.5,-10.25,-12.625,-35,-10.25,-13.875,-37.5,-10.25,-13.875,-37.5,-10.25,-10.125,-35,-10.25,-11.375,-37.5,-10.25,-11.375,-35,-10.25,-5.125,-30,-10.25,-7.625,-35,-10.25,-7.625,-37.5,-10.25,-7.625,-35,-10.25,-8.875,-37.5,-10.25,-8.875,-37.5,-10.25,-5.125,-35,-10.25,-6.375,-37.5,-10.25,-6.375,-35,-10.25,-.125,-30,-10.25,-2.625,-35,-10.25,-2.625,-30,-10.25,9.875,-20,-10.25,4.875,-30,-10.25,4.875,-37.5,-10.25,-2.625,-35,-10.25,-3.875,-37.5,-10.25,-3.875,-37.5,-10.25,-.125,-35,-10.25,-1.375,-37.5,-10.25,-1.375,-35,-10.25,4.875,-30,-10.25,2.375,-35,-10.25,2.375,-37.5,-10.25,2.375,-35,-10.25,1.125,-37.5,-10.25,1.125,-37.5,-10.25,4.875,-35,-10.25,3.625,-37.5,-10.25,3.625,-35,-10.25,9.875,-30,-10.25,7.375,-35,-10.25,7.375,-20,-10.25,14.875,-30,-10.25,14.875,-37.5,-10.25,7.375,-35,-10.25,6.125,-37.5,-10.25,6.125,-37.5,-10.25,9.875,-35,-10.25,8.625,-37.5,-10.25,8.625,-35,-10.25,14.875,-30,-10.25,12.375,-35,-10.25,12.375,-37.5,-10.25,12.375,-35,-10.25,11.125,-37.5,-10.25,11.125,-37.5,-10.25,14.875,-35,-10.25,13.625,-37.5,-10.25,13.625,-30,-10.25,17.375,-35,-10.25,17.375,-37.5,-10.25,17.375,-35,-10.25,16.125,-37.5,-10.25,16.125,-35,-10.25,18.625,-37.5,-10.25,18.625,-28.571,-10.25,19.875,-17.143,-10.25,19.875,-5.714,-10.25,19.875,5.714,-10.25,19.875,17.143,-10.25,19.875,28.571,-10.25,19.875,40,-10.25,18.764,40,-10.25,17.653,40,-10.25,16.542,40,-10.25,15.431,40,-10.25,14.319,40,-10.25,13.208,40,-10.25,12.097,40,-10.25,10.986,40,-10.25,9.875,40,-10.25,8.764,40,-10.25,7.653,40,-10.25,6.542,40,-10.25,5.431,40,-10.25,4.319,40,-10.25,3.208,40,-10.25,2.097,40,-10.25,.986,40,-10.25,-1.236,40,-10.25,-2.347,40,-10.25,-3.458,40,-10.25,-4.569,40,-10.25,-5.681,40,-10.25,-6.792,40,-10.25,-7.903,40,-10.25,-9.014,40,-10.25,-10.125,40,-10.25,-11.236,40,-10.25,-12.347,40,-10.25,-13.458,40,-10.25,-14.569,40,-10.25,-15.681,40,-10.25,-16.792,40,-10.25,-17.903,40,-10.25,-19.014,20,-10.25,-.125,20,-10.25,9.875,30,-10.25,9.875,20,-10.25,14.875,30,-10.25,14.875,35,-10.25,14.875,30,-10.25,17.375,35,-10.25,17.375,37.5,-10.25,17.375,35,-10.25,18.625,37.5,-10.25,18.625,37.5,-10.25,14.875,35,-10.25,16.125,37.5,-10.25,16.125,35,-10.25,9.875,30,-10.25,12.375,35,-10.25,12.375,30,-10.25,-.125,20,-10.25,4.875,30,-10.25,4.875,20,-10.25,-10.125,37.5,-10.25,12.375,35,-10.25,13.625,37.5,-10.25,13.625,37.5,-10.25,9.875,35,-10.25,11.125,37.5,-10.25,11.125,35,-10.25,4.875,30,-10.25,7.375,35,-10.25,7.375,37.5,-10.25,7.375,35,-10.25,8.625,37.5,-10.25,8.625,37.5,-10.25,4.875,35,-10.25,6.125,37.5,-10.25,6.125,35,-10.25,-.125,30,-10.25,2.375,35,-10.25,2.375,30,-10.25,-10.125,20,-10.25,-5.125,30,-10.25,-5.125,37.5,-10.25,2.375,35,-10.25,3.625,37.5,-10.25,3.625,37.5,-10.25,-.125,35,-10.25,1.125,37.5,-10.25,1.125,35,-10.25,-5.125,30,-10.25,-2.625,35,-10.25,-2.625,37.5,-10.25,-2.625,35,-10.25,-1.375,37.5,-10.25,-1.375,37.5,-10.25,-5.125,35,-10.25,-3.875,37.5,-10.25,-3.875,35,-10.25,-10.125,30,-10.25,-7.625,35,-10.25,-7.625,20,-10.25,-15.125,30,-10.25,-15.125,37.5,-10.25,-7.625,35,-10.25,-6.375,37.5,-10.25,-6.375,37.5,-10.25,-10.125,35,-10.25,-8.875,37.5,-10.25,-8.875,35,-10.25,-15.125,30,-10.25,-12.625,35,-10.25,-12.625,37.5,-10.25,-12.625,35,-10.25,-11.375,37.5,-10.25,-11.375,37.5,-10.25,-15.125,35,-10.25,-13.875,37.5,-10.25,-13.875,30,-10.25,-17.625,35,-10.25,-17.625,37.5,-10.25,-17.625,35,-10.25,-16.375,37.5,-10.25,-16.375,35,-10.25,-18.875,37.5,-10.25,-18.875,28.571,-10.25,-20.125,17.143,-10.25,-20.125,5.714,-10.25,-20.125,-5.714,-10.25,-20.125,-17.143,-10.25,-20.125,-28.571,-10.25,-20.125,-40,10.25,-20.125,40,10.25,-20.125,-40,10.25,19.875,40,10.25,19.875,-40,10.25,-19.014,-40,10.25,-17.903,-40,10.25,-16.792,-40,10.25,-15.681,-40,10.25,-14.569,-40,10.25,-13.458,-40,10.25,-12.347,-40,10.25,-11.236,-40,10.25,-10.125,-40,10.25,-9.014,-40,10.25,-7.903,-40,10.25,-6.792,-40,10.25,-5.681,-40,10.25,-4.569,-40,10.25,-3.458,-40,10.25,-2.347,-40,10.25,-1.236,-40,10.25,-.125,-40,10.25,.986,-40,10.25,2.097,-40,10.25,3.208,-40,10.25,4.319,-40,10.25,5.431,-40,10.25,6.542,-40,10.25,7.653,-40,10.25,8.764,-40,10.25,9.875,-40,10.25,10.986,-40,10.25,12.097,-40,10.25,13.208,-40,10.25,14.319,-40,10.25,15.431,-40,10.25,16.542,-40,10.25,17.653,-40,10.25,18.764,40,10.25,-.125,0,10.25,-.125,-20,10.25,-.125,0,10.25,-10.125,-20,10.25,-10.125,-30,10.25,-10.125,-20,10.25,-15.125,-30,10.25,-15.125,-35,10.25,-15.125,-30,10.25,-17.625,-35,10.25,-17.625,-37.5,10.25,-17.625,-35,10.25,-18.875,-37.5,10.25,-18.875,-37.5,10.25,-15.125,-35,10.25,-16.375,-37.5,10.25,-16.375,-35,10.25,-10.125,-30,10.25,-12.625,-35,10.25,-12.625,-30,10.25,-.125,-20,10.25,-5.125,-30,10.25,-5.125,0,10.25,9.875,-20,10.25,9.875,-37.5,10.25,-12.625,-35,10.25,-13.875,-37.5,10.25,-13.875,-37.5,10.25,-10.125,-35,10.25,-11.375,-37.5,10.25,-11.375,-35,10.25,-5.125,-30,10.25,-7.625,-35,10.25,-7.625,-37.5,10.25,-7.625,-35,10.25,-8.875,-37.5,10.25,-8.875,-37.5,10.25,-5.125,-35,10.25,-6.375,-37.5,10.25,-6.375,-35,10.25,-.125,-30,10.25,-2.625,-35,10.25,-2.625,-30,10.25,9.875,-20,10.25,4.875,-30,10.25,4.875,-37.5,10.25,-2.625,-35,10.25,-3.875,-37.5,10.25,-3.875,-37.5,10.25,-.125,-35,10.25,-1.375,-37.5,10.25,-1.375,-35,10.25,4.875,-30,10.25,2.375,-35,10.25,2.375,-37.5,10.25,2.375,-35,10.25,1.125,-37.5,10.25,1.125,-37.5,10.25,4.875,-35,10.25,3.625,-37.5,10.25,3.625,-35,10.25,9.875,-30,10.25,7.375,-35,10.25,7.375,-20,10.25,14.875,-30,10.25,14.875,-37.5,10.25,7.375,-35,10.25,6.125,-37.5,10.25,6.125,-37.5,10.25,9.875,-35,10.25,8.625,-37.5,10.25,8.625,-35,10.25,14.875,-30,10.25,12.375,-35,10.25,12.375,-37.5,10.25,12.375,-35,10.25,11.125,-37.5,10.25,11.125,-37.5,10.25,14.875,-35,10.25,13.625,-37.5,10.25,13.625,-30,10.25,17.375,-35,10.25,17.375,-37.5,10.25,17.375,-35,10.25,16.125,-37.5,10.25,16.125,-35,10.25,18.625,-37.5,10.25,18.625,-28.571,10.25,19.875,-17.143,10.25,19.875,-5.714,10.25,19.875,5.714,10.25,19.875,17.143,10.25,19.875,28.571,10.25,19.875,40,10.25,18.764,40,10.25,17.653,40,10.25,16.542,40,10.25,15.431,40,10.25,14.319,40,10.25,13.208,40,10.25,12.097,40,10.25,10.986,40,10.25,9.875,40,10.25,8.764,40,10.25,7.653,40,10.25,6.542,40,10.25,5.431,40,10.25,4.319,40,10.25,3.208,40,10.25,2.097,40,10.25,.986,40,10.25,-1.236,40,10.25,-2.347,40,10.25,-3.458,40,10.25,-4.569,40,10.25,-5.681,40,10.25,-6.792,40,10.25,-7.903,40,10.25,-9.014,40,10.25,-10.125,40,10.25,-11.236,40,10.25,-12.347,40,10.25,-13.458,40,10.25,-14.569,40,10.25,-15.681,40,10.25,-16.792,40,10.25,-17.903,40,10.25,-19.014,20,10.25,-.125,20,10.25,9.875,30,10.25,9.875,20,10.25,14.875,30,10.25,14.875,35,10.25,14.875,30,10.25,17.375,35,10.25,17.375,37.5,10.25,17.375,35,10.25,18.625,37.5,10.25,18.625,37.5,10.25,14.875,35,10.25,16.125,37.5,10.25,16.125,35,10.25,9.875,30,10.25,12.375,35,10.25,12.375,30,10.25,-.125,20,10.25,4.875,30,10.25,4.875,20,10.25,-10.125,37.5,10.25,12.375,35,10.25,13.625,37.5,10.25,13.625,37.5,10.25,9.875,35,10.25,11.125,37.5,10.25,11.125,35,10.25,4.875,30,10.25,7.375,35,10.25,7.375,37.5,10.25,7.375,35,10.25,8.625,37.5,10.25,8.625,37.5,10.25,4.875,35,10.25,6.125,37.5,10.25,6.125,35,10.25,-.125,30,10.25,2.375,35,10.25,2.375,30,10.25,-10.125,20,10.25,-5.125,30,10.25,-5.125,37.5,10.25,2.375,35,10.25,3.625,37.5,10.25,3.625,37.5,10.25,-.125,35,10.25,1.125,37.5,10.25,1.125,35,10.25,-5.125,30,10.25,-2.625,35,10.25,-2.625,37.5,10.25,-2.625,35,10.25,-1.375,37.5,10.25,-1.375,37.5,10.25,-5.125,35,10.25,-3.875,37.5,10.25,-3.875,35,10.25,-10.125,30,10.25,-7.625,35,10.25,-7.625,20,10.25,-15.125,30,10.25,-15.125,37.5,10.25,-7.625,35,10.25,-6.375,37.5,10.25,-6.375,37.5,10.25,-10.125,35,10.25,-8.875,37.5,10.25,-8.875,35,10.25,-15.125,30,10.25,-12.625,35,10.25,-12.625,37.5,10.25,-12.625,35,10.25,-11.375,37.5,10.25,-11.375,37.5,10.25,-15.125,35,10.25,-13.875,37.5,10.25,-13.875,30,10.25,-17.625,35,10.25,-17.625,37.5,10.25,-17.625,35,10.25,-16.375,37.5,10.25,-16.375,35,10.25,-18.875,37.5,10.25,-18.875,28.571,10.25,-20.125,17.143,10.25,-20.125,5.714,10.25,-20.125,-5.714,10.25,-20.125,-17.143,10.25,-20.125,-28.571,10.25,-20.125,-40,-50.25,-20.125,40,-50.25,-20.125,-40,-50.25,19.875,40,-50.25,19.875,-40,-50.25,-19.014,-40,-50.25,-17.903,-40,-50.25,-16.792,-40,-50.25,-15.681,-40,-50.25,-14.569,-40,-50.25,-13.458,-40,-50.25,-12.347,-40,-50.25,-11.236,-40,-50.25,-10.125,-40,-50.25,-9.014,-40,-50.25,-7.903,-40,-50.25,-6.792,-40,-50.25,-5.681,-40,-50.25,-4.569,-40,-50.25,-3.458,-40,-50.25,-2.347,-40,-50.25,-1.236,-40,-50.25,-.125,-40,-50.25,.986,-40,-50.25,2.097,-40,-50.25,3.208,-40,-50.25,4.319,-40,-50.25,5.431,-40,-50.25,6.542,-40,-50.25,7.653,-40,-50.25,8.764,-40,-50.25,9.875,-40,-50.25,10.986,-40,-50.25,12.097,-40,-50.25,13.208,-40,-50.25,14.319,-40,-50.25,15.431,-40,-50.25,16.542,-40,-50.25,17.653,-40,-50.25,18.764,40,-50.25,-.125,0,-50.25,-20.125,0,-50.25,-.125,-20,-50.25,-.125,0,-50.25,-10.125,-20,-50.25,-10.125,-30,-50.25,-10.125,-20,-50.25,-15.125,-30,-50.25,-15.125,-35,-50.25,-15.125,-30,-50.25,-17.625,-35,-50.25,-17.625,-37.5,-50.25,-17.625,-35,-50.25,-18.875,-37.5,-50.25,-18.875,-37.5,-50.25,-15.125,-35,-50.25,-16.375,-37.5,-50.25,-16.375,-35,-50.25,-10.125,-30,-50.25,-12.625,-35,-50.25,-12.625,-30,-50.25,-.125,-20,-50.25,-5.125,-30,-50.25,-5.125,0,-50.25,9.875,-20,-50.25,9.875,-37.5,-50.25,-12.625,-35,-50.25,-13.875,-37.5,-50.25,-13.875,-37.5,-50.25,-10.125,-35,-50.25,-11.375,-37.5,-50.25,-11.375,-35,-50.25,-5.125,-30,-50.25,-7.625,-35,-50.25,-7.625,-37.5,-50.25,-7.625,-35,-50.25,-8.875,-37.5,-50.25,-8.875,-37.5,-50.25,-5.125,-35,-50.25,-6.375,-37.5,-50.25,-6.375,-35,-50.25,-.125,-30,-50.25,-2.625,-35,-50.25,-2.625,-30,-50.25,9.875,-20,-50.25,4.875,-30,-50.25,4.875,-37.5,-50.25,-2.625,-35,-50.25,-3.875,-37.5,-50.25,-3.875,-37.5,-50.25,-.125,-35,-50.25,-1.375,-37.5,-50.25,-1.375,-35,-50.25,4.875,-30,-50.25,2.375,-35,-50.25,2.375,-37.5,-50.25,2.375,-35,-50.25,1.125,-37.5,-50.25,1.125,-37.5,-50.25,4.875,-35,-50.25,3.625,-37.5,-50.25,3.625,-35,-50.25,9.875,-30,-50.25,7.375,-35,-50.25,7.375,-20,-50.25,14.875,-30,-50.25,14.875,-37.5,-50.25,7.375,-35,-50.25,6.125,-37.5,-50.25,6.125,-37.5,-50.25,9.875,-35,-50.25,8.625,-37.5,-50.25,8.625,-35,-50.25,14.875,-30,-50.25,12.375,-35,-50.25,12.375,-37.5,-50.25,12.375,-35,-50.25,11.125,-37.5,-50.25,11.125,-37.5,-50.25,14.875,-35,-50.25,13.625,-37.5,-50.25,13.625,-30,-50.25,17.375,-35,-50.25,17.375,-37.5,-50.25,17.375,-35,-50.25,16.125,-37.5,-50.25,16.125,-35,-50.25,18.625,-37.5,-50.25,18.625,-28.571,-50.25,19.875,-17.143,-50.25,19.875,-5.714,-50.25,19.875,5.714,-50.25,19.875,17.143,-50.25,19.875,28.571,-50.25,19.875,40,-50.25,18.764,40,-50.25,17.653,40,-50.25,16.542,40,-50.25,15.431,40,-50.25,14.319,40,-50.25,13.208,40,-50.25,12.097,40,-50.25,10.986,40,-50.25,9.875,40,-50.25,8.764,40,-50.25,7.653,40,-50.25,6.542,40,-50.25,5.431,40,-50.25,4.319,40,-50.25,3.208,40,-50.25,2.097,40,-50.25,.986,40,-50.25,-1.236,40,-50.25,-2.347,40,-50.25,-3.458,40,-50.25,-4.569,40,-50.25,-5.681,40,-50.25,-6.792,40,-50.25,-7.903,40,-50.25,-9.014,40,-50.25,-10.125,40,-50.25,-11.236,40,-50.25,-12.347,40,-50.25,-13.458,40,-50.25,-14.569,40,-50.25,-15.681,40,-50.25,-16.792,40,-50.25,-17.903,40,-50.25,-19.014,20,-50.25,-.125,20,-50.25,9.875,30,-50.25,9.875,20,-50.25,14.875,30,-50.25,14.875,35,-50.25,14.875,30,-50.25,17.375,35,-50.25,17.375,37.5,-50.25,17.375,35,-50.25,18.625,37.5,-50.25,18.625,37.5,-50.25,14.875,35,-50.25,16.125,37.5,-50.25,16.125,35,-50.25,9.875,30,-50.25,12.375,35,-50.25,12.375,30,-50.25,-.125,20,-50.25,4.875,30,-50.25,4.875,20,-50.25,-20.125,20,-50.25,-10.125,37.5,-50.25,12.375,35,-50.25,13.625,37.5,-50.25,13.625,37.5,-50.25,9.875,35,-50.25,11.125,37.5,-50.25,11.125,35,-50.25,4.875,30,-50.25,7.375,35,-50.25,7.375,37.5,-50.25,7.375,35,-50.25,8.625,37.5,-50.25,8.625,37.5,-50.25,4.875,35,-50.25,6.125,37.5,-50.25,6.125,35,-50.25,-.125,30,-50.25,2.375,35,-50.25,2.375,30,-50.25,-10.125,20,-50.25,-5.125,30,-50.25,-5.125,37.5,-50.25,2.375,35,-50.25,3.625,37.5,-50.25,3.625,37.5,-50.25,-.125,35,-50.25,1.125,37.5,-50.25,1.125,35,-50.25,-5.125,30,-50.25,-2.625,35,-50.25,-2.625,37.5,-50.25,-2.625,35,-50.25,-1.375,37.5,-50.25,-1.375,37.5,-50.25,-5.125,35,-50.25,-3.875,37.5,-50.25,-3.875,35,-50.25,-10.125,30,-50.25,-7.625,35,-50.25,-7.625,30,-50.25,-20.125,20,-50.25,-15.125,30,-50.25,-15.125,37.5,-50.25,-7.625,35,-50.25,-6.375,37.5,-50.25,-6.375,37.5,-50.25,-10.125,35,-50.25,-8.875,37.5,-50.25,-8.875,35,-50.25,-15.125,30,-50.25,-12.625,35,-50.25,-12.625,37.5,-50.25,-12.625,35,-50.25,-11.375,37.5,-50.25,-11.375,37.5,-50.25,-15.125,35,-50.25,-13.875,37.5,-50.25,-13.875,30,-50.25,-17.625,35,-50.25,-17.625,37.5,-50.25,-17.625,35,-50.25,-16.375,37.5,-50.25,-16.375,35,-50.25,-18.875,37.5,-50.25,-18.875,38.889,-50.25,-20.125,37.778,-50.25,-20.125,36.667,-50.25,-20.125,35.556,-50.25,-20.125,34.444,-50.25,-20.125,33.333,-50.25,-20.125,32.222,-50.25,-20.125,31.111,-50.25,-20.125,28.889,-50.25,-20.125,27.778,-50.25,-20.125,26.667,-50.25,-20.125,25.556,-50.25,-20.125,24.444,-50.25,-20.125,23.333,-50.25,-20.125,22.222,-50.25,-20.125,21.111,-50.25,-20.125,18.889,-50.25,-20.125,17.778,-50.25,-20.125,16.667,-50.25,-20.125,15.556,-50.25,-20.125,14.444,-50.25,-20.125,13.333,-50.25,-20.125,12.222,-50.25,-20.125,11.111,-50.25,-20.125,10,-50.25,-20.125,8.889,-50.25,-20.125,7.778,-50.25,-20.125,6.667,-50.25,-20.125,5.556,-50.25,-20.125,4.444,-50.25,-20.125,3.333,-50.25,-20.125,2.222,-50.25,-20.125,1.111,-50.25,-20.125,-1.111,-50.25,-20.125,-2.222,-50.25,-20.125,-3.333,-50.25,-20.125,-4.444,-50.25,-20.125,-5.556,-50.25,-20.125,-6.667,-50.25,-20.125,-7.778,-50.25,-20.125,-8.889,-50.25,-20.125,-10,-50.25,-20.125,-11.111,-50.25,-20.125,-12.222,-50.25,-20.125,-13.333,-50.25,-20.125,-14.444,-50.25,-20.125,-15.556,-50.25,-20.125,-16.667,-50.25,-20.125,-17.778,-50.25,-20.125,-18.889,-50.25,-20.125,-20,-50.25,-20.125,-21.111,-50.25,-20.125,-22.222,-50.25,-20.125,-23.333,-50.25,-20.125,-24.444,-50.25,-20.125,-25.556,-50.25,-20.125,-26.667,-50.25,-20.125,-27.778,-50.25,-20.125,-28.889,-50.25,-20.125,-30,-50.25,-20.125,-31.111,-50.25,-20.125,-32.222,-50.25,-20.125,-33.333,-50.25,-20.125,-34.444,-50.25,-20.125,-35.556,-50.25,-20.125,-36.667,-50.25,-20.125,-37.778,-50.25,-20.125,-38.889,-50.25,-20.125,32.5,-50.25,-17.625,30,-50.25,-18.875,32.5,-50.25,-18.875,25,-50.25,-15.125,20,-50.25,-17.625,25,-50.25,-17.625,10,-50.25,-10.125,0,-50.25,-15.125,10,-50.25,-15.125,27.5,-50.25,-17.625,25,-50.25,-18.875,27.5,-50.25,-18.875,22.5,-50.25,-17.625,20,-50.25,-18.875,22.5,-50.25,-18.875,15,-50.25,-15.125,10,-50.25,-17.625,15,-50.25,-17.625,17.5,-50.25,-17.625,15,-50.25,-18.875,17.5,-50.25,-18.875,12.5,-50.25,-17.625,10,-50.25,-18.875,12.5,-50.25,-18.875,5,-50.25,-15.125,0,-50.25,-17.625,5,-50.25,-17.625,-10,-50.25,-10.125,-10,-50.25,-15.125,7.5,-50.25,-17.625,5,-50.25,-18.875,7.5,-50.25,-18.875,2.5,-50.25,-17.625,0,-50.25,-18.875,2.5,-50.25,-18.875,-5,-50.25,-15.125,-10,-50.25,-17.625,-5,-50.25,-17.625,-2.5,-50.25,-17.625,-5,-50.25,-18.875,-2.5,-50.25,-18.875,-7.5,-50.25,-17.625,-10,-50.25,-18.875,-7.5,-50.25,-18.875,-15,-50.25,-15.125,-20,-50.25,-17.625,-15,-50.25,-17.625,-12.5,-50.25,-17.625,-15,-50.25,-18.875,-12.5,-50.25,-18.875,-17.5,-50.25,-17.625,-20,-50.25,-18.875,-17.5,-50.25,-18.875,-25,-50.25,-15.125,-25,-50.25,-17.625,-22.5,-50.25,-17.625,-25,-50.25,-18.875,-22.5,-50.25,-18.875,-27.5,-50.25,-17.625,-30,-50.25,-18.875,-27.5,-50.25,-18.875,-32.5,-50.25,-17.625,-32.5,-50.25,-18.875,-40,-29.75,-20.125,40,-29.75,-20.125,-40,-29.75,19.875,40,-29.75,19.875,-40,-29.75,-19.014,-40,-29.75,-17.903,-40,-29.75,-16.792,-40,-29.75,-15.681,-40,-29.75,-14.569,-40,-29.75,-13.458,-40,-29.75,-12.347,-40,-29.75,-11.236,-40,-29.75,-10.125,-40,-29.75,-9.014,-40,-29.75,-7.903,-40,-29.75,-6.792,-40,-29.75,-5.681,-40,-29.75,-4.569,-40,-29.75,-3.458,-40,-29.75,-2.347,-40,-29.75,-1.236,-40,-29.75,-.125,-40,-29.75,.986,-40,-29.75,2.097,-40,-29.75,3.208,-40,-29.75,4.319,-40,-29.75,5.431,-40,-29.75,6.542,-40,-29.75,7.653,-40,-29.75,8.764,-40,-29.75,9.875,-40,-29.75,10.986,-40,-29.75,12.097,-40,-29.75,13.208,-40,-29.75,14.319,-40,-29.75,15.431,-40,-29.75,16.542,-40,-29.75,17.653,-40,-29.75,18.764,40,-29.75,-.125,0,-29.75,-.125,-20,-29.75,-.125,0,-29.75,-10.125,-20,-29.75,-10.125,-30,-29.75,-10.125,-20,-29.75,-15.125,-30,-29.75,-15.125,-35,-29.75,-15.125,-30,-29.75,-17.625,-35,-29.75,-17.625,-37.5,-29.75,-17.625,-35,-29.75,-18.875,-37.5,-29.75,-18.875,-37.5,-29.75,-15.125,-35,-29.75,-16.375,-37.5,-29.75,-16.375,-35,-29.75,-10.125,-30,-29.75,-12.625,-35,-29.75,-12.625,-30,-29.75,-.125,-20,-29.75,-5.125,-30,-29.75,-5.125,0,-29.75,9.875,-20,-29.75,9.875,-37.5,-29.75,-12.625,-35,-29.75,-13.875,-37.5,-29.75,-13.875,-37.5,-29.75,-10.125,-35,-29.75,-11.375,-37.5,-29.75,-11.375,-35,-29.75,-5.125,-30,-29.75,-7.625,-35,-29.75,-7.625,-37.5,-29.75,-7.625,-35,-29.75,-8.875,-37.5,-29.75,-8.875,-37.5,-29.75,-5.125,-35,-29.75,-6.375,-37.5,-29.75,-6.375,-35,-29.75,-.125,-30,-29.75,-2.625,-35,-29.75,-2.625,-30,-29.75,9.875,-20,-29.75,4.875,-30,-29.75,4.875,-37.5,-29.75,-2.625,-35,-29.75,-3.875,-37.5,-29.75,-3.875,-37.5,-29.75,-.125,-35,-29.75,-1.375,-37.5,-29.75,-1.375,-35,-29.75,4.875,-30,-29.75,2.375,-35,-29.75,2.375,-37.5,-29.75,2.375,-35,-29.75,1.125,-37.5,-29.75,1.125,-37.5,-29.75,4.875,-35,-29.75,3.625,-37.5,-29.75,3.625,-35,-29.75,9.875,-30,-29.75,7.375,-35,-29.75,7.375,-20,-29.75,14.875,-30,-29.75,14.875,-37.5,-29.75,7.375,-35,-29.75,6.125,-37.5,-29.75,6.125,-37.5,-29.75,9.875,-35,-29.75,8.625,-37.5,-29.75,8.625,-35,-29.75,14.875,-30,-29.75,12.375,-35,-29.75,12.375,-37.5,-29.75,12.375,-35,-29.75,11.125,-37.5,-29.75,11.125,-37.5,-29.75,14.875,-35,-29.75,13.625,-37.5,-29.75,13.625,-30,-29.75,17.375,-35,-29.75,17.375,-37.5,-29.75,17.375,-35,-29.75,16.125,-37.5,-29.75,16.125,-35,-29.75,18.625,-37.5,-29.75,18.625,-28.571,-29.75,19.875,-17.143,-29.75,19.875,-5.714,-29.75,19.875,5.714,-29.75,19.875,17.143,-29.75,19.875,28.571,-29.75,19.875,40,-29.75,18.764,40,-29.75,17.653,40,-29.75,16.542,40,-29.75,15.431,40,-29.75,14.319,40,-29.75,13.208,40,-29.75,12.097,40,-29.75,10.986,40,-29.75,9.875,40,-29.75,8.764,40,-29.75,7.653,40,-29.75,6.542,40,-29.75,5.431,40,-29.75,4.319,40,-29.75,3.208,40,-29.75,2.097,40,-29.75,.986,40,-29.75,-1.236,40,-29.75,-2.347,40,-29.75,-3.458,40,-29.75,-4.569,40,-29.75,-5.681,40,-29.75,-6.792,40,-29.75,-7.903,40,-29.75,-9.014,40,-29.75,-10.125,40,-29.75,-11.236,40,-29.75,-12.347,40,-29.75,-13.458,40,-29.75,-14.569,40,-29.75,-15.681,40,-29.75,-16.792,40,-29.75,-17.903,40,-29.75,-19.014,20,-29.75,-.125,20,-29.75,9.875,30,-29.75,9.875,20,-29.75,14.875,30,-29.75,14.875,35,-29.75,14.875,30,-29.75,17.375,35,-29.75,17.375,37.5,-29.75,17.375,35,-29.75,18.625,37.5,-29.75,18.625,37.5,-29.75,14.875,35,-29.75,16.125,37.5,-29.75,16.125,35,-29.75,9.875,30,-29.75,12.375,35,-29.75,12.375,30,-29.75,-.125,20,-29.75,4.875,30,-29.75,4.875,20,-29.75,-10.125,37.5,-29.75,12.375,35,-29.75,13.625,37.5,-29.75,13.625,37.5,-29.75,9.875,35,-29.75,11.125,37.5,-29.75,11.125,35,-29.75,4.875,30,-29.75,7.375,35,-29.75,7.375,37.5,-29.75,7.375,35,-29.75,8.625,37.5,-29.75,8.625,37.5,-29.75,4.875,35,-29.75,6.125,37.5,-29.75,6.125,35,-29.75,-.125,30,-29.75,2.375,35,-29.75,2.375,30,-29.75,-10.125,20,-29.75,-5.125,30,-29.75,-5.125,37.5,-29.75,2.375,35,-29.75,3.625,37.5,-29.75,3.625,37.5,-29.75,-.125,35,-29.75,1.125,37.5,-29.75,1.125,35,-29.75,-5.125,30,-29.75,-2.625,35,-29.75,-2.625,37.5,-29.75,-2.625,35,-29.75,-1.375,37.5,-29.75,-1.375,37.5,-29.75,-5.125,35,-29.75,-3.875,37.5,-29.75,-3.875,35,-29.75,-10.125,30,-29.75,-7.625,35,-29.75,-7.625,20,-29.75,-15.125,30,-29.75,-15.125,37.5,-29.75,-7.625,35,-29.75,-6.375,37.5,-29.75,-6.375,37.5,-29.75,-10.125,35,-29.75,-8.875,37.5,-29.75,-8.875,35,-29.75,-15.125,30,-29.75,-12.625,35,-29.75,-12.625,37.5,-29.75,-12.625,35,-29.75,-11.375,37.5,-29.75,-11.375,37.5,-29.75,-15.125,35,-29.75,-13.875,37.5,-29.75,-13.875,30,-29.75,-17.625,35,-29.75,-17.625,37.5,-29.75,-17.625,35,-29.75,-16.375,37.5,-29.75,-16.375,35,-29.75,-18.875,37.5,-29.75,-18.875,28.571,-29.75,-20.125,17.143,-29.75,-20.125,5.714,-29.75,-20.125,-5.714,-29.75,-20.125,-17.143,-29.75,-20.125,-28.571,-29.75,-20.125,-40,29.75,19.875,-28.571,29.75,19.875,-17.143,29.75,19.875,-5.714,29.75,19.875,5.714,29.75,19.875,17.143,29.75,19.875,28.571,29.75,19.875,40,29.75,19.875,-28.571,29.939,21.833,-17.143,29.939,21.833,-5.714,29.939,21.833,5.714,29.939,21.833,17.143,29.939,21.833,28.571,29.939,21.833,-28.571,30.519,23.769,-17.143,30.519,23.769,-5.714,30.519,23.769,5.714,30.519,23.769,17.143,30.519,23.769,28.571,30.519,23.769,-28.571,31.494,25.594,-17.143,31.494,25.594,-5.714,31.494,25.594,5.714,31.494,25.594,17.143,31.494,25.594,28.571,31.494,25.594,-28.571,32.828,27.198,-17.143,32.828,27.198,-5.714,32.828,27.198,5.714,32.828,27.198,17.143,32.828,27.198,28.571,32.828,27.198,-28.571,34.458,28.497,-17.143,34.458,28.497,-5.714,34.458,28.497,5.714,34.458,28.497,17.143,34.458,28.497,28.571,34.458,28.497,-28.571,36.275,29.424,-17.143,36.275,29.424,-5.714,36.275,29.424,5.714,36.275,29.424,17.143,36.275,29.424,28.571,36.275,29.424,-28.571,38.159,29.958,-17.143,38.159,29.958,-5.714,38.159,29.958,5.714,38.159,29.958,17.143,38.159,29.958,28.571,38.159,29.958,-40,40,30.125,-28.571,40,30.125,-17.143,40,30.125,-5.714,40,30.125,5.714,40,30.125,17.143,40,30.125,28.571,40,30.125,40,40,30.125,-28.571,41.958,29.936,-17.143,41.958,29.936,-5.714,41.958,29.936,5.714,41.958,29.936,17.143,41.958,29.936,28.571,41.958,29.936,-28.571,43.894,29.356,-17.143,43.894,29.356,-5.714,43.894,29.356,5.714,43.894,29.356,17.143,43.894,29.356,28.571,43.894,29.356,-28.571,45.719,28.381,-17.143,45.719,28.381,-5.714,45.719,28.381,5.714,45.719,28.381,17.143,45.719,28.381,28.571,45.719,28.381,-28.571,47.323,27.047,-17.143,47.323,27.047,-5.714,47.323,27.047,5.714,47.323,27.047,17.143,47.323,27.047,28.571,47.323,27.047,-28.571,48.622,25.417,-17.143,48.622,25.417,-5.714,48.622,25.417,5.714,48.622,25.417,17.143,48.622,25.417,28.571,48.622,25.417,-28.571,49.549,23.6,-17.143,49.549,23.6,-5.714,49.549,23.6,5.714,49.549,23.6,17.143,49.549,23.6,28.571,49.549,23.6,-28.571,50.083,21.716,-17.143,50.083,21.716,-5.714,50.083,21.716,5.714,50.083,21.716,17.143,50.083,21.716,28.571,50.083,21.716,-40,50.25,19.875,-28.571,50.25,19.875,-17.143,50.25,19.875,-5.714,50.25,19.875,5.714,50.25,19.875,17.143,50.25,19.875,28.571,50.25,19.875,40,50.25,19.875,-40,29.791,20.796,-40,29.921,21.74,-40,30.146,22.695,-40,30.47,23.648,-40,30.895,24.583,-40,31.421,25.484,-40,32.042,26.336,-40,32.752,27.123,-40,33.539,27.833,-40,34.391,28.454,-40,35.292,28.98,-40,36.227,29.405,-40,37.18,29.729,-40,38.135,29.954,-40,39.079,30.084,-40,40.921,30.084,-40,41.865,29.954,-40,42.82,29.729,-40,43.773,29.405,-40,44.708,28.98,-40,45.609,28.454,-40,46.461,27.833,-40,47.248,27.123,-40,47.958,26.336,-40,48.579,25.484,-40,49.105,24.583,-40,49.53,23.648,-40,49.854,22.695,-40,50.079,21.74,-40,50.209,20.796,-34.286,29.939,21.833,-28.571,29.796,20.842,-34.286,29.796,20.842,-37.143,29.796,20.842,-34.286,29.761,20.354,-37.143,29.761,20.354,-37.143,29.939,21.833,-34.286,29.855,21.335,-37.143,29.855,21.335,-34.286,30.519,23.769,-28.571,30.177,22.803,-34.286,30.177,22.803,-37.143,30.177,22.803,-34.286,30.045,22.318,-37.143,30.045,22.318,-37.143,30.519,23.769,-34.286,30.335,23.288,-37.143,30.335,23.288,-34.286,31.494,25.594,-28.571,30.956,24.699,-34.286,30.956,24.699,-37.143,30.956,24.699,-34.286,30.725,24.238,-37.143,30.725,24.238,-37.143,31.494,25.594,-34.286,31.213,25.152,-37.143,31.213,25.152,-34.286,32.828,27.198,-28.571,32.118,26.428,-34.286,32.118,26.428,-37.143,32.118,26.428,-34.286,31.795,26.018,-37.143,31.795,26.018,-37.143,32.828,27.198,-34.286,32.463,26.822,-37.143,32.463,26.822,-34.286,34.458,28.497,-28.571,33.612,27.891,-34.286,33.612,27.891,-37.143,33.612,27.891,-34.286,33.211,27.555,-37.143,33.211,27.555,-37.143,34.458,28.497,-34.286,34.028,28.206,-37.143,34.028,28.206,-34.286,36.275,29.424,-28.571,35.35,29.01,-34.286,35.35,29.01,-37.143,35.35,29.01,-34.286,34.899,28.766,-37.143,34.899,28.766,-37.143,36.275,29.424,-34.286,35.809,29.229,-37.143,35.809,29.229,-34.286,38.159,29.958,-28.571,37.216,29.74,-34.286,37.216,29.74,-37.143,37.216,29.74,-34.286,36.744,29.594,-37.143,36.744,29.594,-37.143,38.159,29.958,-34.286,37.688,29.861,-37.143,37.688,29.861,-34.286,40,30.125,-28.571,39.091,30.085,-34.286,39.091,30.085,-37.143,39.091,30.085,-34.286,38.627,30.033,-37.143,38.627,30.033,-34.286,41.958,29.936,-28.571,40.967,30.079,-34.286,40.967,30.079,-37.143,40.967,30.079,-34.286,40.479,30.114,-37.143,40,30.125,-37.143,40.479,30.114,-37.143,41.958,29.936,-34.286,41.46,30.02,-37.143,41.46,30.02,-34.286,43.894,29.356,-28.571,42.928,29.698,-34.286,42.928,29.698,-37.143,42.928,29.698,-34.286,42.443,29.83,-37.143,42.443,29.83,-37.143,43.894,29.356,-34.286,43.413,29.54,-37.143,43.413,29.54,-34.286,45.719,28.381,-28.571,44.824,28.919,-34.286,44.824,28.919,-37.143,44.824,28.919,-34.286,44.363,29.15,-37.143,44.363,29.15,-37.143,45.719,28.381,-34.286,45.277,28.662,-37.143,45.277,28.662,-34.286,47.323,27.047,-28.571,46.553,27.757,-34.286,46.553,27.757,-37.143,46.553,27.757,-34.286,46.143,28.08,-37.143,46.143,28.08,-37.143,47.323,27.047,-34.286,46.947,27.412,-37.143,46.947,27.412,-34.286,48.622,25.417,-28.571,48.016,26.263,-34.286,48.016,26.263,-37.143,48.016,26.263,-34.286,47.68,26.664,-37.143,47.68,26.664,-37.143,48.622,25.417,-34.286,48.331,25.847,-37.143,48.331,25.847,-34.286,49.549,23.6,-28.571,49.135,24.525,-34.286,49.135,24.525,-37.143,49.135,24.525,-34.286,48.891,24.976,-37.143,48.891,24.976,-37.143,49.549,23.6,-34.286,49.354,24.066,-37.143,49.354,24.066,-34.286,50.083,21.716,-28.571,49.865,22.659,-34.286,49.865,22.659,-37.143,49.865,22.659,-34.286,49.719,23.131,-37.143,49.719,23.131,-37.143,50.083,21.716,-34.286,49.986,22.187,-37.143,49.986,22.187,-28.571,50.21,20.784,-34.286,50.21,20.784,-37.143,50.21,20.784,-34.286,50.158,21.248,-37.143,50.158,21.248,-34.286,50.24,20.326,-37.143,50.24,20.326,40,50.209,20.796,40,50.079,21.74,40,49.854,22.695,40,49.53,23.648,40,49.105,24.583,40,48.579,25.484,40,47.958,26.336,40,47.248,27.123,40,46.461,27.833,40,45.609,28.454,40,44.708,28.98,40,43.773,29.405,40,42.82,29.729,40,41.865,29.954,40,40.921,30.084,40,39.079,30.084,40,38.135,29.954,40,37.18,29.729,40,36.227,29.405,40,35.292,28.98,40,34.391,28.454,40,33.539,27.833,40,32.752,27.123,40,32.042,26.336,40,31.421,25.484,40,30.895,24.583,40,30.47,23.648,40,30.146,22.695,40,29.921,21.74,40,29.791,20.796,34.286,50.083,21.716,28.571,50.21,20.784,34.286,50.21,20.784,37.143,50.21,20.784,34.286,50.24,20.326,37.143,50.24,20.326,37.143,50.083,21.716,34.286,50.158,21.248,37.143,50.158,21.248,34.286,49.549,23.6,28.571,49.865,22.659,34.286,49.865,22.659,37.143,49.865,22.659,34.286,49.986,22.187,37.143,49.986,22.187,37.143,49.549,23.6,34.286,49.719,23.131,37.143,49.719,23.131,34.286,48.622,25.417,28.571,49.135,24.525,34.286,49.135,24.525,37.143,49.135,24.525,34.286,49.354,24.066,37.143,49.354,24.066,37.143,48.622,25.417,34.286,48.891,24.976,37.143,48.891,24.976,34.286,47.323,27.047,28.571,48.016,26.263,34.286,48.016,26.263,37.143,48.016,26.263,34.286,48.331,25.847,37.143,48.331,25.847,37.143,47.323,27.047,34.286,47.68,26.664,37.143,47.68,26.664,34.286,45.719,28.381,28.571,46.553,27.757,34.286,46.553,27.757,37.143,46.553,27.757,34.286,46.947,27.412,37.143,46.947,27.412,37.143,45.719,28.381,34.286,46.143,28.08,37.143,46.143,28.08,34.286,43.894,29.356,28.571,44.824,28.919,34.286,44.824,28.919,37.143,44.824,28.919,34.286,45.277,28.662,37.143,45.277,28.662,37.143,43.894,29.356,34.286,44.363,29.15,37.143,44.363,29.15,34.286,41.958,29.936,28.571,42.928,29.698,34.286,42.928,29.698,37.143,42.928,29.698,34.286,43.413,29.54,37.143,43.413,29.54,37.143,41.958,29.936,34.286,42.443,29.83,37.143,42.443,29.83,34.286,40,30.125,28.571,40.967,30.079,34.286,40.967,30.079,37.143,40.967,30.079,34.286,41.46,30.02,37.143,41.46,30.02,37.143,40,30.125,34.286,40.479,30.114,37.143,40.479,30.114,34.286,38.159,29.958,28.571,39.091,30.085,34.286,39.091,30.085,37.143,39.091,30.085,37.143,38.159,29.958,34.286,38.627,30.033,37.143,38.627,30.033,34.286,36.275,29.424,28.571,37.216,29.74,34.286,37.216,29.74,37.143,37.216,29.74,34.286,37.688,29.861,37.143,37.688,29.861,37.143,36.275,29.424,34.286,36.744,29.594,37.143,36.744,29.594,34.286,34.458,28.497,28.571,35.35,29.01,34.286,35.35,29.01,37.143,35.35,29.01,34.286,35.809,29.229,37.143,35.809,29.229,37.143,34.458,28.497,34.286,34.899,28.766,37.143,34.899,28.766,34.286,32.828,27.198,28.571,33.612,27.891,34.286,33.612,27.891,37.143,33.612,27.891,34.286,34.028,28.206,37.143,34.028,28.206,37.143,32.828,27.198,34.286,33.211,27.555,37.143,33.211,27.555,34.286,31.494,25.594,28.571,32.118,26.428,34.286,32.118,26.428,37.143,32.118,26.428,34.286,32.463,26.822,37.143,32.463,26.822,37.143,31.494,25.594,34.286,31.795,26.018,37.143,31.795,26.018,34.286,30.519,23.769,28.571,30.956,24.699,34.286,30.956,24.699,37.143,30.956,24.699,34.286,31.213,25.152,37.143,31.213,25.152,37.143,30.519,23.769,34.286,30.725,24.238,37.143,30.725,24.238,34.286,29.939,21.833,28.571,30.177,22.803,34.286,30.177,22.803,37.143,30.177,22.803,34.286,30.335,23.288,37.143,30.335,23.288,37.143,29.939,21.833,34.286,30.045,22.318,37.143,30.045,22.318,28.571,29.796,20.842,34.286,29.796,20.842,37.143,29.796,20.842,34.286,29.855,21.335,37.143,29.855,21.335,34.286,29.761,20.354,37.143,29.761,20.354,-40,-10.25,19.875,-28.571,-10.25,19.875,-17.143,-10.25,19.875,-5.714,-10.25,19.875,5.714,-10.25,19.875,17.143,-10.25,19.875,28.571,-10.25,19.875,40,-10.25,19.875,-28.571,-10.061,21.833,-17.143,-10.061,21.833,-5.714,-10.061,21.833,5.714,-10.061,21.833,17.143,-10.061,21.833,28.571,-10.061,21.833,-28.571,-9.481,23.769,-17.143,-9.481,23.769,-5.714,-9.481,23.769,5.714,-9.481,23.769,17.143,-9.481,23.769,28.571,-9.481,23.769,-28.571,-8.506,25.594,-17.143,-8.506,25.594,-5.714,-8.506,25.594,5.714,-8.506,25.594,17.143,-8.506,25.594,28.571,-8.506,25.594,-28.571,-7.172,27.198,-17.143,-7.172,27.198,-5.714,-7.172,27.198,5.714,-7.172,27.198,17.143,-7.172,27.198,28.571,-7.172,27.198,-28.571,-5.542,28.497,-17.143,-5.542,28.497,-5.714,-5.542,28.497,5.714,-5.542,28.497,17.143,-5.542,28.497,28.571,-5.542,28.497,-28.571,-3.725,29.424,-17.143,-3.725,29.424,-5.714,-3.725,29.424,5.714,-3.725,29.424,17.143,-3.725,29.424,28.571,-3.725,29.424,-28.571,-1.841,29.958,-17.143,-1.841,29.958,-5.714,-1.841,29.958,5.714,-1.841,29.958,17.143,-1.841,29.958,28.571,-1.841,29.958,-40,0,30.125,-28.571,0,30.125,-17.143,0,30.125,-5.714,0,30.125,5.714,0,30.125,17.143,0,30.125,28.571,0,30.125,40,0,30.125,-28.571,1.958,29.936,-17.143,1.958,29.936,-5.714,1.958,29.936,5.714,1.958,29.936,17.143,1.958,29.936,28.571,1.958,29.936,-28.571,3.894,29.356,-17.143,3.894,29.356,-5.714,3.894,29.356,5.714,3.894,29.356,17.143,3.894,29.356,28.571,3.894,29.356,-28.571,5.719,28.381,-17.143,5.719,28.381,-5.714,5.719,28.381,5.714,5.719,28.381,17.143,5.719,28.381,28.571,5.719,28.381,-28.571,7.323,27.047,-17.143,7.323,27.047,-5.714,7.323,27.047,5.714,7.323,27.047,17.143,7.323,27.047,28.571,7.323,27.047,-28.571,8.622,25.417,-17.143,8.622,25.417,-5.714,8.622,25.417,5.714,8.622,25.417,17.143,8.622,25.417,28.571,8.622,25.417,-28.571,9.549,23.6,-17.143,9.549,23.6,-5.714,9.549,23.6,5.714,9.549,23.6,17.143,9.549,23.6,28.571,9.549,23.6,-28.571,10.083,21.716,-17.143,10.083,21.716,-5.714,10.083,21.716,5.714,10.083,21.716,17.143,10.083,21.716,28.571,10.083,21.716,-40,10.25,19.875,-28.571,10.25,19.875,-17.143,10.25,19.875,-5.714,10.25,19.875,5.714,10.25,19.875,17.143,10.25,19.875,28.571,10.25,19.875,40,10.25,19.875,-40,-10.209,20.796,-40,-10.079,21.74,-40,-9.854,22.695,-40,-9.53,23.648,-40,-9.105,24.583,-40,-8.579,25.484,-40,-7.958,26.336,-40,-7.248,27.123,-40,-6.461,27.833,-40,-5.609,28.454,-40,-4.708,28.98,-40,-3.773,29.405,-40,-2.82,29.729,-40,-1.865,29.954,-40,-.921,30.084,-40,.921,30.084,-40,1.865,29.954,-40,2.82,29.729,-40,3.773,29.405,-40,4.708,28.98,-40,5.609,28.454,-40,6.461,27.833,-40,7.248,27.123,-40,7.958,26.336,-40,8.579,25.484,-40,9.105,24.583,-40,9.53,23.648,-40,9.854,22.695,-40,10.079,21.74,-40,10.209,20.796,-34.286,-10.061,21.833,-28.571,-10.204,20.842,-34.286,-10.204,20.842,-37.143,-10.204,20.842,-34.286,-10.239,20.354,-37.143,-10.239,20.354,-37.143,-10.061,21.833,-34.286,-10.145,21.335,-37.143,-10.145,21.335,-34.286,-9.481,23.769,-28.571,-9.823,22.803,-34.286,-9.823,22.803,-37.143,-9.823,22.803,-34.286,-9.955,22.318,-37.143,-9.955,22.318,-37.143,-9.481,23.769,-34.286,-9.665,23.288,-37.143,-9.665,23.288,-34.286,-8.506,25.594,-28.571,-9.044,24.699,-34.286,-9.044,24.699,-37.143,-9.044,24.699,-34.286,-9.275,24.238,-37.143,-9.275,24.238,-37.143,-8.506,25.594,-34.286,-8.787,25.152,-37.143,-8.787,25.152,-34.286,-7.172,27.198,-28.571,-7.882,26.428,-34.286,-7.882,26.428,-37.143,-7.882,26.428,-34.286,-8.205,26.018,-37.143,-8.205,26.018,-37.143,-7.172,27.198,-34.286,-7.537,26.822,-37.143,-7.537,26.822,-34.286,-5.542,28.497,-28.571,-6.388,27.891,-34.286,-6.388,27.891,-37.143,-6.388,27.891,-34.286,-6.789,27.555,-37.143,-6.789,27.555,-37.143,-5.542,28.497,-34.286,-5.972,28.206,-37.143,-5.972,28.206,-34.286,-3.725,29.424,-28.571,-4.65,29.01,-34.286,-4.65,29.01,-37.143,-4.65,29.01,-34.286,-5.101,28.766,-37.143,-5.101,28.766,-37.143,-3.725,29.424,-34.286,-4.191,29.229,-37.143,-4.191,29.229,-34.286,-1.841,29.958,-28.571,-2.784,29.74,-34.286,-2.784,29.74,-37.143,-2.784,29.74,-34.286,-3.256,29.594,-37.143,-3.256,29.594,-37.143,-1.841,29.958,-34.286,-2.312,29.861,-37.143,-2.312,29.861,-34.286,0,30.125,-28.571,-.909,30.085,-34.286,-.909,30.085,-37.143,-.909,30.085,-34.286,-1.373,30.033,-37.143,-1.373,30.033,-34.286,1.958,29.936,-28.571,.967,30.079,-34.286,.967,30.079,-37.143,.967,30.079,-34.286,.479,30.114,-37.143,0,30.125,-37.143,.479,30.114,-37.143,1.958,29.936,-34.286,1.46,30.02,-37.143,1.46,30.02,-34.286,3.894,29.356,-28.571,2.928,29.698,-34.286,2.928,29.698,-37.143,2.928,29.698,-34.286,2.443,29.83,-37.143,2.443,29.83,-37.143,3.894,29.356,-34.286,3.413,29.54,-37.143,3.413,29.54,-34.286,5.719,28.381,-28.571,4.824,28.919,-34.286,4.824,28.919,-37.143,4.824,28.919,-34.286,4.363,29.15,-37.143,4.363,29.15,-37.143,5.719,28.381,-34.286,5.277,28.662,-37.143,5.277,28.662,-34.286,7.323,27.047,-28.571,6.553,27.757,-34.286,6.553,27.757,-37.143,6.553,27.757,-34.286,6.143,28.08,-37.143,6.143,28.08,-37.143,7.323,27.047,-34.286,6.947,27.412,-37.143,6.947,27.412,-34.286,8.622,25.417,-28.571,8.016,26.263,-34.286,8.016,26.263,-37.143,8.016,26.263,-34.286,7.68,26.664,-37.143,7.68,26.664,-37.143,8.622,25.417,-34.286,8.331,25.847,-37.143,8.331,25.847,-34.286,9.549,23.6,-28.571,9.135,24.525,-34.286,9.135,24.525,-37.143,9.135,24.525,-34.286,8.891,24.976,-37.143,8.891,24.976,-37.143,9.549,23.6,-34.286,9.354,24.066,-37.143,9.354,24.066,-34.286,10.083,21.716,-28.571,9.865,22.659,-34.286,9.865,22.659,-37.143,9.865,22.659,-34.286,9.719,23.131,-37.143,9.719,23.131,-37.143,10.083,21.716,-34.286,9.986,22.187,-37.143,9.986,22.187,-28.571,10.21,20.784,-34.286,10.21,20.784,-37.143,10.21,20.784,-34.286,10.158,21.248,-37.143,10.158,21.248,-34.286,10.24,20.326,-37.143,10.24,20.326,40,10.209,20.796,40,10.079,21.74,40,9.854,22.695,40,9.53,23.648,40,9.105,24.583,40,8.579,25.484,40,7.958,26.336,40,7.248,27.123,40,6.461,27.833,40,5.609,28.454,40,4.708,28.98,40,3.773,29.405,40,2.82,29.729,40,1.865,29.954,40,.921,30.084,40,-.921,30.084,40,-1.865,29.954,40,-2.82,29.729,40,-3.773,29.405,40,-4.708,28.98,40,-5.609,28.454,40,-6.461,27.833,40,-7.248,27.123,40,-7.958,26.336,40,-8.579,25.484,40,-9.105,24.583,40,-9.53,23.648,40,-9.854,22.695,40,-10.079,21.74,40,-10.209,20.796,34.286,10.083,21.716,28.571,10.21,20.784,34.286,10.21,20.784,37.143,10.21,20.784,34.286,10.24,20.326,37.143,10.24,20.326,37.143,10.083,21.716,34.286,10.158,21.248,37.143,10.158,21.248,34.286,9.549,23.6,28.571,9.865,22.659,34.286,9.865,22.659,37.143,9.865,22.659,34.286,9.986,22.187,37.143,9.986,22.187,37.143,9.549,23.6,34.286,9.719,23.131,37.143,9.719,23.131,34.286,8.622,25.417,28.571,9.135,24.525,34.286,9.135,24.525,37.143,9.135,24.525,34.286,9.354,24.066,37.143,9.354,24.066,37.143,8.622,25.417,34.286,8.891,24.976,37.143,8.891,24.976,34.286,7.323,27.047,28.571,8.016,26.263,34.286,8.016,26.263,37.143,8.016,26.263,34.286,8.331,25.847,37.143,8.331,25.847,37.143,7.323,27.047,34.286,7.68,26.664,37.143,7.68,26.664,34.286,5.719,28.381,28.571,6.553,27.757,34.286,6.553,27.757,37.143,6.553,27.757,34.286,6.947,27.412,37.143,6.947,27.412,37.143,5.719,28.381,34.286,6.143,28.08,37.143,6.143,28.08,34.286,3.894,29.356,28.571,4.824,28.919,34.286,4.824,28.919,37.143,4.824,28.919,34.286,5.277,28.662,37.143,5.277,28.662,37.143,3.894,29.356,34.286,4.363,29.15,37.143,4.363,29.15,34.286,1.958,29.936,28.571,2.928,29.698,34.286,2.928,29.698,37.143,2.928,29.698,34.286,3.413,29.54,37.143,3.413,29.54,37.143,1.958,29.936,34.286,2.443,29.83,37.143,2.443,29.83,34.286,0,30.125,28.571,.967,30.079,34.286,.967,30.079,37.143,.967,30.079,34.286,1.46,30.02,37.143,1.46,30.02,37.143,0,30.125,34.286,.479,30.114,37.143,.479,30.114,34.286,-1.841,29.958,28.571,-.909,30.085,34.286,-.909,30.085,37.143,-.909,30.085,37.143,-1.841,29.958,34.286,-1.373,30.033,37.143,-1.373,30.033,34.286,-3.725,29.424,28.571,-2.784,29.74,34.286,-2.784,29.74,37.143,-2.784,29.74,34.286,-2.312,29.861,37.143,-2.312,29.861,37.143,-3.725,29.424,34.286,-3.256,29.594,37.143,-3.256,29.594,34.286,-5.542,28.497,28.571,-4.65,29.01,34.286,-4.65,29.01,37.143,-4.65,29.01,34.286,-4.191,29.229,37.143,-4.191,29.229,37.143,-5.542,28.497,34.286,-5.101,28.766,37.143,-5.101,28.766,34.286,-7.172,27.198,28.571,-6.388,27.891,34.286,-6.388,27.891,37.143,-6.388,27.891,34.286,-5.972,28.206,37.143,-5.972,28.206,37.143,-7.172,27.198,34.286,-6.789,27.555,37.143,-6.789,27.555,34.286,-8.506,25.594,28.571,-7.882,26.428,34.286,-7.882,26.428,37.143,-7.882,26.428,34.286,-7.537,26.822,37.143,-7.537,26.822,37.143,-8.506,25.594,34.286,-8.205,26.018,37.143,-8.205,26.018,34.286,-9.481,23.769,28.571,-9.044,24.699,34.286,-9.044,24.699,37.143,-9.044,24.699,34.286,-8.787,25.152,37.143,-8.787,25.152,37.143,-9.481,23.769,34.286,-9.275,24.238,37.143,-9.275,24.238,34.286,-10.061,21.833,28.571,-9.823,22.803,34.286,-9.823,22.803,37.143,-9.823,22.803,34.286,-9.665,23.288,37.143,-9.665,23.288,37.143,-10.061,21.833,34.286,-9.955,22.318,37.143,-9.955,22.318,28.571,-10.204,20.842,34.286,-10.204,20.842,37.143,-10.204,20.842,34.286,-10.145,21.335,37.143,-10.145,21.335,34.286,-10.239,20.354,37.143,-10.239,20.354,-40,-50.25,19.875,-28.571,-50.25,19.875,-17.143,-50.25,19.875,-5.714,-50.25,19.875,5.714,-50.25,19.875,17.143,-50.25,19.875,28.571,-50.25,19.875,40,-50.25,19.875,-28.571,-50.061,21.833,-17.143,-50.061,21.833,-5.714,-50.061,21.833,5.714,-50.061,21.833,17.143,-50.061,21.833,28.571,-50.061,21.833,-28.571,-49.481,23.769,-17.143,-49.481,23.769,-5.714,-49.481,23.769,5.714,-49.481,23.769,17.143,-49.481,23.769,28.571,-49.481,23.769,-28.571,-48.506,25.594,-17.143,-48.506,25.594,-5.714,-48.506,25.594,5.714,-48.506,25.594,17.143,-48.506,25.594,28.571,-48.506,25.594,-28.571,-47.172,27.198,-17.143,-47.172,27.198,-5.714,-47.172,27.198,5.714,-47.172,27.198,17.143,-47.172,27.198,28.571,-47.172,27.198,-28.571,-45.542,28.497,-17.143,-45.542,28.497,-5.714,-45.542,28.497,5.714,-45.542,28.497,17.143,-45.542,28.497,28.571,-45.542,28.497,-28.571,-43.725,29.424,-17.143,-43.725,29.424,-5.714,-43.725,29.424,5.714,-43.725,29.424,17.143,-43.725,29.424,28.571,-43.725,29.424,-28.571,-41.841,29.958,-17.143,-41.841,29.958,-5.714,-41.841,29.958,5.714,-41.841,29.958,17.143,-41.841,29.958,28.571,-41.841,29.958,-40,-40,30.125,-28.571,-40,30.125,-17.143,-40,30.125,-5.714,-40,30.125,5.714,-40,30.125,17.143,-40,30.125,28.571,-40,30.125,40,-40,30.125,-28.571,-38.042,29.936,-17.143,-38.042,29.936,-5.714,-38.042,29.936,5.714,-38.042,29.936,17.143,-38.042,29.936,28.571,-38.042,29.936,-28.571,-36.106,29.356,-17.143,-36.106,29.356,-5.714,-36.106,29.356,5.714,-36.106,29.356,17.143,-36.106,29.356,28.571,-36.106,29.356,-28.571,-34.281,28.381,-17.143,-34.281,28.381,-5.714,-34.281,28.381,5.714,-34.281,28.381,17.143,-34.281,28.381,28.571,-34.281,28.381,-28.571,-32.677,27.047,-17.143,-32.677,27.047,-5.714,-32.677,27.047,5.714,-32.677,27.047,17.143,-32.677,27.047,28.571,-32.677,27.047,-28.571,-31.378,25.417,-17.143,-31.378,25.417,-5.714,-31.378,25.417,5.714,-31.378,25.417,17.143,-31.378,25.417,28.571,-31.378,25.417,-28.571,-30.451,23.6,-17.143,-30.451,23.6,-5.714,-30.451,23.6,5.714,-30.451,23.6,17.143,-30.451,23.6,28.571,-30.451,23.6,-28.571,-29.917,21.716,-17.143,-29.917,21.716,-5.714,-29.917,21.716,5.714,-29.917,21.716,17.143,-29.917,21.716,28.571,-29.917,21.716,-40,-29.75,19.875,-28.571,-29.75,19.875,-17.143,-29.75,19.875,-5.714,-29.75,19.875,5.714,-29.75,19.875,17.143,-29.75,19.875,28.571,-29.75,19.875,40,-29.75,19.875,-40,-50.209,20.796,-40,-50.079,21.74,-40,-49.854,22.695,-40,-49.53,23.648,-40,-49.105,24.583,-40,-48.579,25.484,-40,-47.958,26.336,-40,-47.248,27.123,-40,-46.461,27.833,-40,-45.609,28.454,-40,-44.708,28.98,-40,-43.773,29.405,-40,-42.82,29.729,-40,-41.865,29.954,-40,-40.921,30.084,-40,-39.079,30.084,-40,-38.135,29.954,-40,-37.18,29.729,-40,-36.227,29.405,-40,-35.292,28.98,-40,-34.391,28.454,-40,-33.539,27.833,-40,-32.752,27.123,-40,-32.042,26.336,-40,-31.421,25.484,-40,-30.895,24.583,-40,-30.47,23.648,-40,-30.146,22.695,-40,-29.921,21.74,-40,-29.791,20.796,-34.286,-50.061,21.833,-28.571,-50.204,20.842,-34.286,-50.204,20.842,-37.143,-50.204,20.842,-34.286,-50.239,20.354,-37.143,-50.239,20.354,-37.143,-50.061,21.833,-34.286,-50.145,21.335,-37.143,-50.145,21.335,-34.286,-49.481,23.769,-28.571,-49.823,22.803,-34.286,-49.823,22.803,-37.143,-49.823,22.803,-34.286,-49.955,22.318,-37.143,-49.955,22.318,-37.143,-49.481,23.769,-34.286,-49.665,23.288,-37.143,-49.665,23.288,-34.286,-48.506,25.594,-28.571,-49.044,24.699,-34.286,-49.044,24.699,-37.143,-49.044,24.699,-34.286,-49.275,24.238,-37.143,-49.275,24.238,-37.143,-48.506,25.594,-34.286,-48.787,25.152,-37.143,-48.787,25.152,-34.286,-47.172,27.198,-28.571,-47.882,26.428,-34.286,-47.882,26.428,-37.143,-47.882,26.428,-34.286,-48.205,26.018,-37.143,-48.205,26.018,-37.143,-47.172,27.198,-34.286,-47.537,26.822,-37.143,-47.537,26.822,-34.286,-45.542,28.497,-28.571,-46.388,27.891,-34.286,-46.388,27.891,-37.143,-46.388,27.891,-34.286,-46.789,27.555,-37.143,-46.789,27.555,-37.143,-45.542,28.497,-34.286,-45.972,28.206,-37.143,-45.972,28.206,-34.286,-43.725,29.424,-28.571,-44.65,29.01,-34.286,-44.65,29.01,-37.143,-44.65,29.01,-34.286,-45.101,28.766,-37.143,-45.101,28.766,-37.143,-43.725,29.424,-34.286,-44.191,29.229,-37.143,-44.191,29.229,-34.286,-41.841,29.958,-28.571,-42.784,29.74,-34.286,-42.784,29.74,-37.143,-42.784,29.74,-34.286,-43.256,29.594,-37.143,-43.256,29.594,-37.143,-41.841,29.958,-34.286,-42.312,29.861,-37.143,-42.312,29.861,-34.286,-40,30.125,-28.571,-40.909,30.085,-34.286,-40.909,30.085,-37.143,-40.909,30.085,-34.286,-41.373,30.033,-37.143,-41.373,30.033,-34.286,-38.042,29.936,-28.571,-39.033,30.079,-34.286,-39.033,30.079,-37.143,-39.033,30.079,-34.286,-39.521,30.114,-37.143,-40,30.125,-37.143,-39.521,30.114,-37.143,-38.042,29.936,-34.286,-38.54,30.02,-37.143,-38.54,30.02,-34.286,-36.106,29.356,-28.571,-37.072,29.698,-34.286,-37.072,29.698,-37.143,-37.072,29.698,-34.286,-37.557,29.83,-37.143,-37.557,29.83,-37.143,-36.106,29.356,-34.286,-36.587,29.54,-37.143,-36.587,29.54,-34.286,-34.281,28.381,-28.571,-35.176,28.919,-34.286,-35.176,28.919,-37.143,-35.176,28.919,-34.286,-35.637,29.15,-37.143,-35.637,29.15,-37.143,-34.281,28.381,-34.286,-34.723,28.662,-37.143,-34.723,28.662,-34.286,-32.677,27.047,-28.571,-33.447,27.757,-34.286,-33.447,27.757,-37.143,-33.447,27.757,-34.286,-33.857,28.08,-37.143,-33.857,28.08,-37.143,-32.677,27.047,-34.286,-33.053,27.412,-37.143,-33.053,27.412,-34.286,-31.378,25.417,-28.571,-31.984,26.263,-34.286,-31.984,26.263,-37.143,-31.984,26.263,-34.286,-32.32,26.664,-37.143,-32.32,26.664,-37.143,-31.378,25.417,-34.286,-31.669,25.847,-37.143,-31.669,25.847,-34.286,-30.451,23.6,-28.571,-30.865,24.525,-34.286,-30.865,24.525,-37.143,-30.865,24.525,-34.286,-31.109,24.976,-37.143,-31.109,24.976,-37.143,-30.451,23.6,-34.286,-30.646,24.066,-37.143,-30.646,24.066,-34.286,-29.917,21.716,-28.571,-30.135,22.659,-34.286,-30.135,22.659,-37.143,-30.135,22.659,-34.286,-30.281,23.131,-37.143,-30.281,23.131,-37.143,-29.917,21.716,-34.286,-30.014,22.187,-37.143,-30.014,22.187,-28.571,-29.79,20.784,-34.286,-29.79,20.784,-37.143,-29.79,20.784,-34.286,-29.842,21.248,-37.143,-29.842,21.248,-34.286,-29.76,20.326,-37.143,-29.76,20.326,40,-29.791,20.796,40,-29.921,21.74,40,-30.146,22.695,40,-30.47,23.648,40,-30.895,24.583,40,-31.421,25.484,40,-32.042,26.336,40,-32.752,27.123,40,-33.539,27.833,40,-34.391,28.454,40,-35.292,28.98,40,-36.227,29.405,40,-37.18,29.729,40,-38.135,29.954,40,-39.079,30.084,40,-40.921,30.084,40,-41.865,29.954,40,-42.82,29.729,40,-43.773,29.405,40,-44.708,28.98,40,-45.609,28.454,40,-46.461,27.833,40,-47.248,27.123,40,-47.958,26.336,40,-48.579,25.484,40,-49.105,24.583,40,-49.53,23.648,40,-49.854,22.695,40,-50.079,21.74,40,-50.209,20.796,34.286,-29.917,21.716,28.571,-29.79,20.784,34.286,-29.79,20.784,37.143,-29.79,20.784,34.286,-29.76,20.326,37.143,-29.76,20.326,37.143,-29.917,21.716,34.286,-29.842,21.248,37.143,-29.842,21.248,34.286,-30.451,23.6,28.571,-30.135,22.659,34.286,-30.135,22.659,37.143,-30.135,22.659,34.286,-30.014,22.187,37.143,-30.014,22.187,37.143,-30.451,23.6,34.286,-30.281,23.131,37.143,-30.281,23.131,34.286,-31.378,25.417,28.571,-30.865,24.525,34.286,-30.865,24.525,37.143,-30.865,24.525,34.286,-30.646,24.066,37.143,-30.646,24.066,37.143,-31.378,25.417,34.286,-31.109,24.976,37.143,-31.109,24.976,34.286,-32.677,27.047,28.571,-31.984,26.263,34.286,-31.984,26.263,37.143,-31.984,26.263,34.286,-31.669,25.847,37.143,-31.669,25.847,37.143,-32.677,27.047,34.286,-32.32,26.664,37.143,-32.32,26.664,34.286,-34.281,28.381,28.571,-33.447,27.757,34.286,-33.447,27.757,37.143,-33.447,27.757,34.286,-33.053,27.412,37.143,-33.053,27.412,37.143,-34.281,28.381,34.286,-33.857,28.08,37.143,-33.857,28.08,34.286,-36.106,29.356,28.571,-35.176,28.919,34.286,-35.176,28.919,37.143,-35.176,28.919,34.286,-34.723,28.662,37.143,-34.723,28.662,37.143,-36.106,29.356,34.286,-35.637,29.15,37.143,-35.637,29.15,34.286,-38.042,29.936,28.571,-37.072,29.698,34.286,-37.072,29.698,37.143,-37.072,29.698,34.286,-36.587,29.54,37.143,-36.587,29.54,37.143,-38.042,29.936,34.286,-37.557,29.83,37.143,-37.557,29.83,34.286,-40,30.125,28.571,-39.033,30.079,34.286,-39.033,30.079,37.143,-39.033,30.079,34.286,-38.54,30.02,37.143,-38.54,30.02,37.143,-40,30.125,34.286,-39.521,30.114,37.143,-39.521,30.114,34.286,-41.841,29.958,28.571,-40.909,30.085,34.286,-40.909,30.085,37.143,-40.909,30.085,37.143,-41.841,29.958,34.286,-41.373,30.033,37.143,-41.373,30.033,34.286,-43.725,29.424,28.571,-42.784,29.74,34.286,-42.784,29.74,37.143,-42.784,29.74,34.286,-42.312,29.861,37.143,-42.312,29.861,37.143,-43.725,29.424,34.286,-43.256,29.594,37.143,-43.256,29.594,34.286,-45.542,28.497,28.571,-44.65,29.01,34.286,-44.65,29.01,37.143,-44.65,29.01,34.286,-44.191,29.229,37.143,-44.191,29.229,37.143,-45.542,28.497,34.286,-45.101,28.766,37.143,-45.101,28.766,34.286,-47.172,27.198,28.571,-46.388,27.891,34.286,-46.388,27.891,37.143,-46.388,27.891,34.286,-45.972,28.206,37.143,-45.972,28.206,37.143,-47.172,27.198,34.286,-46.789,27.555,37.143,-46.789,27.555,34.286,-48.506,25.594,28.571,-47.882,26.428,34.286,-47.882,26.428,37.143,-47.882,26.428,34.286,-47.537,26.822,37.143,-47.537,26.822,37.143,-48.506,25.594,34.286,-48.205,26.018,37.143,-48.205,26.018,34.286,-49.481,23.769,28.571,-49.044,24.699,34.286,-49.044,24.699,37.143,-49.044,24.699,34.286,-48.787,25.152,37.143,-48.787,25.152,37.143,-49.481,23.769,34.286,-49.275,24.238,37.143,-49.275,24.238,34.286,-50.061,21.833,28.571,-49.823,22.803,34.286,-49.823,22.803,37.143,-49.823,22.803,34.286,-49.665,23.288,37.143,-49.665,23.288,37.143,-50.061,21.833,34.286,-49.955,22.318,37.143,-49.955,22.318,28.571,-50.204,20.842,34.286,-50.204,20.842,37.143,-50.204,20.842,34.286,-50.145,21.335,37.143,-50.145,21.335,34.286,-50.239,20.354,37.143,-50.239,20.354,-40,29.75,-20.125,-28.571,29.75,-20.125,-17.143,29.75,-20.125,-5.714,29.75,-20.125,5.714,29.75,-20.125,17.143,29.75,-20.125,28.571,29.75,-20.125,40,29.75,-20.125,-28.571,29.57,-21.988,-17.143,29.57,-21.988,-5.714,29.57,-21.988,5.714,29.57,-21.988,17.143,29.57,-21.988,28.571,29.57,-21.988,-28.571,29.019,-23.829,-17.143,29.019,-23.829,-5.714,29.019,-23.829,5.714,29.019,-23.829,17.143,29.019,-23.829,28.571,29.019,-23.829,-28.571,28.091,-25.565,-17.143,28.091,-25.565,-5.714,28.091,-25.565,5.714,28.091,-25.565,17.143,28.091,-25.565,28.571,28.091,-25.565,-28.571,26.822,-27.091,-17.143,26.822,-27.091,-5.714,26.822,-27.091,5.714,26.822,-27.091,17.143,26.822,-27.091,28.571,26.822,-27.091,-28.571,25.272,-28.327,-17.143,25.272,-28.327,-5.714,25.272,-28.327,5.714,25.272,-28.327,17.143,25.272,-28.327,28.571,25.272,-28.327,-28.571,23.544,-29.208,-17.143,23.544,-29.208,-5.714,23.544,-29.208,5.714,23.544,-29.208,17.143,23.544,-29.208,28.571,23.544,-29.208,-28.571,21.751,-29.716,-17.143,21.751,-29.716,-5.714,21.751,-29.716,5.714,21.751,-29.716,17.143,21.751,-29.716,28.571,21.751,-29.716,-40,20,-29.875,-28.571,20,-29.875,-17.143,20,-29.875,-5.714,20,-29.875,5.714,20,-29.875,17.143,20,-29.875,28.571,20,-29.875,40,20,-29.875,-28.571,18.137,-29.695,-17.143,18.137,-29.695,-5.714,18.137,-29.695,5.714,18.137,-29.695,17.143,18.137,-29.695,28.571,18.137,-29.695,-28.571,16.296,-29.144,-17.143,16.296,-29.144,-5.714,16.296,-29.144,5.714,16.296,-29.144,17.143,16.296,-29.144,28.571,16.296,-29.144,-28.571,14.56,-28.216,-17.143,14.56,-28.216,-5.714,14.56,-28.216,5.714,14.56,-28.216,17.143,14.56,-28.216,28.571,14.56,-28.216,-28.571,13.034,-26.947,-17.143,13.034,-26.947,-5.714,13.034,-26.947,5.714,13.034,-26.947,17.143,13.034,-26.947,28.571,13.034,-26.947,-28.571,11.798,-25.397,-17.143,11.798,-25.397,-5.714,11.798,-25.397,5.714,11.798,-25.397,17.143,11.798,-25.397,28.571,11.798,-25.397,-28.571,10.917,-23.669,-17.143,10.917,-23.669,-5.714,10.917,-23.669,5.714,10.917,-23.669,17.143,10.917,-23.669,28.571,10.917,-23.669,-28.571,10.409,-21.876,-17.143,10.409,-21.876,-5.714,10.409,-21.876,5.714,10.409,-21.876,17.143,10.409,-21.876,28.571,10.409,-21.876,-40,10.25,-20.125,-28.571,10.25,-20.125,-17.143,10.25,-20.125,-5.714,10.25,-20.125,5.714,10.25,-20.125,17.143,10.25,-20.125,28.571,10.25,-20.125,40,10.25,-20.125,-40,29.711,-21.001,-40,29.587,-21.899,-40,29.374,-22.808,-40,29.065,-23.714,-40,28.661,-24.603,-40,28.161,-25.46,-40,27.569,-26.27,-40,26.894,-27.019,-40,26.145,-27.694,-40,25.335,-28.286,-40,24.478,-28.786,-40,23.589,-29.19,-40,22.683,-29.499,-40,21.774,-29.712,-40,20.876,-29.836,-40,19.124,-29.836,-40,18.226,-29.712,-40,17.317,-29.499,-40,16.411,-29.19,-40,15.522,-28.786,-40,14.665,-28.286,-40,13.855,-27.694,-40,13.106,-27.019,-40,12.431,-26.27,-40,11.839,-25.46,-40,11.339,-24.603,-40,10.935,-23.714,-40,10.626,-22.808,-40,10.413,-21.899,-40,10.289,-21.001,-34.286,29.57,-21.988,-28.571,29.707,-21.045,-34.286,29.707,-21.045,-37.143,29.707,-21.045,-34.286,29.739,-20.581,-37.143,29.739,-20.581,-37.143,29.57,-21.988,-34.286,29.651,-21.514,-37.143,29.651,-21.514,-34.286,29.019,-23.829,-28.571,29.344,-22.911,-34.286,29.344,-22.911,-37.143,29.344,-22.911,-34.286,29.469,-22.449,-37.143,29.469,-22.449,-37.143,29.019,-23.829,-34.286,29.194,-23.371,-37.143,29.194,-23.371,-34.286,28.091,-25.565,-28.571,28.603,-24.714,-34.286,28.603,-24.714,-37.143,28.603,-24.714,-34.286,28.823,-24.275,-37.143,28.823,-24.275,-37.143,28.091,-25.565,-34.286,28.359,-25.145,-37.143,28.359,-25.145,-34.286,26.822,-27.091,-28.571,27.497,-26.358,-34.286,27.497,-26.358,-37.143,27.497,-26.358,-34.286,27.805,-25.969,-37.143,27.805,-25.969,-37.143,26.822,-27.091,-34.286,27.169,-26.733,-37.143,27.169,-26.733,-34.286,25.272,-28.327,-28.571,26.076,-27.75,-34.286,26.076,-27.75,-37.143,26.076,-27.75,-34.286,26.457,-27.43,-37.143,26.457,-27.43,-37.143,25.272,-28.327,-34.286,25.681,-28.049,-37.143,25.681,-28.049,-34.286,23.544,-29.208,-28.571,24.423,-28.814,-34.286,24.423,-28.814,-37.143,24.423,-28.814,-34.286,24.852,-28.582,-37.143,24.852,-28.582,-37.143,23.544,-29.208,-34.286,23.986,-29.023,-37.143,23.986,-29.023,-34.286,21.751,-29.716,-28.571,22.648,-29.508,-34.286,22.648,-29.508,-37.143,22.648,-29.508,-34.286,23.097,-29.37,-37.143,23.097,-29.37,-37.143,21.751,-29.716,-34.286,22.199,-29.624,-37.143,22.199,-29.624,-34.286,20,-29.875,-28.571,20.865,-29.837,-34.286,20.865,-29.837,-37.143,20.865,-29.837,-34.286,21.306,-29.787,-37.143,21.306,-29.787,-37.143,20,-29.875,-34.286,20.429,-29.866,-37.143,20.429,-29.866,-34.286,18.137,-29.695,-28.571,19.08,-29.832,-34.286,19.08,-29.832,-37.143,19.08,-29.832,-34.286,19.544,-29.864,-37.143,19.544,-29.864,-37.143,18.137,-29.695,-34.286,18.611,-29.776,-37.143,18.611,-29.776,-34.286,16.296,-29.144,-28.571,17.214,-29.469,-34.286,17.214,-29.469,-37.143,17.214,-29.469,-34.286,17.676,-29.594,-37.143,17.676,-29.594,-37.143,16.296,-29.144,-34.286,16.754,-29.319,-37.143,16.754,-29.319,-34.286,14.56,-28.216,-28.571,15.411,-28.728,-34.286,15.411,-28.728,-37.143,15.411,-28.728,-34.286,15.85,-28.948,-37.143,15.85,-28.948,-37.143,14.56,-28.216,-34.286,14.98,-28.484,-37.143,14.98,-28.484,-34.286,13.034,-26.947,-28.571,13.767,-27.622,-34.286,13.767,-27.622,-37.143,13.767,-27.622,-34.286,14.156,-27.93,-37.143,14.156,-27.93,-37.143,13.034,-26.947,-34.286,13.392,-27.294,-37.143,13.392,-27.294,-34.286,11.798,-25.397,-28.571,12.375,-26.201,-34.286,12.375,-26.201,-37.143,12.375,-26.201,-34.286,12.695,-26.582,-37.143,12.695,-26.582,-37.143,11.798,-25.397,-34.286,12.076,-25.806,-37.143,12.076,-25.806,-34.286,10.917,-23.669,-28.571,11.311,-24.548,-34.286,11.311,-24.548,-37.143,11.311,-24.548,-34.286,11.543,-24.977,-37.143,11.543,-24.977,-37.143,10.917,-23.669,-34.286,11.102,-24.111,-37.143,11.102,-24.111,-34.286,10.409,-21.876,-28.571,10.617,-22.773,-34.286,10.617,-22.773,-37.143,10.617,-22.773,-34.286,10.755,-23.222,-37.143,10.755,-23.222,-37.143,10.409,-21.876,-34.286,10.501,-22.324,-37.143,10.501,-22.324,-28.571,10.288,-20.99,-34.286,10.288,-20.99,-37.143,10.288,-20.99,-34.286,10.338,-21.431,-37.143,10.338,-21.431,-34.286,10.259,-20.554,-37.143,10.259,-20.554,40,10.289,-21.001,40,10.413,-21.899,40,10.626,-22.808,40,10.935,-23.714,40,11.339,-24.603,40,11.839,-25.46,40,12.431,-26.27,40,13.106,-27.019,40,13.855,-27.694,40,14.665,-28.286,40,15.522,-28.786,40,16.411,-29.19,40,17.317,-29.499,40,18.226,-29.712,40,19.124,-29.836,40,20.876,-29.836,40,21.774,-29.712,40,22.683,-29.499,40,23.589,-29.19,40,24.478,-28.786,40,25.335,-28.286,40,26.145,-27.694,40,26.894,-27.019,40,27.569,-26.27,40,28.161,-25.46,40,28.661,-24.603,40,29.065,-23.714,40,29.374,-22.808,40,29.587,-21.899,40,29.711,-21.001,34.286,10.409,-21.876,28.571,10.288,-20.99,34.286,10.288,-20.99,37.143,10.288,-20.99,34.286,10.259,-20.554,37.143,10.259,-20.554,37.143,10.409,-21.876,34.286,10.338,-21.431,37.143,10.338,-21.431,34.286,10.917,-23.669,28.571,10.617,-22.773,34.286,10.617,-22.773,37.143,10.617,-22.773,34.286,10.501,-22.324,37.143,10.501,-22.324,37.143,10.917,-23.669,34.286,10.755,-23.222,37.143,10.755,-23.222,34.286,11.798,-25.397,28.571,11.311,-24.548,34.286,11.311,-24.548,37.143,11.311,-24.548,34.286,11.102,-24.111,37.143,11.102,-24.111,37.143,11.798,-25.397,34.286,11.543,-24.977,37.143,11.543,-24.977,34.286,13.034,-26.947,28.571,12.375,-26.201,34.286,12.375,-26.201,37.143,12.375,-26.201,34.286,12.076,-25.806,37.143,12.076,-25.806,37.143,13.034,-26.947,34.286,12.695,-26.582,37.143,12.695,-26.582,34.286,14.56,-28.216,28.571,13.767,-27.622,34.286,13.767,-27.622,37.143,13.767,-27.622,34.286,13.392,-27.294,37.143,13.392,-27.294,37.143,14.56,-28.216,34.286,14.156,-27.93,37.143,14.156,-27.93,34.286,16.296,-29.144,28.571,15.411,-28.728,34.286,15.411,-28.728,37.143,15.411,-28.728,34.286,14.98,-28.484,37.143,14.98,-28.484,37.143,16.296,-29.144,34.286,15.85,-28.948,37.143,15.85,-28.948,34.286,18.137,-29.695,28.571,17.214,-29.469,34.286,17.214,-29.469,37.143,17.214,-29.469,34.286,16.754,-29.319,37.143,16.754,-29.319,37.143,18.137,-29.695,34.286,17.676,-29.594,37.143,17.676,-29.594,34.286,20,-29.875,28.571,19.08,-29.832,34.286,19.08,-29.832,37.143,19.08,-29.832,34.286,18.611,-29.776,37.143,18.611,-29.776,37.143,20,-29.875,34.286,19.544,-29.864,37.143,19.544,-29.864,34.286,21.751,-29.716,28.571,20.865,-29.837,34.286,20.865,-29.837,37.143,20.865,-29.837,34.286,20.429,-29.866,37.143,20.429,-29.866,37.143,21.751,-29.716,34.286,21.306,-29.787,37.143,21.306,-29.787,34.286,23.544,-29.208,28.571,22.648,-29.508,34.286,22.648,-29.508,37.143,22.648,-29.508,34.286,22.199,-29.624,37.143,22.199,-29.624,37.143,23.544,-29.208,34.286,23.097,-29.37,37.143,23.097,-29.37,34.286,25.272,-28.327,28.571,24.423,-28.814,34.286,24.423,-28.814,37.143,24.423,-28.814,34.286,23.986,-29.023,37.143,23.986,-29.023,37.143,25.272,-28.327,34.286,24.852,-28.582,37.143,24.852,-28.582,34.286,26.822,-27.091,28.571,26.076,-27.75,34.286,26.076,-27.75,37.143,26.076,-27.75,34.286,25.681,-28.049,37.143,25.681,-28.049,37.143,26.822,-27.091,34.286,26.457,-27.43,37.143,26.457,-27.43,34.286,28.091,-25.565,28.571,27.497,-26.358,34.286,27.497,-26.358,37.143,27.497,-26.358,34.286,27.169,-26.733,37.143,27.169,-26.733,37.143,28.091,-25.565,34.286,27.805,-25.969,37.143,27.805,-25.969,34.286,29.019,-23.829,28.571,28.603,-24.714,34.286,28.603,-24.714,37.143,28.603,-24.714,34.286,28.359,-25.145,37.143,28.359,-25.145,37.143,29.019,-23.829,34.286,28.823,-24.275,37.143,28.823,-24.275,34.286,29.57,-21.988,28.571,29.344,-22.911,34.286,29.344,-22.911,37.143,29.344,-22.911,34.286,29.194,-23.371,37.143,29.194,-23.371,37.143,29.57,-21.988,34.286,29.469,-22.449,37.143,29.469,-22.449,28.571,29.707,-21.045,34.286,29.707,-21.045,37.143,29.707,-21.045,34.286,29.651,-21.514,37.143,29.651,-21.514,34.286,29.739,-20.581,37.143,29.739,-20.581,-40,-10.25,-20.125,-28.571,-10.25,-20.125,-17.143,-10.25,-20.125,-5.714,-10.25,-20.125,5.714,-10.25,-20.125,17.143,-10.25,-20.125,28.571,-10.25,-20.125,40,-10.25,-20.125,-28.571,-10.43,-21.988,-17.143,-10.43,-21.988,-5.714,-10.43,-21.988,5.714,-10.43,-21.988,17.143,-10.43,-21.988,28.571,-10.43,-21.988,-28.571,-10.981,-23.829,-17.143,-10.981,-23.829,-5.714,-10.981,-23.829,5.714,-10.981,-23.829,17.143,-10.981,-23.829,28.571,-10.981,-23.829,-28.571,-11.909,-25.565,-17.143,-11.909,-25.565,-5.714,-11.909,-25.565,5.714,-11.909,-25.565,17.143,-11.909,-25.565,28.571,-11.909,-25.565,-28.571,-13.178,-27.091,-17.143,-13.178,-27.091,-5.714,-13.178,-27.091,5.714,-13.178,-27.091,17.143,-13.178,-27.091,28.571,-13.178,-27.091,-28.571,-14.728,-28.327,-17.143,-14.728,-28.327,-5.714,-14.728,-28.327,5.714,-14.728,-28.327,17.143,-14.728,-28.327,28.571,-14.728,-28.327,-28.571,-16.456,-29.208,-17.143,-16.456,-29.208,-5.714,-16.456,-29.208,5.714,-16.456,-29.208,17.143,-16.456,-29.208,28.571,-16.456,-29.208,-28.571,-18.249,-29.716,-17.143,-18.249,-29.716,-5.714,-18.249,-29.716,5.714,-18.249,-29.716,17.143,-18.249,-29.716,28.571,-18.249,-29.716,-40,-20,-29.875,-28.571,-20,-29.875,-17.143,-20,-29.875,-5.714,-20,-29.875,5.714,-20,-29.875,17.143,-20,-29.875,28.571,-20,-29.875,40,-20,-29.875,-28.571,-21.863,-29.695,-17.143,-21.863,-29.695,-5.714,-21.863,-29.695,5.714,-21.863,-29.695,17.143,-21.863,-29.695,28.571,-21.863,-29.695,-28.571,-23.704,-29.144,-17.143,-23.704,-29.144,-5.714,-23.704,-29.144,5.714,-23.704,-29.144,17.143,-23.704,-29.144,28.571,-23.704,-29.144,-28.571,-25.44,-28.216,-17.143,-25.44,-28.216,-5.714,-25.44,-28.216,5.714,-25.44,-28.216,17.143,-25.44,-28.216,28.571,-25.44,-28.216,-28.571,-26.966,-26.947,-17.143,-26.966,-26.947,-5.714,-26.966,-26.947,5.714,-26.966,-26.947,17.143,-26.966,-26.947,28.571,-26.966,-26.947,-28.571,-28.202,-25.397,-17.143,-28.202,-25.397,-5.714,-28.202,-25.397,5.714,-28.202,-25.397,17.143,-28.202,-25.397,28.571,-28.202,-25.397,-28.571,-29.083,-23.669,-17.143,-29.083,-23.669,-5.714,-29.083,-23.669,5.714,-29.083,-23.669,17.143,-29.083,-23.669,28.571,-29.083,-23.669,-28.571,-29.591,-21.876,-17.143,-29.591,-21.876,-5.714,-29.591,-21.876,5.714,-29.591,-21.876,17.143,-29.591,-21.876,28.571,-29.591,-21.876,-40,-29.75,-20.125,-28.571,-29.75,-20.125,-17.143,-29.75,-20.125,-5.714,-29.75,-20.125,5.714,-29.75,-20.125,17.143,-29.75,-20.125,28.571,-29.75,-20.125,40,-29.75,-20.125,-40,-10.289,-21.001,-40,-10.413,-21.899,-40,-10.626,-22.808,-40,-10.935,-23.714,-40,-11.339,-24.603,-40,-11.839,-25.46,-40,-12.431,-26.27,-40,-13.106,-27.019,-40,-13.855,-27.694,-40,-14.665,-28.286,-40,-15.522,-28.786,-40,-16.411,-29.19,-40,-17.317,-29.499,-40,-18.226,-29.712,-40,-19.124,-29.836,-40,-20.876,-29.836,-40,-21.774,-29.712,-40,-22.683,-29.499,-40,-23.589,-29.19,-40,-24.478,-28.786,-40,-25.335,-28.286,-40,-26.145,-27.694,-40,-26.894,-27.019,-40,-27.569,-26.27,-40,-28.161,-25.46,-40,-28.661,-24.603,-40,-29.065,-23.714,-40,-29.374,-22.808,-40,-29.587,-21.899,-40,-29.711,-21.001,-34.286,-10.43,-21.988,-28.571,-10.293,-21.045,-34.286,-10.293,-21.045,-37.143,-10.293,-21.045,-34.286,-10.261,-20.581,-37.143,-10.261,-20.581,-37.143,-10.43,-21.988,-34.286,-10.349,-21.514,-37.143,-10.349,-21.514,-34.286,-10.981,-23.829,-28.571,-10.656,-22.911,-34.286,-10.656,-22.911,-37.143,-10.656,-22.911,-34.286,-10.531,-22.449,-37.143,-10.531,-22.449,-37.143,-10.981,-23.829,-34.286,-10.806,-23.371,-37.143,-10.806,-23.371,-34.286,-11.909,-25.565,-28.571,-11.397,-24.714,-34.286,-11.397,-24.714,-37.143,-11.397,-24.714,-34.286,-11.177,-24.275,-37.143,-11.177,-24.275,-37.143,-11.909,-25.565,-34.286,-11.641,-25.145,-37.143,-11.641,-25.145,-34.286,-13.178,-27.091,-28.571,-12.503,-26.358,-34.286,-12.503,-26.358,-37.143,-12.503,-26.358,-34.286,-12.195,-25.969,-37.143,-12.195,-25.969,-37.143,-13.178,-27.091,-34.286,-12.831,-26.733,-37.143,-12.831,-26.733,-34.286,-14.728,-28.327,-28.571,-13.924,-27.75,-34.286,-13.924,-27.75,-37.143,-13.924,-27.75,-34.286,-13.543,-27.43,-37.143,-13.543,-27.43,-37.143,-14.728,-28.327,-34.286,-14.319,-28.049,-37.143,-14.319,-28.049,-34.286,-16.456,-29.208,-28.571,-15.577,-28.814,-34.286,-15.577,-28.814,-37.143,-15.577,-28.814,-34.286,-15.148,-28.582,-37.143,-15.148,-28.582,-37.143,-16.456,-29.208,-34.286,-16.014,-29.023,-37.143,-16.014,-29.023,-34.286,-18.249,-29.716,-28.571,-17.352,-29.508,-34.286,-17.352,-29.508,-37.143,-17.352,-29.508,-34.286,-16.903,-29.37,-37.143,-16.903,-29.37,-37.143,-18.249,-29.716,-34.286,-17.801,-29.624,-37.143,-17.801,-29.624,-34.286,-20,-29.875,-28.571,-19.135,-29.837,-34.286,-19.135,-29.837,-37.143,-19.135,-29.837,-34.286,-18.694,-29.787,-37.143,-18.694,-29.787,-37.143,-20,-29.875,-34.286,-19.571,-29.866,-37.143,-19.571,-29.866,-34.286,-21.863,-29.695,-28.571,-20.92,-29.832,-34.286,-20.92,-29.832,-37.143,-20.92,-29.832,-34.286,-20.456,-29.864,-37.143,-20.456,-29.864,-37.143,-21.863,-29.695,-34.286,-21.389,-29.776,-37.143,-21.389,-29.776,-34.286,-23.704,-29.144,-28.571,-22.786,-29.469,-34.286,-22.786,-29.469,-37.143,-22.786,-29.469,-34.286,-22.324,-29.594,-37.143,-22.324,-29.594,-37.143,-23.704,-29.144,-34.286,-23.246,-29.319,-37.143,-23.246,-29.319,-34.286,-25.44,-28.216,-28.571,-24.589,-28.728,-34.286,-24.589,-28.728,-37.143,-24.589,-28.728,-34.286,-24.15,-28.948,-37.143,-24.15,-28.948,-37.143,-25.44,-28.216,-34.286,-25.02,-28.484,-37.143,-25.02,-28.484,-34.286,-26.966,-26.947,-28.571,-26.233,-27.622,-34.286,-26.233,-27.622,-37.143,-26.233,-27.622,-34.286,-25.844,-27.93,-37.143,-25.844,-27.93,-37.143,-26.966,-26.947,-34.286,-26.608,-27.294,-37.143,-26.608,-27.294,-34.286,-28.202,-25.397,-28.571,-27.625,-26.201,-34.286,-27.625,-26.201,-37.143,-27.625,-26.201,-34.286,-27.305,-26.582,-37.143,-27.305,-26.582,-37.143,-28.202,-25.397,-34.286,-27.924,-25.806,-37.143,-27.924,-25.806,-34.286,-29.083,-23.669,-28.571,-28.689,-24.548,-34.286,-28.689,-24.548,-37.143,-28.689,-24.548,-34.286,-28.457,-24.977,-37.143,-28.457,-24.977,-37.143,-29.083,-23.669,-34.286,-28.898,-24.111,-37.143,-28.898,-24.111,-34.286,-29.591,-21.876,-28.571,-29.383,-22.773,-34.286,-29.383,-22.773,-37.143,-29.383,-22.773,-34.286,-29.245,-23.222,-37.143,-29.245,-23.222,-37.143,-29.591,-21.876,-34.286,-29.499,-22.324,-37.143,-29.499,-22.324,-28.571,-29.712,-20.99,-34.286,-29.712,-20.99,-37.143,-29.712,-20.99,-34.286,-29.662,-21.431,-37.143,-29.662,-21.431,-34.286,-29.741,-20.554,-37.143,-29.741,-20.554,40,-29.711,-21.001,40,-29.587,-21.899,40,-29.374,-22.808,40,-29.065,-23.714,40,-28.661,-24.603,40,-28.161,-25.46,40,-27.569,-26.27,40,-26.894,-27.019,40,-26.145,-27.694,40,-25.335,-28.286,40,-24.478,-28.786,40,-23.589,-29.19,40,-22.683,-29.499,40,-21.774,-29.712,40,-20.876,-29.836,40,-19.124,-29.836,40,-18.226,-29.712,40,-17.317,-29.499,40,-16.411,-29.19,40,-15.522,-28.786,40,-14.665,-28.286,40,-13.855,-27.694,40,-13.106,-27.019,40,-12.431,-26.27,40,-11.839,-25.46,40,-11.339,-24.603,40,-10.935,-23.714,40,-10.626,-22.808,40,-10.413,-21.899,40,-10.289,-21.001,34.286,-29.591,-21.876,28.571,-29.712,-20.99,34.286,-29.712,-20.99,37.143,-29.712,-20.99,34.286,-29.741,-20.554,37.143,-29.741,-20.554,37.143,-29.591,-21.876,34.286,-29.662,-21.431,37.143,-29.662,-21.431,34.286,-29.083,-23.669,28.571,-29.383,-22.773,34.286,-29.383,-22.773,37.143,-29.383,-22.773,34.286,-29.499,-22.324,37.143,-29.499,-22.324,37.143,-29.083,-23.669,34.286,-29.245,-23.222,37.143,-29.245,-23.222,34.286,-28.202,-25.397,28.571,-28.689,-24.548,34.286,-28.689,-24.548,37.143,-28.689,-24.548,34.286,-28.898,-24.111,37.143,-28.898,-24.111,37.143,-28.202,-25.397,34.286,-28.457,-24.977,37.143,-28.457,-24.977,34.286,-26.966,-26.947,28.571,-27.625,-26.201,34.286,-27.625,-26.201,37.143,-27.625,-26.201,34.286,-27.924,-25.806,37.143,-27.924,-25.806,37.143,-26.966,-26.947,34.286,-27.305,-26.582,37.143,-27.305,-26.582,34.286,-25.44,-28.216,28.571,-26.233,-27.622,34.286,-26.233,-27.622,37.143,-26.233,-27.622,34.286,-26.608,-27.294,37.143,-26.608,-27.294,37.143,-25.44,-28.216,34.286,-25.844,-27.93,37.143,-25.844,-27.93,34.286,-23.704,-29.144,28.571,-24.589,-28.728,34.286,-24.589,-28.728,37.143,-24.589,-28.728,34.286,-25.02,-28.484,37.143,-25.02,-28.484,37.143,-23.704,-29.144,34.286,-24.15,-28.948,37.143,-24.15,-28.948,34.286,-21.863,-29.695,28.571,-22.786,-29.469,34.286,-22.786,-29.469,37.143,-22.786,-29.469,34.286,-23.246,-29.319,37.143,-23.246,-29.319,37.143,-21.863,-29.695,34.286,-22.324,-29.594,37.143,-22.324,-29.594,34.286,-20,-29.875,28.571,-20.92,-29.832,34.286,-20.92,-29.832,37.143,-20.92,-29.832,34.286,-21.389,-29.776,37.143,-21.389,-29.776,37.143,-20,-29.875,34.286,-20.456,-29.864,37.143,-20.456,-29.864,34.286,-18.249,-29.716,28.571,-19.135,-29.837,34.286,-19.135,-29.837,37.143,-19.135,-29.837,34.286,-19.571,-29.866,37.143,-19.571,-29.866,37.143,-18.249,-29.716,34.286,-18.694,-29.787,37.143,-18.694,-29.787,34.286,-16.456,-29.208,28.571,-17.352,-29.508,34.286,-17.352,-29.508,37.143,-17.352,-29.508,34.286,-17.801,-29.624,37.143,-17.801,-29.624,37.143,-16.456,-29.208,34.286,-16.903,-29.37,37.143,-16.903,-29.37,34.286,-14.728,-28.327,28.571,-15.577,-28.814,34.286,-15.577,-28.814,37.143,-15.577,-28.814,34.286,-16.014,-29.023,37.143,-16.014,-29.023,37.143,-14.728,-28.327,34.286,-15.148,-28.582,37.143,-15.148,-28.582,34.286,-13.178,-27.091,28.571,-13.924,-27.75,34.286,-13.924,-27.75,37.143,-13.924,-27.75,34.286,-14.319,-28.049,37.143,-14.319,-28.049,37.143,-13.178,-27.091,34.286,-13.543,-27.43,37.143,-13.543,-27.43,34.286,-11.909,-25.565,28.571,-12.503,-26.358,34.286,-12.503,-26.358,37.143,-12.503,-26.358,34.286,-12.831,-26.733,37.143,-12.831,-26.733,37.143,-11.909,-25.565,34.286,-12.195,-25.969,37.143,-12.195,-25.969,34.286,-10.981,-23.829,28.571,-11.397,-24.714,34.286,-11.397,-24.714,37.143,-11.397,-24.714,34.286,-11.641,-25.145,37.143,-11.641,-25.145,37.143,-10.981,-23.829,34.286,-11.177,-24.275,37.143,-11.177,-24.275,34.286,-10.43,-21.988,28.571,-10.656,-22.911,34.286,-10.656,-22.911,37.143,-10.656,-22.911,34.286,-10.806,-23.371,37.143,-10.806,-23.371,37.143,-10.43,-21.988,34.286,-10.531,-22.449,37.143,-10.531,-22.449,28.571,-10.293,-21.045,34.286,-10.293,-21.045,37.143,-10.293,-21.045,34.286,-10.349,-21.514,37.143,-10.349,-21.514,34.286,-10.261,-20.581,37.143,-10.261,-20.581,40,50,-20.125,40,50.25,-20.125,35.556,50,-20.125,31.111,50,-20.125,31.111,50.25,-20.125,8.889,50,-20.125,8.889,50.25,-20.125,4.444,50,-20.125,4.444,50.25,-20.125,0,50,-20.125,0,50.25,-20.125,-4.444,50,-20.125,-4.444,50.25,-20.125,-31.111,50,-20.125,-35.556,50,-20.125,-40,50,-20.125,-40,50.25,-20.125,38.889,50,-20.125,37.778,50,-20.125,36.667,50,-20.125,34.444,50,-20.125,33.333,50,-20.125,32.222,50,-20.125,30,50,-20.125,28.889,50,-20.125,27.778,50,-20.125,26.667,50,-20.125,25.556,50,-20.125,24.444,50,-20.125,23.333,50,-20.125,22.222,50,-20.125,21.111,50,-20.125,20,50,-20.125,18.889,50,-20.125,17.778,50,-20.125,16.667,50,-20.125,15.556,50,-20.125,14.444,50,-20.125,13.333,50,-20.125,12.222,50,-20.125,11.111,50,-20.125,10,50,-20.125,7.778,50,-20.125,6.667,50,-20.125,5.556,50,-20.125,3.333,50,-20.125,2.222,50,-20.125,1.111,50,-20.125,-1.111,50,-20.125,-2.222,50,-20.125,-3.333,50,-20.125,-5.556,50,-20.125,-6.667,50,-20.125,-7.778,50,-20.125,-8.889,50,-20.125,-10,50,-20.125,-11.111,50,-20.125,-12.222,50,-20.125,-13.333,50,-20.125,-14.444,50,-20.125,-15.556,50,-20.125,-16.667,50,-20.125,-17.778,50,-20.125,-18.889,50,-20.125,-20,50,-20.125,-21.111,50,-20.125,-22.222,50,-20.125,-23.333,50,-20.125,-24.444,50,-20.125,-25.556,50,-20.125,-26.667,50,-20.125,-27.778,50,-20.125,-28.889,50,-20.125,-30,50,-20.125,-32.222,50,-20.125,-33.333,50,-20.125,-34.444,50,-20.125,-36.667,50,-20.125,-37.778,50,-20.125,-38.889,50,-20.125,-38.889,50.25,-20.125,-37.778,50.25,-20.125,-36.667,50.25,-20.125,-35.556,50.25,-20.125,-34.444,50.25,-20.125,-33.333,50.25,-20.125,-32.222,50.25,-20.125,-31.111,50.25,-20.125,-30,50.25,-20.125,-28.889,50.25,-20.125,-27.778,50.25,-20.125,-26.667,50.25,-20.125,-25.556,50.25,-20.125,-24.444,50.25,-20.125,-23.333,50.25,-20.125,-22.222,50.25,-20.125,-21.111,50.25,-20.125,-20,50.25,-20.125,-18.889,50.25,-20.125,-17.778,50.25,-20.125,-16.667,50.25,-20.125,-15.556,50.25,-20.125,-14.444,50.25,-20.125,-13.333,50.25,-20.125,-12.222,50.25,-20.125,-11.111,50.25,-20.125,-10,50.25,-20.125,-8.889,50.25,-20.125,-7.778,50.25,-20.125,-6.667,50.25,-20.125,-5.556,50.25,-20.125,-3.333,50.25,-20.125,-2.222,50.25,-20.125,-1.111,50.25,-20.125,1.111,50.25,-20.125,2.222,50.25,-20.125,3.333,50.25,-20.125,5.556,50.25,-20.125,6.667,50.25,-20.125,7.778,50.25,-20.125,10,50.25,-20.125,11.111,50.25,-20.125,12.222,50.25,-20.125,13.333,50.25,-20.125,14.444,50.25,-20.125,15.556,50.25,-20.125,16.667,50.25,-20.125,17.778,50.25,-20.125,18.889,50.25,-20.125,20,50.25,-20.125,21.111,50.25,-20.125,22.222,50.25,-20.125,23.333,50.25,-20.125,24.444,50.25,-20.125,25.556,50.25,-20.125,26.667,50.25,-20.125,27.778,50.25,-20.125,28.889,50.25,-20.125,30,50.25,-20.125,32.222,50.25,-20.125,33.333,50.25,-20.125,34.444,50.25,-20.125,35.556,50.25,-20.125,36.667,50.25,-20.125,37.778,50.25,-20.125,38.889,50.25,-20.125,-40,50,-20.125,-40,50.25,-20.125,-40,50.25,-11.236,-40,50,-6.792,-40,50.25,-2.347,-40,50,2.097,-40,50.25,2.097,-40,50,6.542,-40,50.25,6.542,-40,50,10.986,-40,50.25,10.986,-40,50,15.431,-40,50.25,15.431,-40,50,19.875,-40,50.25,19.875,-40,50,-19.014,-40,50,-17.903,-40,50,-16.792,-40,50,-15.681,-40,50,-14.569,-40,50,-13.458,-40,50,-12.347,-40,50,-11.236,-40,50,-10.125,-40,50,-9.014,-40,50,-7.903,-40,50,-5.681,-40,50,-4.569,-40,50,-3.458,-40,50,-2.347,-40,50,-1.236,-40,50,-.125,-40,50,.986,-40,50,3.208,-40,50,4.319,-40,50,5.431,-40,50,7.653,-40,50,8.764,-40,50,9.875,-40,50,12.097,-40,50,13.208,-40,50,14.319,-40,50,16.542,-40,50,17.653,-40,50,18.764,-40,50.25,18.764,-40,50.25,17.653,-40,50.25,16.542,-40,50.25,14.319,-40,50.25,13.208,-40,50.25,12.097,-40,50.25,9.875,-40,50.25,8.764,-40,50.25,7.653,-40,50.25,5.431,-40,50.25,4.319,-40,50.25,3.208,-40,50.25,.986,-40,50.25,-.125,-40,50.25,-1.236,-40,50.25,-3.458,-40,50.25,-4.569,-40,50.25,-5.681,-40,50.25,-6.792,-40,50.25,-7.903,-40,50.25,-9.014,-40,50.25,-10.125,-40,50.25,-12.347,-40,50.25,-13.458,-40,50.25,-14.569,-40,50.25,-15.681,-40,50.25,-16.792,-40,50.25,-17.903,-40,50.25,-19.014,-40,30,19.875,-40,29.75,19.875,-40,40,29.875,-40,40,30.125,-40,50,19.875,-40,50.25,19.875,-40,30.04,20.774,-40,30.167,21.695,-40,30.386,22.627,-40,30.702,23.556,-40,31.117,24.468,-40,31.63,25.347,-40,32.236,26.178,-40,32.929,26.946,-40,33.697,27.639,-40,34.528,28.245,-40,35.407,28.758,-40,36.319,29.173,-40,37.248,29.489,-40,38.18,29.708,-40,39.101,29.835,-40,40.899,29.835,-40,41.82,29.708,-40,42.752,29.489,-40,43.681,29.173,-40,44.593,28.758,-40,45.472,28.245,-40,46.303,27.639,-40,47.071,26.946,-40,47.764,26.178,-40,48.37,25.347,-40,48.883,24.468,-40,49.298,23.556,-40,49.614,22.627,-40,49.833,21.695,-40,49.96,20.774,-40,50.209,20.796,-40,50.079,21.74,-40,49.854,22.695,-40,49.53,23.648,-40,49.105,24.583,-40,48.579,25.484,-40,47.958,26.336,-40,47.248,27.123,-40,46.461,27.833,-40,45.609,28.454,-40,44.708,28.98,-40,43.773,29.405,-40,42.82,29.729,-40,41.865,29.954,-40,40.921,30.084,-40,39.079,30.084,-40,38.135,29.954,-40,37.18,29.729,-40,36.227,29.405,-40,35.292,28.98,-40,34.391,28.454,-40,33.539,27.833,-40,32.752,27.123,-40,32.042,26.336,-40,31.421,25.484,-40,30.895,24.583,-40,30.47,23.648,-40,30.146,22.695,-40,29.921,21.74,-40,29.791,20.796,-40,30,-20.125,-40,29.75,-20.125,-40,29.75,-11.236,-40,30,-6.792,-40,29.75,-2.347,-40,30,2.097,-40,29.75,2.097,-40,30,6.542,-40,29.75,6.542,-40,30,10.986,-40,29.75,10.986,-40,30,15.431,-40,29.75,15.431,-40,30,19.875,-40,29.75,19.875,-40,30,-19.014,-40,30,-17.903,-40,30,-16.792,-40,30,-15.681,-40,30,-14.569,-40,30,-13.458,-40,30,-12.347,-40,30,-11.236,-40,30,-10.125,-40,30,-9.014,-40,30,-7.903,-40,30,-5.681,-40,30,-4.569,-40,30,-3.458,-40,30,-2.347,-40,30,-1.236,-40,30,-.125,-40,30,.986,-40,30,3.208,-40,30,4.319,-40,30,5.431,-40,30,7.653,-40,30,8.764,-40,30,9.875,-40,30,12.097,-40,30,13.208,-40,30,14.319,-40,30,16.542,-40,30,17.653,-40,30,18.764,-40,29.75,18.764,-40,29.75,17.653,-40,29.75,16.542,-40,29.75,14.319,-40,29.75,13.208,-40,29.75,12.097,-40,29.75,9.875,-40,29.75,8.764,-40,29.75,7.653,-40,29.75,5.431,-40,29.75,4.319,-40,29.75,3.208,-40,29.75,.986,-40,29.75,-.125,-40,29.75,-1.236,-40,29.75,-3.458,-40,29.75,-4.569,-40,29.75,-5.681,-40,29.75,-6.792,-40,29.75,-7.903,-40,29.75,-9.014,-40,29.75,-10.125,-40,29.75,-12.347,-40,29.75,-13.458,-40,29.75,-14.569,-40,29.75,-15.681,-40,29.75,-16.792,-40,29.75,-17.903,-40,29.75,-19.014,-40,30,-20.125,-40,29.75,-20.125,-40,10,-20.125,-40,10.25,-20.125,-40,29.96,-21.024,-40,29.833,-21.945,-40,29.614,-22.877,-40,29.298,-23.806,-40,28.883,-24.718,-40,28.37,-25.597,-40,27.764,-26.428,-40,27.071,-27.196,-40,26.303,-27.889,-40,25.472,-28.495,-40,24.593,-29.008,-40,23.681,-29.423,-40,22.752,-29.739,-40,21.82,-29.958,-40,20.899,-30.085,-40,20,-30.125,-40,19.101,-30.085,-40,18.18,-29.958,-40,17.248,-29.739,-40,16.319,-29.423,-40,15.407,-29.008,-40,14.528,-28.495,-40,13.697,-27.889,-40,12.929,-27.196,-40,12.236,-26.428,-40,11.63,-25.597,-40,11.117,-24.718,-40,10.702,-23.806,-40,10.386,-22.877,-40,10.167,-21.945,-40,10.04,-21.024,-40,10.289,-21.001,-40,10.413,-21.899,-40,10.626,-22.808,-40,10.935,-23.714,-40,11.339,-24.603,-40,11.839,-25.46,-40,12.431,-26.27,-40,13.106,-27.019,-40,13.855,-27.694,-40,14.665,-28.286,-40,15.522,-28.786,-40,16.411,-29.19,-40,17.317,-29.499,-40,18.226,-29.712,-40,19.124,-29.836,-40,20,-29.875,-40,20.876,-29.836,-40,21.774,-29.712,-40,22.683,-29.499,-40,23.589,-29.19,-40,24.478,-28.786,-40,25.335,-28.286,-40,26.145,-27.694,-40,26.894,-27.019,-40,27.569,-26.27,-40,28.161,-25.46,-40,28.661,-24.603,-40,29.065,-23.714,-40,29.374,-22.808,-40,29.587,-21.899,-40,29.711,-21.001,-40,10,-20.125,-40,10.25,-20.125,-40,10,-11.236,-40,10.25,-11.236,-40,10,-6.792,-40,10.25,-2.347,-40,10,2.097,-40,10.25,2.097,-40,10,6.542,-40,10.25,6.542,-40,10,10.986,-40,10.25,10.986,-40,10,15.431,-40,10.25,15.431,-40,10,19.875,-40,10.25,19.875,-40,10,-19.014,-40,10,-17.903,-40,10,-16.792,-40,10,-15.681,-40,10,-14.569,-40,10,-13.458,-40,10,-12.347,-40,10,-10.125,-40,10,-9.014,-40,10,-7.903,-40,10,-5.681,-40,10,-4.569,-40,10,-3.458,-40,10,-2.347,-40,10,-1.236,-40,10,-.125,-40,10,.986,-40,10,3.208,-40,10,4.319,-40,10,5.431,-40,10,7.653,-40,10,8.764,-40,10,9.875,-40,10,12.097,-40,10,13.208,-40,10,14.319,-40,10,16.542,-40,10,17.653,-40,10,18.764,-40,10.25,18.764,-40,10.25,17.653,-40,10.25,16.542,-40,10.25,14.319,-40,10.25,13.208,-40,10.25,12.097,-40,10.25,9.875,-40,10.25,8.764,-40,10.25,7.653,-40,10.25,5.431,-40,10.25,4.319,-40,10.25,3.208,-40,10.25,.986,-40,10.25,-.125,-40,10.25,-1.236,-40,10.25,-3.458,-40,10.25,-4.569,-40,10.25,-5.681,-40,10.25,-6.792,-40,10.25,-7.903,-40,10.25,-9.014,-40,10.25,-10.125,-40,10.25,-12.347,-40,10.25,-13.458,-40,10.25,-14.569,-40,10.25,-15.681,-40,10.25,-16.792,-40,10.25,-17.903,-40,10.25,-19.014,-40,-10,19.875,-40,-10.25,19.875,-40,0,29.875,-40,0,30.125,-40,10,19.875,-40,10.25,19.875,-40,-9.96,20.774,-40,-9.833,21.695,-40,-9.614,22.627,-40,-9.298,23.556,-40,-8.883,24.468,-40,-8.37,25.347,-40,-7.764,26.178,-40,-7.071,26.946,-40,-6.303,27.639,-40,-5.472,28.245,-40,-4.593,28.758,-40,-3.681,29.173,-40,-2.752,29.489,-40,-1.82,29.708,-40,-.899,29.835,-40,.899,29.835,-40,1.82,29.708,-40,2.752,29.489,-40,3.681,29.173,-40,4.593,28.758,-40,5.472,28.245,-40,6.303,27.639,-40,7.071,26.946,-40,7.764,26.178,-40,8.37,25.347,-40,8.883,24.468,-40,9.298,23.556,-40,9.614,22.627,-40,9.833,21.695,-40,9.96,20.774,-40,10.209,20.796,-40,10.079,21.74,-40,9.854,22.695,-40,9.53,23.648,-40,9.105,24.583,-40,8.579,25.484,-40,7.958,26.336,-40,7.248,27.123,-40,6.461,27.833,-40,5.609,28.454,-40,4.708,28.98,-40,3.773,29.405,-40,2.82,29.729,-40,1.865,29.954,-40,.921,30.084,-40,-.921,30.084,-40,-1.865,29.954,-40,-2.82,29.729,-40,-3.773,29.405,-40,-4.708,28.98,-40,-5.609,28.454,-40,-6.461,27.833,-40,-7.248,27.123,-40,-7.958,26.336,-40,-8.579,25.484,-40,-9.105,24.583,-40,-9.53,23.648,-40,-9.854,22.695,-40,-10.079,21.74,-40,-10.209,20.796,-40,-10,-20.125,-40,-10.25,-20.125,-40,-10.25,-11.236,-40,-10.25,-2.347,-40,-10,2.097,-40,-10.25,2.097,-40,-10,6.542,-40,-10.25,6.542,-40,-10,10.986,-40,-10.25,10.986,-40,-10,15.431,-40,-10.25,15.431,-40,-10,19.875,-40,-10.25,19.875,-40,-10,-19.014,-40,-10,-17.903,-40,-10,-16.792,-40,-10,-15.681,-40,-10,-14.569,-40,-10,-13.458,-40,-10,-12.347,-40,-10,-11.236,-40,-10,-10.125,-40,-10,-9.014,-40,-10,-7.903,-40,-10,-6.792,-40,-10,-5.681,-40,-10,-4.569,-40,-10,-3.458,-40,-10,-2.347,-40,-10,-1.236,-40,-10,-.125,-40,-10,.986,-40,-10,3.208,-40,-10,4.319,-40,-10,5.431,-40,-10,7.653,-40,-10,8.764,-40,-10,9.875,-40,-10,12.097,-40,-10,13.208,-40,-10,14.319,-40,-10,16.542,-40,-10,17.653,-40,-10,18.764,-40,-10.25,18.764,-40,-10.25,17.653,-40,-10.25,16.542,-40,-10.25,14.319,-40,-10.25,13.208,-40,-10.25,12.097,-40,-10.25,9.875,-40,-10.25,8.764,-40,-10.25,7.653,-40,-10.25,5.431,-40,-10.25,4.319,-40,-10.25,3.208,-40,-10.25,.986,-40,-10.25,-.125,-40,-10.25,-1.236,-40,-10.25,-3.458,-40,-10.25,-4.569,-40,-10.25,-5.681,-40,-10.25,-6.792,-40,-10.25,-7.903,-40,-10.25,-9.014,-40,-10.25,-10.125,-40,-10.25,-12.347,-40,-10.25,-13.458,-40,-10.25,-14.569,-40,-10.25,-15.681,-40,-10.25,-16.792,-40,-10.25,-17.903,-40,-10.25,-19.014,-40,-10,-20.125,-40,-10.25,-20.125,-40,-30,-20.125,-40,-29.75,-20.125,-40,-10.04,-21.024,-40,-10.167,-21.945,-40,-10.386,-22.877,-40,-10.702,-23.806,-40,-11.117,-24.718,-40,-11.63,-25.597,-40,-12.236,-26.428,-40,-12.929,-27.196,-40,-13.697,-27.889,-40,-14.528,-28.495,-40,-15.407,-29.008,-40,-16.319,-29.423,-40,-17.248,-29.739,-40,-18.18,-29.958,-40,-19.101,-30.085,-40,-20,-30.125,-40,-20.899,-30.085,-40,-21.82,-29.958,-40,-22.752,-29.739,-40,-23.681,-29.423,-40,-24.593,-29.008,-40,-25.472,-28.495,-40,-26.303,-27.889,-40,-27.071,-27.196,-40,-27.764,-26.428,-40,-28.37,-25.597,-40,-28.883,-24.718,-40,-29.298,-23.806,-40,-29.614,-22.877,-40,-29.833,-21.945,-40,-29.96,-21.024,-40,-29.711,-21.001,-40,-29.587,-21.899,-40,-29.374,-22.808,-40,-29.065,-23.714,-40,-28.661,-24.603,-40,-28.161,-25.46,-40,-27.569,-26.27,-40,-26.894,-27.019,-40,-26.145,-27.694,-40,-25.335,-28.286,-40,-24.478,-28.786,-40,-23.589,-29.19,-40,-22.683,-29.499,-40,-21.774,-29.712,-40,-20.876,-29.836,-40,-20,-29.875,-40,-19.124,-29.836,-40,-18.226,-29.712,-40,-17.317,-29.499,-40,-16.411,-29.19,-40,-15.522,-28.786,-40,-14.665,-28.286,-40,-13.855,-27.694,-40,-13.106,-27.019,-40,-12.431,-26.27,-40,-11.839,-25.46,-40,-11.339,-24.603,-40,-10.935,-23.714,-40,-10.626,-22.808,-40,-10.413,-21.899,-40,-10.289,-21.001,-40,-30,-20.125,-40,-29.75,-20.125,-40,-29.75,-11.236,-40,-30,-6.792,-40,-29.75,-2.347,-40,-30,2.097,-40,-29.75,2.097,-40,-30,6.542,-40,-29.75,6.542,-40,-30,10.986,-40,-29.75,10.986,-40,-30,15.431,-40,-29.75,15.431,-40,-30,19.875,-40,-29.75,19.875,-40,-30,-19.014,-40,-30,-17.903,-40,-30,-16.792,-40,-30,-15.681,-40,-30,-14.569,-40,-30,-13.458,-40,-30,-12.347,-40,-30,-11.236,-40,-30,-10.125,-40,-30,-9.014,-40,-30,-7.903,-40,-30,-5.681,-40,-30,-4.569,-40,-30,-3.458,-40,-30,-2.347,-40,-30,-1.236,-40,-30,-.125,-40,-30,.986,-40,-30,3.208,-40,-30,4.319,-40,-30,5.431,-40,-30,7.653,-40,-30,8.764,-40,-30,9.875,-40,-30,12.097,-40,-30,13.208,-40,-30,14.319,-40,-30,16.542,-40,-30,17.653,-40,-30,18.764,-40,-29.75,18.764,-40,-29.75,17.653,-40,-29.75,16.542,-40,-29.75,14.319,-40,-29.75,13.208,-40,-29.75,12.097,-40,-29.75,9.875,-40,-29.75,8.764,-40,-29.75,7.653,-40,-29.75,5.431,-40,-29.75,4.319,-40,-29.75,3.208,-40,-29.75,.986,-40,-29.75,-.125,-40,-29.75,-1.236,-40,-29.75,-3.458,-40,-29.75,-4.569,-40,-29.75,-5.681,-40,-29.75,-6.792,-40,-29.75,-7.903,-40,-29.75,-9.014,-40,-29.75,-10.125,-40,-29.75,-12.347,-40,-29.75,-13.458,-40,-29.75,-14.569,-40,-29.75,-15.681,-40,-29.75,-16.792,-40,-29.75,-17.903,-40,-29.75,-19.014,-40,-50,19.875,-40,-50.25,19.875,-40,-40,29.875,-40,-40,30.125,-40,-30,19.875,-40,-29.75,19.875,-40,-49.96,20.774,-40,-49.833,21.695,-40,-49.614,22.627,-40,-49.298,23.556,-40,-48.883,24.468,-40,-48.37,25.347,-40,-47.764,26.178,-40,-47.071,26.946,-40,-46.303,27.639,-40,-45.472,28.245,-40,-44.593,28.758,-40,-43.681,29.173,-40,-42.752,29.489,-40,-41.82,29.708,-40,-40.899,29.835,-40,-39.101,29.835,-40,-38.18,29.708,-40,-37.248,29.489,-40,-36.319,29.173,-40,-35.407,28.758,-40,-34.528,28.245,-40,-33.697,27.639,-40,-32.929,26.946,-40,-32.236,26.178,-40,-31.63,25.347,-40,-31.117,24.468,-40,-30.702,23.556,-40,-30.386,22.627,-40,-30.167,21.695,-40,-30.04,20.774,-40,-29.791,20.796,-40,-29.921,21.74,-40,-30.146,22.695,-40,-30.47,23.648,-40,-30.895,24.583,-40,-31.421,25.484,-40,-32.042,26.336,-40,-32.752,27.123,-40,-33.539,27.833,-40,-34.391,28.454,-40,-35.292,28.98,-40,-36.227,29.405,-40,-37.18,29.729,-40,-38.135,29.954,-40,-39.079,30.084,-40,-40.921,30.084,-40,-41.865,29.954,-40,-42.82,29.729,-40,-43.773,29.405,-40,-44.708,28.98,-40,-45.609,28.454,-40,-46.461,27.833,-40,-47.248,27.123,-40,-47.958,26.336,-40,-48.579,25.484,-40,-49.105,24.583,-40,-49.53,23.648,-40,-49.854,22.695,-40,-50.079,21.74,-40,-50.209,20.796,-40,-50,-20.125,-40,-50.25,-20.125,-40,-50.25,-11.236,-40,-50,-6.792,-40,-50.25,-2.347,-40,-50,2.097,-40,-50.25,2.097,-40,-50,6.542,-40,-50.25,6.542,-40,-50,10.986,-40,-50.25,10.986,-40,-50,15.431,-40,-50.25,15.431,-40,-50,19.875,-40,-50.25,19.875,-40,-50,-19.014,-40,-50,-17.903,-40,-50,-16.792,-40,-50,-15.681,-40,-50,-14.569,-40,-50,-13.458,-40,-50,-12.347,-40,-50,-11.236,-40,-50,-10.125,-40,-50,-9.014,-40,-50,-7.903,-40,-50,-5.681,-40,-50,-4.569,-40,-50,-3.458,-40,-50,-2.347,-40,-50,-1.236,-40,-50,-.125,-40,-50,.986,-40,-50,3.208,-40,-50,4.319,-40,-50,5.431,-40,-50,7.653,-40,-50,8.764,-40,-50,9.875,-40,-50,12.097,-40,-50,13.208,-40,-50,14.319,-40,-50,16.542,-40,-50,17.653,-40,-50,18.764,-40,-50.25,18.764,-40,-50.25,17.653,-40,-50.25,16.542,-40,-50.25,14.319,-40,-50.25,13.208,-40,-50.25,12.097,-40,-50.25,9.875,-40,-50.25,8.764,-40,-50.25,7.653,-40,-50.25,5.431,-40,-50.25,4.319,-40,-50.25,3.208,-40,-50.25,.986,-40,-50.25,-.125,-40,-50.25,-1.236,-40,-50.25,-3.458,-40,-50.25,-4.569,-40,-50.25,-5.681,-40,-50.25,-6.792,-40,-50.25,-7.903,-40,-50.25,-9.014,-40,-50.25,-10.125,-40,-50.25,-12.347,-40,-50.25,-13.458,-40,-50.25,-14.569,-40,-50.25,-15.681,-40,-50.25,-16.792,-40,-50.25,-17.903,-40,-50.25,-19.014,40,-50,-20.125,40,-50.25,-20.125,35.556,-50,-20.125,31.111,-50,-20.125,31.111,-50.25,-20.125,8.889,-50,-20.125,8.889,-50.25,-20.125,4.444,-50,-20.125,4.444,-50.25,-20.125,0,-50,-20.125,0,-50.25,-20.125,-4.444,-50,-20.125,-4.444,-50.25,-20.125,-17.778,-50,-20.125,-17.778,-50.25,-20.125,-31.111,-50,-20.125,-35.556,-50,-20.125,-40,-50,-20.125,-40,-50.25,-20.125,38.889,-50,-20.125,37.778,-50,-20.125,36.667,-50,-20.125,34.444,-50,-20.125,33.333,-50,-20.125,32.222,-50,-20.125,30,-50,-20.125,28.889,-50,-20.125,27.778,-50,-20.125,26.667,-50,-20.125,25.556,-50,-20.125,24.444,-50,-20.125,23.333,-50,-20.125,22.222,-50,-20.125,21.111,-50,-20.125,20,-50,-20.125,18.889,-50,-20.125,17.778,-50,-20.125,16.667,-50,-20.125,15.556,-50,-20.125,14.444,-50,-20.125,13.333,-50,-20.125,12.222,-50,-20.125,11.111,-50,-20.125,10,-50,-20.125,7.778,-50,-20.125,6.667,-50,-20.125,5.556,-50,-20.125,3.333,-50,-20.125,2.222,-50,-20.125,1.111,-50,-20.125,-1.111,-50,-20.125,-2.222,-50,-20.125,-3.333,-50,-20.125,-5.556,-50,-20.125,-6.667,-50,-20.125,-7.778,-50,-20.125,-8.889,-50,-20.125,-10,-50,-20.125,-11.111,-50,-20.125,-12.222,-50,-20.125,-13.333,-50,-20.125,-14.444,-50,-20.125,-15.556,-50,-20.125,-16.667,-50,-20.125,-18.889,-50,-20.125,-20,-50,-20.125,-21.111,-50,-20.125,-22.222,-50,-20.125,-23.333,-50,-20.125,-24.444,-50,-20.125,-25.556,-50,-20.125,-26.667,-50,-20.125,-27.778,-50,-20.125,-28.889,-50,-20.125,-30,-50,-20.125,-32.222,-50,-20.125,-33.333,-50,-20.125,-34.444,-50,-20.125,-36.667,-50,-20.125,-37.778,-50,-20.125,-38.889,-50,-20.125,-38.889,-50.25,-20.125,-37.778,-50.25,-20.125,-36.667,-50.25,-20.125,-35.556,-50.25,-20.125,-34.444,-50.25,-20.125,-33.333,-50.25,-20.125,-32.222,-50.25,-20.125,-31.111,-50.25,-20.125,-30,-50.25,-20.125,-28.889,-50.25,-20.125,-27.778,-50.25,-20.125,-26.667,-50.25,-20.125,-25.556,-50.25,-20.125,-24.444,-50.25,-20.125,-23.333,-50.25,-20.125,-22.222,-50.25,-20.125,-21.111,-50.25,-20.125,-20,-50.25,-20.125,-18.889,-50.25,-20.125,-16.667,-50.25,-20.125,-15.556,-50.25,-20.125,-14.444,-50.25,-20.125,-13.333,-50.25,-20.125,-12.222,-50.25,-20.125,-11.111,-50.25,-20.125,-10,-50.25,-20.125,-8.889,-50.25,-20.125,-7.778,-50.25,-20.125,-6.667,-50.25,-20.125,-5.556,-50.25,-20.125,-3.333,-50.25,-20.125,-2.222,-50.25,-20.125,-1.111,-50.25,-20.125,1.111,-50.25,-20.125,2.222,-50.25,-20.125,3.333,-50.25,-20.125,5.556,-50.25,-20.125,6.667,-50.25,-20.125,7.778,-50.25,-20.125,10,-50.25,-20.125,11.111,-50.25,-20.125,12.222,-50.25,-20.125,13.333,-50.25,-20.125,14.444,-50.25,-20.125,15.556,-50.25,-20.125,16.667,-50.25,-20.125,17.778,-50.25,-20.125,18.889,-50.25,-20.125,20,-50.25,-20.125,21.111,-50.25,-20.125,22.222,-50.25,-20.125,23.333,-50.25,-20.125,24.444,-50.25,-20.125,25.556,-50.25,-20.125,26.667,-50.25,-20.125,27.778,-50.25,-20.125,28.889,-50.25,-20.125,30,-50.25,-20.125,32.222,-50.25,-20.125,33.333,-50.25,-20.125,34.444,-50.25,-20.125,35.556,-50.25,-20.125,36.667,-50.25,-20.125,37.778,-50.25,-20.125,38.889,-50.25,-20.125,40,-50,19.875,40,-50.25,19.875,40,-50,15.431,40,-50.25,15.431,40,-50,2.097,40,-50.25,2.097,40,-50,-2.347,40,-50.25,-2.347,40,-50,-20.125,40,-50.25,-20.125,40,-50,18.764,40,-50,17.653,40,-50,16.542,40,-50,14.319,40,-50,13.208,40,-50,12.097,40,-50,10.986,40,-50,9.875,40,-50,8.764,40,-50,7.653,40,-50,6.542,40,-50,5.431,40,-50,4.319,40,-50,3.208,40,-50,.986,40,-50,-.125,40,-50,-1.236,40,-50,-3.458,40,-50,-4.569,40,-50,-5.681,40,-50,-6.792,40,-50,-7.903,40,-50,-9.014,40,-50,-10.125,40,-50,-11.236,40,-50,-12.347,40,-50,-13.458,40,-50,-14.569,40,-50,-15.681,40,-50,-16.792,40,-50,-17.903,40,-50,-19.014,40,-50.25,-19.014,40,-50.25,-17.903,40,-50.25,-16.792,40,-50.25,-15.681,40,-50.25,-14.569,40,-50.25,-13.458,40,-50.25,-12.347,40,-50.25,-11.236,40,-50.25,-10.125,40,-50.25,-9.014,40,-50.25,-7.903,40,-50.25,-6.792,40,-50.25,-5.681,40,-50.25,-4.569,40,-50.25,-3.458,40,-50.25,-1.236,40,-50.25,-.125,40,-50.25,.986,40,-50.25,3.208,40,-50.25,4.319,40,-50.25,5.431,40,-50.25,6.542,40,-50.25,7.653,40,-50.25,8.764,40,-50.25,9.875,40,-50.25,10.986,40,-50.25,12.097,40,-50.25,13.208,40,-50.25,14.319,40,-50.25,16.542,40,-50.25,17.653,40,-50.25,18.764,40,-30,19.875,40,-29.75,19.875,40,-40,29.875,40,-40,30.125,40,-50,19.875,40,-50.25,19.875,40,-30.04,20.774,40,-30.167,21.695,40,-30.386,22.627,40,-30.702,23.556,40,-31.117,24.468,40,-31.63,25.347,40,-32.236,26.178,40,-32.929,26.946,40,-33.697,27.639,40,-34.528,28.245,40,-35.407,28.758,40,-36.319,29.173,40,-37.248,29.489,40,-38.18,29.708,40,-39.101,29.835,40,-40.899,29.835,40,-41.82,29.708,40,-42.752,29.489,40,-43.681,29.173,40,-44.593,28.758,40,-45.472,28.245,40,-46.303,27.639,40,-47.071,26.946,40,-47.764,26.178,40,-48.37,25.347,40,-48.883,24.468,40,-49.298,23.556,40,-49.614,22.627,40,-49.833,21.695,40,-49.96,20.774,40,-50.209,20.796,40,-50.079,21.74,40,-49.854,22.695,40,-49.53,23.648,40,-49.105,24.583,40,-48.579,25.484,40,-47.958,26.336,40,-47.248,27.123,40,-46.461,27.833,40,-45.609,28.454,40,-44.708,28.98,40,-43.773,29.405,40,-42.82,29.729,40,-41.865,29.954,40,-40.921,30.084,40,-39.079,30.084,40,-38.135,29.954,40,-37.18,29.729,40,-36.227,29.405,40,-35.292,28.98,40,-34.391,28.454,40,-33.539,27.833,40,-32.752,27.123,40,-32.042,26.336,40,-31.421,25.484,40,-30.895,24.583,40,-30.47,23.648,40,-30.146,22.695,40,-29.921,21.74,40,-29.791,20.796,40,-30,19.875,40,-29.75,19.875,40,-30,15.431,40,-29.75,15.431,40,-30,2.097,40,-29.75,2.097,40,-30,-2.347,40,-29.75,-2.347,40,-30,-20.125,40,-29.75,-20.125,40,-30,18.764,40,-30,17.653,40,-30,16.542,40,-30,14.319,40,-30,13.208,40,-30,12.097,40,-30,10.986,40,-30,9.875,40,-30,8.764,40,-30,7.653,40,-30,6.542,40,-30,5.431,40,-30,4.319,40,-30,3.208,40,-30,.986,40,-30,-.125,40,-30,-1.236,40,-30,-3.458,40,-30,-4.569,40,-30,-5.681,40,-30,-6.792,40,-30,-7.903,40,-30,-9.014,40,-30,-10.125,40,-30,-11.236,40,-30,-12.347,40,-30,-13.458,40,-30,-14.569,40,-30,-15.681,40,-30,-16.792,40,-30,-17.903,40,-30,-19.014,40,-29.75,-19.014,40,-29.75,-17.903,40,-29.75,-16.792,40,-29.75,-15.681,40,-29.75,-14.569,40,-29.75,-13.458,40,-29.75,-12.347,40,-29.75,-11.236,40,-29.75,-10.125,40,-29.75,-9.014,40,-29.75,-7.903,40,-29.75,-6.792,40,-29.75,-5.681,40,-29.75,-4.569,40,-29.75,-3.458,40,-29.75,-1.236,40,-29.75,-.125,40,-29.75,.986,40,-29.75,3.208,40,-29.75,4.319,40,-29.75,5.431,40,-29.75,6.542,40,-29.75,7.653,40,-29.75,8.764,40,-29.75,9.875,40,-29.75,10.986,40,-29.75,12.097,40,-29.75,13.208,40,-29.75,14.319,40,-29.75,16.542,40,-29.75,17.653,40,-29.75,18.764,40,-30,-20.125,40,-29.75,-20.125,40,-10,-20.125,40,-10.25,-20.125,40,-29.96,-21.024,40,-29.833,-21.945,40,-29.614,-22.877,40,-29.298,-23.806,40,-28.883,-24.718,40,-28.37,-25.597,40,-27.764,-26.428,40,-27.071,-27.196,40,-26.303,-27.889,40,-25.472,-28.495,40,-24.593,-29.008,40,-23.681,-29.423,40,-22.752,-29.739,40,-21.82,-29.958,40,-20.899,-30.085,40,-20,-30.125,40,-19.101,-30.085,40,-18.18,-29.958,40,-17.248,-29.739,40,-16.319,-29.423,40,-15.407,-29.008,40,-14.528,-28.495,40,-13.697,-27.889,40,-12.929,-27.196,40,-12.236,-26.428,40,-11.63,-25.597,40,-11.117,-24.718,40,-10.702,-23.806,40,-10.386,-22.877,40,-10.167,-21.945,40,-10.04,-21.024,40,-10.289,-21.001,40,-10.413,-21.899,40,-10.626,-22.808,40,-10.935,-23.714,40,-11.339,-24.603,40,-11.839,-25.46,40,-12.431,-26.27,40,-13.106,-27.019,40,-13.855,-27.694,40,-14.665,-28.286,40,-15.522,-28.786,40,-16.411,-29.19,40,-17.317,-29.499,40,-18.226,-29.712,40,-19.124,-29.836,40,-20,-29.875,40,-20.876,-29.836,40,-21.774,-29.712,40,-22.683,-29.499,40,-23.589,-29.19,40,-24.478,-28.786,40,-25.335,-28.286,40,-26.145,-27.694,40,-26.894,-27.019,40,-27.569,-26.27,40,-28.161,-25.46,40,-28.661,-24.603,40,-29.065,-23.714,40,-29.374,-22.808,40,-29.587,-21.899,40,-29.711,-21.001,40,-10,19.875,40,-10.25,19.875,40,-10,15.431,40,-10.25,15.431,40,-10,2.097,40,-10.25,2.097,40,-10,-2.347,40,-10.25,-2.347,40,-10,-20.125,40,-10.25,-20.125,40,-10,18.764,40,-10,17.653,40,-10,16.542,40,-10,14.319,40,-10,13.208,40,-10,12.097,40,-10,10.986,40,-10,9.875,40,-10,8.764,40,-10,7.653,40,-10,6.542,40,-10,5.431,40,-10,4.319,40,-10,3.208,40,-10,.986,40,-10,-.125,40,-10,-1.236,40,-10,-3.458,40,-10,-4.569,40,-10,-5.681,40,-10,-6.792,40,-10,-7.903,40,-10,-9.014,40,-10,-10.125,40,-10,-11.236,40,-10,-12.347,40,-10,-13.458,40,-10,-14.569,40,-10,-15.681,40,-10,-16.792,40,-10,-17.903,40,-10,-19.014,40,-10.25,-19.014,40,-10.25,-17.903,40,-10.25,-16.792,40,-10.25,-15.681,40,-10.25,-14.569,40,-10.25,-13.458,40,-10.25,-12.347,40,-10.25,-11.236,40,-10.25,-10.125,40,-10.25,-9.014,40,-10.25,-7.903,40,-10.25,-6.792,40,-10.25,-5.681,40,-10.25,-4.569,40,-10.25,-3.458,40,-10.25,-1.236,40,-10.25,-.125,40,-10.25,.986,40,-10.25,3.208,40,-10.25,4.319,40,-10.25,5.431,40,-10.25,6.542,40,-10.25,7.653,40,-10.25,8.764,40,-10.25,9.875,40,-10.25,10.986,40,-10.25,12.097,40,-10.25,13.208,40,-10.25,14.319,40,-10.25,16.542,40,-10.25,17.653,40,-10.25,18.764,40,10,19.875,40,10.25,19.875,40,0,29.875,40,0,30.125,40,-10,19.875,40,-10.25,19.875,40,9.96,20.774,40,9.833,21.695,40,9.614,22.627,40,9.298,23.556,40,8.883,24.468,40,8.37,25.347,40,7.764,26.178,40,7.071,26.946,40,6.303,27.639,40,5.472,28.245,40,4.593,28.758,40,3.681,29.173,40,2.752,29.489,40,1.82,29.708,40,.899,29.835,40,-.899,29.835,40,-1.82,29.708,40,-2.752,29.489,40,-3.681,29.173,40,-4.593,28.758,40,-5.472,28.245,40,-6.303,27.639,40,-7.071,26.946,40,-7.764,26.178,40,-8.37,25.347,40,-8.883,24.468,40,-9.298,23.556,40,-9.614,22.627,40,-9.833,21.695,40,-9.96,20.774,40,-10.209,20.796,40,-10.079,21.74,40,-9.854,22.695,40,-9.53,23.648,40,-9.105,24.583,40,-8.579,25.484,40,-7.958,26.336,40,-7.248,27.123,40,-6.461,27.833,40,-5.609,28.454,40,-4.708,28.98,40,-3.773,29.405,40,-2.82,29.729,40,-1.865,29.954,40,-.921,30.084,40,.921,30.084,40,1.865,29.954,40,2.82,29.729,40,3.773,29.405,40,4.708,28.98,40,5.609,28.454,40,6.461,27.833,40,7.248,27.123,40,7.958,26.336,40,8.579,25.484,40,9.105,24.583,40,9.53,23.648,40,9.854,22.695,40,10.079,21.74,40,10.209,20.796,40,10,19.875,40,10.25,19.875,40,10,15.431,40,10.25,15.431,40,10,2.097,40,10.25,2.097,40,10,-2.347,40,10.25,-2.347,40,10,-20.125,40,10.25,-20.125,40,10,18.764,40,10,17.653,40,10,16.542,40,10,14.319,40,10,13.208,40,10,12.097,40,10,10.986,40,10,9.875,40,10,8.764,40,10,7.653,40,10,6.542,40,10,5.431,40,10,4.319,40,10,3.208,40,10,.986,40,10,-.125,40,10,-1.236,40,10,-3.458,40,10,-4.569,40,10,-5.681,40,10,-6.792,40,10,-7.903,40,10,-9.014,40,10,-10.125,40,10,-11.236,40,10,-12.347,40,10,-13.458,40,10,-14.569,40,10,-15.681,40,10,-16.792,40,10,-17.903,40,10,-19.014,40,10.25,-19.014,40,10.25,-17.903,40,10.25,-16.792,40,10.25,-15.681,40,10.25,-14.569,40,10.25,-13.458,40,10.25,-12.347,40,10.25,-11.236,40,10.25,-10.125,40,10.25,-9.014,40,10.25,-7.903,40,10.25,-6.792,40,10.25,-5.681,40,10.25,-4.569,40,10.25,-3.458,40,10.25,-1.236,40,10.25,-.125,40,10.25,.986,40,10.25,3.208,40,10.25,4.319,40,10.25,5.431,40,10.25,6.542,40,10.25,7.653,40,10.25,8.764,40,10.25,9.875,40,10.25,10.986,40,10.25,12.097,40,10.25,13.208,40,10.25,14.319,40,10.25,16.542,40,10.25,17.653,40,10.25,18.764,40,10,-20.125,40,10.25,-20.125,40,30,-20.125,40,29.75,-20.125,40,10.04,-21.024,40,10.167,-21.945,40,10.386,-22.877,40,10.702,-23.806,40,11.117,-24.718,40,11.63,-25.597,40,12.236,-26.428,40,12.929,-27.196,40,13.697,-27.889,40,14.528,-28.495,40,15.407,-29.008,40,16.319,-29.423,40,17.248,-29.739,40,18.18,-29.958,40,19.101,-30.085,40,20,-30.125,40,20.899,-30.085,40,21.82,-29.958,40,22.752,-29.739,40,23.681,-29.423,40,24.593,-29.008,40,25.472,-28.495,40,26.303,-27.889,40,27.071,-27.196,40,27.764,-26.428,40,28.37,-25.597,40,28.883,-24.718,40,29.298,-23.806,40,29.614,-22.877,40,29.833,-21.945,40,29.96,-21.024,40,29.711,-21.001,40,29.587,-21.899,40,29.374,-22.808,40,29.065,-23.714,40,28.661,-24.603,40,28.161,-25.46,40,27.569,-26.27,40,26.894,-27.019,40,26.145,-27.694,40,25.335,-28.286,40,24.478,-28.786,40,23.589,-29.19,40,22.683,-29.499,40,21.774,-29.712,40,20.876,-29.836,40,20,-29.875,40,19.124,-29.836,40,18.226,-29.712,40,17.317,-29.499,40,16.411,-29.19,40,15.522,-28.786,40,14.665,-28.286,40,13.855,-27.694,40,13.106,-27.019,40,12.431,-26.27,40,11.839,-25.46,40,11.339,-24.603,40,10.935,-23.714,40,10.626,-22.808,40,10.413,-21.899,40,10.289,-21.001,40,30,19.875,40,29.75,19.875,40,30,15.431,40,29.75,15.431,40,30,2.097,40,29.75,2.097,40,30,-2.347,40,29.75,-2.347,40,30,-20.125,40,29.75,-20.125,40,30,18.764,40,30,17.653,40,30,16.542,40,30,14.319,40,30,13.208,40,30,12.097,40,30,10.986,40,30,9.875,40,30,8.764,40,30,7.653,40,30,6.542,40,30,5.431,40,30,4.319,40,30,3.208,40,30,.986,40,30,-.125,40,30,-1.236,40,30,-3.458,40,30,-4.569,40,30,-5.681,40,30,-6.792,40,30,-7.903,40,30,-9.014,40,30,-10.125,40,30,-11.236,40,30,-12.347,40,30,-13.458,40,30,-14.569,40,30,-15.681,40,30,-16.792,40,30,-17.903,40,30,-19.014,40,29.75,-19.014,40,29.75,-17.903,40,29.75,-16.792,40,29.75,-15.681,40,29.75,-14.569,40,29.75,-13.458,40,29.75,-12.347,40,29.75,-11.236,40,29.75,-10.125,40,29.75,-9.014,40,29.75,-7.903,40,29.75,-6.792,40,29.75,-5.681,40,29.75,-4.569,40,29.75,-3.458,40,29.75,-1.236,40,29.75,-.125,40,29.75,.986,40,29.75,3.208,40,29.75,4.319,40,29.75,5.431,40,29.75,6.542,40,29.75,7.653,40,29.75,8.764,40,29.75,9.875,40,29.75,10.986,40,29.75,12.097,40,29.75,13.208,40,29.75,14.319,40,29.75,16.542,40,29.75,17.653,40,29.75,18.764,40,50,19.875,40,50.25,19.875,40,40,29.875,40,40,30.125,40,30,19.875,40,29.75,19.875,40,49.96,20.774,40,49.833,21.695,40,49.614,22.627,40,49.298,23.556,40,48.883,24.468,40,48.37,25.347,40,47.764,26.178,40,47.071,26.946,40,46.303,27.639,40,45.472,28.245,40,44.593,28.758,40,43.681,29.173,40,42.752,29.489,40,41.82,29.708,40,40.899,29.835,40,39.101,29.835,40,38.18,29.708,40,37.248,29.489,40,36.319,29.173,40,35.407,28.758,40,34.528,28.245,40,33.697,27.639,40,32.929,26.946,40,32.236,26.178,40,31.63,25.347,40,31.117,24.468,40,30.702,23.556,40,30.386,22.627,40,30.167,21.695,40,30.04,20.774,40,29.791,20.796,40,29.921,21.74,40,30.146,22.695,40,30.47,23.648,40,30.895,24.583,40,31.421,25.484,40,32.042,26.336,40,32.752,27.123,40,33.539,27.833,40,34.391,28.454,40,35.292,28.98,40,36.227,29.405,40,37.18,29.729,40,38.135,29.954,40,39.079,30.084,40,40.921,30.084,40,41.865,29.954,40,42.82,29.729,40,43.773,29.405,40,44.708,28.98,40,45.609,28.454,40,46.461,27.833,40,47.248,27.123,40,47.958,26.336,40,48.579,25.484,40,49.105,24.583,40,49.53,23.648,40,49.854,22.695,40,50.079,21.74,40,50.209,20.796,40,50,19.875,40,50.25,19.875,40,50,15.431,40,50.25,15.431,40,50,2.097,40,50.25,2.097,40,50,-2.347,40,50.25,-2.347,40,50,-20.125,40,50.25,-20.125,40,50,18.764,40,50,17.653,40,50,16.542,40,50,14.319,40,50,13.208,40,50,12.097,40,50,10.986,40,50,9.875,40,50,8.764,40,50,7.653,40,50,6.542,40,50,5.431,40,50,4.319,40,50,3.208,40,50,.986,40,50,-.125,40,50,-1.236,40,50,-3.458,40,50,-4.569,40,50,-5.681,40,50,-6.792,40,50,-7.903,40,50,-9.014,40,50,-10.125,40,50,-11.236,40,50,-12.347,40,50,-13.458,40,50,-14.569,40,50,-15.681,40,50,-16.792,40,50,-17.903,40,50,-19.014,40,50.25,-19.014,40,50.25,-17.903,40,50.25,-16.792,40,50.25,-15.681,40,50.25,-14.569,40,50.25,-13.458,40,50.25,-12.347,40,50.25,-11.236,40,50.25,-10.125,40,50.25,-9.014,40,50.25,-7.903,40,50.25,-6.792,40,50.25,-5.681,40,50.25,-4.569,40,50.25,-3.458,40,50.25,-1.236,40,50.25,-.125,40,50.25,.986,40,50.25,3.208,40,50.25,4.319,40,50.25,5.431,40,50.25,6.542,40,50.25,7.653,40,50.25,8.764,40,50.25,9.875,40,50.25,10.986,40,50.25,12.097,40,50.25,13.208,40,50.25,14.319,40,50.25,16.542,40,50.25,17.653,40,50.25,18.764]},normal:{itemSize:3,type:"Float32Array",array},uv:{itemSize:2,type:"Float32Array",array:[0,.5,0,.756,.127,.5,.127,.756,.004,.5,.007,.5,.011,.5,.014,.5,.018,.5,.021,.5,.025,.5,.028,.5,.032,.5,.035,.5,.039,.5,.042,.5,.046,.5,.049,.5,.053,.5,.056,.5,.06,.5,.063,.5,.067,.5,.07,.5,.074,.5,.077,.5,.081,.5,.084,.5,.088,.5,.091,.5,.095,.5,.099,.5,.102,.5,.106,.5,.109,.5,.113,.5,.116,.5,.12,.5,.123,.5,.063,.756,0,.628,.063,.628,.063,.564,.032,.628,0,.564,.032,.564,.032,.532,.016,.564,0,.532,.016,.532,.016,.516,.008,.532,.008,.516,.008,.508,.004,.516,.004,.508,.016,.508,.012,.516,.012,.508,.032,.516,.024,.532,.024,.516,.063,.532,.047,.564,.047,.532,.095,.628,.095,.564,.024,.508,.02,.516,.02,.508,.032,.508,.028,.516,.028,.508,.047,.516,.04,.532,.04,.516,.04,.508,.036,.516,.036,.508,.047,.508,.044,.516,.044,.508,.063,.516,.055,.532,.055,.516,.095,.532,.079,.564,.079,.532,.055,.508,.051,.516,.051,.508,.063,.508,.059,.516,.059,.508,.079,.516,.071,.532,.071,.516,.071,.508,.067,.516,.067,.508,.079,.508,.075,.516,.075,.508,.095,.516,.087,.532,.087,.516,.111,.564,.111,.532,.087,.508,.083,.516,.083,.508,.095,.508,.091,.516,.091,.508,.111,.516,.103,.532,.103,.516,.103,.508,.099,.516,.099,.508,.111,.508,.107,.516,.107,.508,.119,.532,.119,.516,.119,.508,.115,.516,.115,.508,.123,.516,.123,.508,.127,.537,.127,.573,.127,.61,.127,.646,.127,.683,.127,.72,.123,.756,.12,.756,.116,.756,.113,.756,.109,.756,.106,.756,.102,.756,.099,.756,.095,.756,.091,.756,.088,.756,.084,.756,.081,.756,.077,.756,.074,.756,.07,.756,.067,.756,.06,.756,.056,.756,.053,.756,.049,.756,.046,.756,.042,.756,.039,.756,.035,.756,.032,.756,.028,.756,.025,.756,.021,.756,.018,.756,.014,.756,.011,.756,.007,.756,.004,.756,.063,.692,.095,.692,.095,.724,.111,.692,.111,.724,.111,.74,.119,.724,.119,.74,.119,.748,.123,.74,.123,.748,.111,.748,.115,.74,.115,.748,.095,.74,.103,.724,.103,.74,.063,.724,.079,.692,.079,.724,0,.692,.032,.692,.103,.748,.107,.74,.107,.748,.095,.748,.099,.74,.099,.748,.079,.74,.087,.724,.087,.74,.087,.748,.091,.74,.091,.748,.079,.748,.083,.74,.083,.748,.063,.74,.071,.724,.071,.74,.032,.724,.047,.692,.047,.724,.071,.748,.075,.74,.075,.748,.063,.748,.067,.74,.067,.748,.047,.74,.055,.724,.055,.74,.055,.748,.059,.74,.059,.748,.047,.748,.051,.74,.051,.748,.032,.74,.04,.724,.04,.74,0,.724,.016,.692,.016,.724,.04,.748,.044,.74,.044,.748,.032,.748,.036,.74,.036,.748,.016,.74,.024,.724,.024,.74,.024,.748,.028,.74,.028,.748,.016,.748,.02,.74,.02,.748,.008,.724,.008,.74,.008,.748,.012,.74,.012,.748,.004,.74,.004,.748,0,.753,0,.749,0,.746,0,.742,0,.738,0,.735,0,.731,0,.728,0,.721,0,.717,0,.714,0,.71,0,.706,0,.703,0,.699,0,.696,0,.689,0,.685,0,.682,0,.678,0,.674,0,.671,0,.667,0,.664,0,.66,0,.657,0,.653,0,.649,0,.646,0,.642,0,.639,0,.635,0,.632,0,.625,0,.621,0,.617,0,.614,0,.61,0,.607,0,.603,0,.6,0,.596,0,.593,0,.589,0,.585,0,.582,0,.578,0,.575,0,.571,0,.568,0,.561,0,.557,0,.553,0,.55,0,.546,0,.543,0,.539,0,.536,0,.528,0,.525,0,.521,0,.518,0,.514,0,.511,0,.507,0,.504,.008,.732,.004,.724,.004,.732,.016,.708,.008,.692,.008,.708,.032,.66,.016,.628,.016,.66,.008,.716,.004,.708,.004,.716,.008,.7,.004,.692,.004,.7,.016,.676,.008,.66,.008,.676,.008,.684,.004,.676,.004,.684,.008,.668,.004,.66,.004,.668,.016,.644,.008,.628,.008,.644,.032,.596,.016,.596,.008,.652,.004,.644,.004,.652,.008,.636,.004,.628,.004,.636,.016,.612,.008,.596,.008,.612,.008,.62,.004,.612,.004,.62,.008,.604,.004,.596,.004,.604,.016,.58,.008,.564,.008,.58,.008,.588,.004,.58,.004,.588,.008,.572,.004,.564,.004,.572,.016,.548,.008,.548,.008,.556,.004,.548,.004,.556,.008,.54,.004,.532,.004,.54,.008,.524,.004,.524,.709,0,.709,.255,.835,0,.835,.255,.712,0,.716,0,.719,0,.723,0,.726,0,.73,0,.733,0,.737,0,.74,0,.744,0,.747,0,.751,0,.754,0,.758,0,.761,0,.765,0,.769,0,.772,0,.776,0,.779,0,.783,0,.786,0,.79,0,.793,0,.797,0,.8,0,.804,0,.807,0,.811,0,.814,0,.818,0,.821,0,.825,0,.828,0,.832,0,.772,.255,.772,.127,.772,.064,.74,.127,.74,.064,.74,.032,.725,.064,.725,.032,.725,.016,.717,.032,.717,.016,.717,.008,.713,.016,.713,.008,.725,.008,.721,.016,.721,.008,.74,.016,.732,.032,.732,.016,.772,.032,.756,.064,.756,.032,.804,.127,.804,.064,.732,.008,.729,.016,.729,.008,.74,.008,.736,.016,.736,.008,.756,.016,.748,.032,.748,.016,.748,.008,.744,.016,.744,.008,.756,.008,.752,.016,.752,.008,.772,.016,.764,.032,.764,.016,.804,.032,.788,.064,.788,.032,.764,.008,.76,.016,.76,.008,.772,.008,.768,.016,.768,.008,.788,.016,.78,.032,.78,.016,.78,.008,.776,.016,.776,.008,.788,.008,.784,.016,.784,.008,.804,.016,.796,.032,.796,.016,.82,.064,.82,.032,.796,.008,.792,.016,.792,.008,.804,.008,.8,.016,.8,.008,.82,.016,.812,.032,.812,.016,.812,.008,.808,.016,.808,.008,.82,.008,.816,.016,.816,.008,.827,.032,.827,.016,.827,.008,.823,.016,.823,.008,.831,.016,.831,.008,.835,.036,.835,.073,.835,.109,.835,.146,.835,.182,.835,.218,.832,.255,.828,.255,.825,.255,.821,.255,.818,.255,.814,.255,.811,.255,.807,.255,.804,.255,.8,.255,.797,.255,.793,.255,.79,.255,.786,.255,.783,.255,.779,.255,.776,.255,.769,.255,.765,.255,.761,.255,.758,.255,.754,.255,.751,.255,.747,.255,.744,.255,.74,.255,.737,.255,.733,.255,.73,.255,.726,.255,.723,.255,.719,.255,.716,.255,.712,.255,.772,.191,.804,.191,.804,.223,.82,.191,.82,.223,.82,.239,.827,.223,.827,.239,.827,.247,.831,.239,.831,.247,.82,.247,.823,.239,.823,.247,.804,.239,.812,.223,.812,.239,.772,.223,.788,.191,.788,.223,.74,.191,.812,.247,.816,.239,.816,.247,.804,.247,.808,.239,.808,.247,.788,.239,.796,.223,.796,.239,.796,.247,.8,.239,.8,.247,.788,.247,.792,.239,.792,.247,.772,.239,.78,.223,.78,.239,.74,.223,.756,.191,.756,.223,.78,.247,.784,.239,.784,.247,.772,.247,.776,.239,.776,.247,.756,.239,.764,.223,.764,.239,.764,.247,.768,.239,.768,.247,.756,.247,.76,.239,.76,.247,.74,.239,.748,.223,.748,.239,.725,.191,.725,.223,.748,.247,.752,.239,.752,.247,.74,.247,.744,.239,.744,.247,.725,.239,.732,.223,.732,.239,.732,.247,.736,.239,.736,.247,.725,.247,.729,.239,.729,.247,.717,.223,.717,.239,.717,.247,.721,.239,.721,.247,.713,.239,.713,.247,.709,.218,.709,.182,.709,.146,.709,.109,.709,.073,.709,.036,.581,0,.581,.255,.707,0,.707,.255,.584,0,.588,0,.591,0,.595,0,.598,0,.602,0,.605,0,.609,0,.612,0,.616,0,.619,0,.623,0,.626,0,.63,0,.633,0,.637,0,.64,0,.644,0,.647,0,.651,0,.654,0,.658,0,.662,0,.665,0,.669,0,.672,0,.676,0,.679,0,.683,0,.686,0,.69,0,.693,0,.697,0,.7,0,.704,0,.644,.255,.644,.127,.644,.064,.612,.127,.612,.064,.612,.032,.596,.064,.596,.032,.596,.016,.589,.032,.589,.016,.589,.008,.585,.016,.585,.008,.596,.008,.592,.016,.592,.008,.612,.016,.604,.032,.604,.016,.644,.032,.628,.064,.628,.032,.676,.127,.676,.064,.604,.008,.6,.016,.6,.008,.612,.008,.608,.016,.608,.008,.628,.016,.62,.032,.62,.016,.62,.008,.616,.016,.616,.008,.628,.008,.624,.016,.624,.008,.644,.016,.636,.032,.636,.016,.676,.032,.66,.064,.66,.032,.636,.008,.632,.016,.632,.008,.644,.008,.64,.016,.64,.008,.66,.016,.652,.032,.652,.016,.652,.008,.648,.016,.648,.008,.66,.008,.656,.016,.656,.008,.676,.016,.668,.032,.668,.016,.691,.064,.691,.032,.668,.008,.664,.016,.664,.008,.676,.008,.672,.016,.672,.008,.691,.016,.684,.032,.684,.016,.684,.008,.68,.016,.68,.008,.691,.008,.687,.016,.687,.008,.699,.032,.699,.016,.699,.008,.695,.016,.695,.008,.703,.016,.703,.008,.707,.036,.707,.073,.707,.109,.707,.146,.707,.182,.707,.218,.704,.255,.7,.255,.697,.255,.693,.255,.69,.255,.686,.255,.683,.255,.679,.255,.676,.255,.672,.255,.669,.255,.665,.255,.662,.255,.658,.255,.654,.255,.651,.255,.647,.255,.64,.255,.637,.255,.633,.255,.63,.255,.626,.255,.623,.255,.619,.255,.616,.255,.612,.255,.609,.255,.605,.255,.602,.255,.598,.255,.595,.255,.591,.255,.588,.255,.584,.255,.644,.191,.676,.191,.676,.223,.691,.191,.691,.223,.691,.239,.699,.223,.699,.239,.699,.247,.703,.239,.703,.247,.691,.247,.695,.239,.695,.247,.676,.239,.684,.223,.684,.239,.644,.223,.66,.191,.66,.223,.612,.191,.684,.247,.687,.239,.687,.247,.676,.247,.68,.239,.68,.247,.66,.239,.668,.223,.668,.239,.668,.247,.672,.239,.672,.247,.66,.247,.664,.239,.664,.247,.644,.239,.652,.223,.652,.239,.612,.223,.628,.191,.628,.223,.652,.247,.656,.239,.656,.247,.644,.247,.648,.239,.648,.247,.628,.239,.636,.223,.636,.239,.636,.247,.64,.239,.64,.247,.628,.247,.632,.239,.632,.247,.612,.239,.62,.223,.62,.239,.596,.191,.596,.223,.62,.247,.624,.239,.624,.247,.612,.247,.616,.239,.616,.247,.596,.239,.604,.223,.604,.239,.604,.247,.608,.239,.608,.247,.596,.247,.6,.239,.6,.247,.589,.223,.589,.239,.589,.247,.592,.239,.592,.247,.585,.239,.585,.247,.581,.218,.581,.182,.581,.146,.581,.109,.581,.073,.581,.036,.452,.256,.452,.511,.579,.256,.579,.511,.456,.256,.46,.256,.463,.256,.467,.256,.47,.256,.474,.256,.477,.256,.481,.256,.484,.256,.488,.256,.491,.256,.495,.256,.498,.256,.502,.256,.505,.256,.509,.256,.512,.256,.516,.256,.519,.256,.523,.256,.526,.256,.53,.256,.533,.256,.537,.256,.54,.256,.544,.256,.547,.256,.551,.256,.555,.256,.558,.256,.562,.256,.565,.256,.569,.256,.572,.256,.576,.256,.516,.511,.516,.384,.516,.32,.484,.384,.484,.32,.484,.288,.468,.32,.468,.288,.468,.272,.46,.288,.46,.272,.46,.264,.456,.272,.456,.264,.468,.264,.464,.272,.464,.264,.484,.272,.476,.288,.476,.272,.516,.288,.5,.32,.5,.288,.547,.384,.547,.32,.476,.264,.472,.272,.472,.264,.484,.264,.48,.272,.48,.264,.5,.272,.492,.288,.492,.272,.492,.264,.488,.272,.488,.264,.5,.264,.496,.272,.496,.264,.516,.272,.508,.288,.508,.272,.547,.288,.532,.32,.532,.288,.508,.264,.504,.272,.504,.264,.516,.264,.512,.272,.512,.264,.532,.272,.524,.288,.524,.272,.524,.264,.52,.272,.52,.264,.532,.264,.528,.272,.528,.264,.547,.272,.54,.288,.54,.272,.563,.32,.563,.288,.54,.264,.536,.272,.536,.264,.547,.264,.544,.272,.544,.264,.563,.272,.555,.288,.555,.272,.555,.264,.551,.272,.551,.264,.563,.264,.559,.272,.559,.264,.571,.288,.571,.272,.571,.264,.567,.272,.567,.264,.575,.272,.575,.264,.579,.293,.579,.329,.579,.365,.579,.402,.579,.438,.579,.475,.576,.511,.572,.511,.569,.511,.565,.511,.562,.511,.558,.511,.555,.511,.551,.511,.547,.511,.544,.511,.54,.511,.537,.511,.533,.511,.53,.511,.526,.511,.523,.511,.519,.511,.512,.511,.509,.511,.505,.511,.502,.511,.498,.511,.495,.511,.491,.511,.488,.511,.484,.511,.481,.511,.477,.511,.474,.511,.47,.511,.467,.511,.463,.511,.46,.511,.456,.511,.516,.447,.547,.447,.547,.479,.563,.447,.563,.479,.563,.495,.571,.479,.571,.495,.571,.503,.575,.495,.575,.503,.563,.503,.567,.495,.567,.503,.547,.495,.555,.479,.555,.495,.516,.479,.532,.447,.532,.479,.484,.447,.555,.503,.559,.495,.559,.503,.547,.503,.551,.495,.551,.503,.532,.495,.54,.479,.54,.495,.54,.503,.544,.495,.544,.503,.532,.503,.536,.495,.536,.503,.516,.495,.524,.479,.524,.495,.484,.479,.5,.447,.5,.479,.524,.503,.528,.495,.528,.503,.516,.503,.52,.495,.52,.503,.5,.495,.508,.479,.508,.495,.508,.503,.512,.495,.512,.503,.5,.503,.504,.495,.504,.503,.484,.495,.492,.479,.492,.495,.468,.447,.468,.479,.492,.503,.496,.495,.496,.503,.484,.503,.488,.495,.488,.503,.468,.495,.476,.479,.476,.495,.476,.503,.48,.495,.48,.503,.468,.503,.472,.495,.472,.503,.46,.479,.46,.495,.46,.503,.464,.495,.464,.503,.456,.495,.456,.503,.452,.475,.452,.438,.452,.402,.452,.365,.452,.329,.452,.293,.324,.256,.324,.511,.451,.256,.451,.511,.328,.256,.331,.256,.335,.256,.338,.256,.342,.256,.345,.256,.349,.256,.352,.256,.356,.256,.36,.256,.363,.256,.367,.256,.37,.256,.374,.256,.377,.256,.381,.256,.384,.256,.388,.256,.391,.256,.395,.256,.398,.256,.402,.256,.405,.256,.409,.256,.412,.256,.416,.256,.419,.256,.423,.256,.426,.256,.43,.256,.433,.256,.437,.256,.44,.256,.444,.256,.447,.256,.388,.511,.324,.384,.388,.384,.388,.32,.356,.384,.324,.32,.356,.32,.356,.288,.34,.32,.324,.288,.34,.288,.34,.272,.332,.288,.332,.272,.332,.264,.328,.272,.328,.264,.34,.264,.336,.272,.336,.264,.356,.272,.348,.288,.348,.272,.388,.288,.372,.32,.372,.288,.419,.384,.419,.32,.348,.264,.344,.272,.344,.264,.356,.264,.352,.272,.352,.264,.372,.272,.364,.288,.364,.272,.364,.264,.36,.272,.36,.264,.372,.264,.368,.272,.368,.264,.388,.272,.38,.288,.38,.272,.419,.288,.404,.32,.404,.288,.38,.264,.376,.272,.376,.264,.388,.264,.384,.272,.384,.264,.404,.272,.396,.288,.396,.272,.396,.264,.392,.272,.392,.264,.404,.264,.4,.272,.4,.264,.419,.272,.411,.288,.411,.272,.435,.32,.435,.288,.411,.264,.407,.272,.407,.264,.419,.264,.415,.272,.415,.264,.435,.272,.427,.288,.427,.272,.427,.264,.423,.272,.423,.264,.435,.264,.431,.272,.431,.264,.443,.288,.443,.272,.443,.264,.439,.272,.439,.264,.447,.272,.447,.264,.451,.293,.451,.329,.451,.365,.451,.402,.451,.438,.451,.475,.447,.511,.444,.511,.44,.511,.437,.511,.433,.511,.43,.511,.426,.511,.423,.511,.419,.511,.416,.511,.412,.511,.409,.511,.405,.511,.402,.511,.398,.511,.395,.511,.391,.511,.384,.511,.381,.511,.377,.511,.374,.511,.37,.511,.367,.511,.363,.511,.36,.511,.356,.511,.352,.511,.349,.511,.345,.511,.342,.511,.338,.511,.335,.511,.331,.511,.328,.511,.388,.447,.419,.447,.419,.479,.435,.447,.435,.479,.435,.495,.443,.479,.443,.495,.443,.503,.447,.495,.447,.503,.435,.503,.439,.495,.439,.503,.419,.495,.427,.479,.427,.495,.388,.479,.404,.447,.404,.479,.324,.447,.356,.447,.427,.503,.431,.495,.431,.503,.419,.503,.423,.495,.423,.503,.404,.495,.411,.479,.411,.495,.411,.503,.415,.495,.415,.503,.404,.503,.407,.495,.407,.503,.388,.495,.396,.479,.396,.495,.356,.479,.372,.447,.372,.479,.396,.503,.4,.495,.4,.503,.388,.503,.392,.495,.392,.503,.372,.495,.38,.479,.38,.495,.38,.503,.384,.495,.384,.503,.372,.503,.376,.495,.376,.503,.356,.495,.364,.479,.364,.495,.324,.479,.34,.447,.34,.479,.364,.503,.368,.495,.368,.503,.356,.503,.36,.495,.36,.503,.34,.495,.348,.479,.348,.495,.348,.503,.352,.495,.352,.503,.34,.503,.344,.495,.344,.503,.332,.479,.332,.495,.332,.503,.336,.495,.336,.503,.328,.495,.328,.503,.324,.507,.324,.504,.324,.5,.324,.497,.324,.493,.324,.49,.324,.486,.324,.483,.324,.476,.324,.472,.324,.469,.324,.465,.324,.461,.324,.458,.324,.454,.324,.451,.324,.444,.324,.44,.324,.437,.324,.433,.324,.43,.324,.426,.324,.423,.324,.419,.324,.415,.324,.412,.324,.408,.324,.405,.324,.401,.324,.398,.324,.394,.324,.391,.324,.387,.324,.38,.324,.377,.324,.373,.324,.369,.324,.366,.324,.362,.324,.359,.324,.355,.324,.352,.324,.348,.324,.345,.324,.341,.324,.338,.324,.334,.324,.331,.324,.327,.324,.323,.324,.316,.324,.313,.324,.309,.324,.306,.324,.302,.324,.299,.324,.295,.324,.292,.324,.285,.324,.281,.324,.277,.324,.274,.324,.27,.324,.267,.324,.263,.324,.26,.332,.487,.328,.479,.328,.487,.34,.463,.332,.447,.332,.463,.356,.415,.34,.384,.34,.415,.332,.471,.328,.463,.328,.471,.332,.455,.328,.447,.328,.455,.34,.431,.332,.415,.332,.431,.332,.439,.328,.431,.328,.439,.332,.423,.328,.415,.328,.423,.34,.4,.332,.384,.332,.4,.356,.352,.34,.352,.332,.408,.328,.4,.328,.408,.332,.392,.328,.384,.328,.392,.34,.368,.332,.352,.332,.368,.332,.376,.328,.368,.328,.376,.332,.36,.328,.352,.328,.36,.34,.336,.332,.32,.332,.336,.332,.344,.328,.336,.328,.344,.332,.328,.328,.32,.328,.328,.34,.304,.332,.304,.332,.312,.328,.304,.328,.312,.332,.296,.328,.288,.328,.296,.332,.28,.328,.28,.709,.256,.709,.511,.835,.256,.835,.511,.712,.256,.716,.256,.719,.256,.723,.256,.726,.256,.73,.256,.733,.256,.737,.256,.74,.256,.744,.256,.747,.256,.751,.256,.754,.256,.758,.256,.761,.256,.765,.256,.769,.256,.772,.256,.776,.256,.779,.256,.783,.256,.786,.256,.79,.256,.793,.256,.797,.256,.8,.256,.804,.256,.807,.256,.811,.256,.814,.256,.818,.256,.821,.256,.825,.256,.828,.256,.832,.256,.772,.511,.772,.384,.772,.32,.74,.384,.74,.32,.74,.288,.725,.32,.725,.288,.725,.272,.717,.288,.717,.272,.717,.264,.713,.272,.713,.264,.725,.264,.721,.272,.721,.264,.74,.272,.732,.288,.732,.272,.772,.288,.756,.32,.756,.288,.804,.384,.804,.32,.732,.264,.729,.272,.729,.264,.74,.264,.736,.272,.736,.264,.756,.272,.748,.288,.748,.272,.748,.264,.744,.272,.744,.264,.756,.264,.752,.272,.752,.264,.772,.272,.764,.288,.764,.272,.804,.288,.788,.32,.788,.288,.764,.264,.76,.272,.76,.264,.772,.264,.768,.272,.768,.264,.788,.272,.78,.288,.78,.272,.78,.264,.776,.272,.776,.264,.788,.264,.784,.272,.784,.264,.804,.272,.796,.288,.796,.272,.82,.32,.82,.288,.796,.264,.792,.272,.792,.264,.804,.264,.8,.272,.8,.264,.82,.272,.812,.288,.812,.272,.812,.264,.808,.272,.808,.264,.82,.264,.816,.272,.816,.264,.827,.288,.827,.272,.827,.264,.823,.272,.823,.264,.831,.272,.831,.264,.835,.293,.835,.329,.835,.365,.835,.402,.835,.438,.835,.475,.832,.511,.828,.511,.825,.511,.821,.511,.818,.511,.814,.511,.811,.511,.807,.511,.804,.511,.8,.511,.797,.511,.793,.511,.79,.511,.786,.511,.783,.511,.779,.511,.776,.511,.769,.511,.765,.511,.761,.511,.758,.511,.754,.511,.751,.511,.747,.511,.744,.511,.74,.511,.737,.511,.733,.511,.73,.511,.726,.511,.723,.511,.719,.511,.716,.511,.712,.511,.772,.447,.804,.447,.804,.479,.82,.447,.82,.479,.82,.495,.827,.479,.827,.495,.827,.503,.831,.495,.831,.503,.82,.503,.823,.495,.823,.503,.804,.495,.812,.479,.812,.495,.772,.479,.788,.447,.788,.479,.74,.447,.812,.503,.816,.495,.816,.503,.804,.503,.808,.495,.808,.503,.788,.495,.796,.479,.796,.495,.796,.503,.8,.495,.8,.503,.788,.503,.792,.495,.792,.503,.772,.495,.78,.479,.78,.495,.74,.479,.756,.447,.756,.479,.78,.503,.784,.495,.784,.503,.772,.503,.776,.495,.776,.503,.756,.495,.764,.479,.764,.495,.764,.503,.768,.495,.768,.503,.756,.503,.76,.495,.76,.503,.74,.495,.748,.479,.748,.495,.725,.447,.725,.479,.748,.503,.752,.495,.752,.503,.74,.503,.744,.495,.744,.503,.725,.495,.732,.479,.732,.495,.732,.503,.736,.495,.736,.503,.725,.503,.729,.495,.729,.503,.717,.479,.717,.495,.717,.503,.721,.495,.721,.503,.713,.495,.713,.503,.709,.475,.709,.438,.709,.402,.709,.365,.709,.329,.709,.293,.019,0,.019,.037,.019,.073,.019,.11,.019,.146,.019,.183,.019,.22,.019,.256,.026,.037,.026,.073,.026,.11,.026,.146,.026,.183,.026,.22,.032,.037,.032,.073,.032,.11,.032,.146,.032,.183,.032,.22,.039,.037,.039,.073,.039,.11,.039,.146,.039,.183,.039,.22,.045,.037,.045,.073,.045,.11,.045,.146,.045,.183,.045,.22,.051,.037,.051,.073,.051,.11,.051,.146,.051,.183,.051,.22,.057,.037,.057,.073,.057,.11,.057,.146,.057,.183,.057,.22,.063,.037,.063,.073,.063,.11,.063,.146,.063,.183,.063,.22,.07,0,.07,.037,.07,.073,.07,.11,.07,.146,.07,.183,.07,.22,.07,.256,.076,.037,.076,.073,.076,.11,.076,.146,.076,.183,.076,.22,.082,.037,.082,.073,.082,.11,.082,.146,.082,.183,.082,.22,.089,.037,.089,.073,.089,.11,.089,.146,.089,.183,.089,.22,.095,.037,.095,.073,.095,.11,.095,.146,.095,.183,.095,.22,.101,.037,.101,.073,.101,.11,.101,.146,.101,.183,.101,.22,.107,.037,.107,.073,.107,.11,.107,.146,.107,.183,.107,.22,.113,.037,.113,.073,.113,.11,.113,.146,.113,.183,.113,.22,.12,0,.12,.037,.12,.073,.12,.11,.12,.146,.12,.183,.12,.22,.12,.256,.023,0,.026,0,.029,0,.032,0,.035,0,.038,0,.041,0,.044,0,.048,0,.051,0,.054,0,.057,0,.06,0,.063,0,.066,0,.073,0,.076,0,.079,0,.082,0,.085,0,.088,0,.091,0,.095,0,.098,0,.101,0,.104,0,.107,0,.11,0,.113,0,.116,0,.026,.018,.023,.037,.023,.018,.023,.009,.021,.018,.021,.009,.026,.009,.024,.018,.024,.009,.032,.018,.029,.037,.029,.018,.029,.009,.028,.018,.028,.009,.032,.009,.031,.018,.031,.009,.039,.018,.035,.037,.035,.018,.035,.009,.034,.018,.034,.009,.039,.009,.037,.018,.037,.009,.045,.018,.042,.037,.042,.018,.042,.009,.04,.018,.04,.009,.045,.009,.043,.018,.043,.009,.051,.018,.048,.037,.048,.018,.048,.009,.046,.018,.046,.009,.051,.009,.049,.018,.049,.009,.057,.018,.054,.037,.054,.018,.054,.009,.053,.018,.053,.009,.057,.009,.056,.018,.056,.009,.063,.018,.06,.037,.06,.018,.06,.009,.059,.018,.059,.009,.063,.009,.062,.018,.062,.009,.07,.018,.066,.037,.066,.018,.066,.009,.065,.018,.065,.009,.076,.018,.073,.037,.073,.018,.073,.009,.071,.018,.07,.009,.071,.009,.076,.009,.074,.018,.074,.009,.082,.018,.079,.037,.079,.018,.079,.009,.078,.018,.078,.009,.082,.009,.081,.018,.081,.009,.089,.018,.086,.037,.086,.018,.086,.009,.084,.018,.084,.009,.089,.009,.087,.018,.087,.009,.095,.018,.092,.037,.092,.018,.092,.009,.09,.018,.09,.009,.095,.009,.093,.018,.093,.009,.101,.018,.098,.037,.098,.018,.098,.009,.096,.018,.096,.009,.101,.009,.099,.018,.099,.009,.107,.018,.104,.037,.104,.018,.104,.009,.103,.018,.103,.009,.107,.009,.106,.018,.106,.009,.113,.018,.11,.037,.11,.018,.11,.009,.109,.018,.109,.009,.113,.009,.112,.018,.112,.009,.117,.037,.117,.018,.117,.009,.115,.018,.115,.009,.118,.018,.118,.009,.116,.256,.113,.256,.11,.256,.107,.256,.104,.256,.101,.256,.098,.256,.095,.256,.091,.256,.088,.256,.085,.256,.082,.256,.079,.256,.076,.256,.073,.256,.066,.256,.063,.256,.06,.256,.057,.256,.054,.256,.051,.256,.048,.256,.044,.256,.041,.256,.038,.256,.035,.256,.032,.256,.029,.256,.026,.256,.023,.256,.113,.238,.117,.22,.117,.238,.117,.247,.118,.238,.118,.247,.113,.247,.115,.238,.115,.247,.107,.238,.11,.22,.11,.238,.11,.247,.112,.238,.112,.247,.107,.247,.109,.238,.109,.247,.101,.238,.104,.22,.104,.238,.104,.247,.106,.238,.106,.247,.101,.247,.103,.238,.103,.247,.095,.238,.098,.22,.098,.238,.098,.247,.099,.238,.099,.247,.095,.247,.096,.238,.096,.247,.089,.238,.092,.22,.092,.238,.092,.247,.093,.238,.093,.247,.089,.247,.09,.238,.09,.247,.082,.238,.086,.22,.086,.238,.086,.247,.087,.238,.087,.247,.082,.247,.084,.238,.084,.247,.076,.238,.079,.22,.079,.238,.079,.247,.081,.238,.081,.247,.076,.247,.078,.238,.078,.247,.07,.238,.073,.22,.073,.238,.073,.247,.074,.238,.074,.247,.07,.247,.071,.238,.071,.247,.063,.238,.066,.22,.066,.238,.066,.247,.063,.247,.065,.238,.065,.247,.057,.238,.06,.22,.06,.238,.06,.247,.062,.238,.062,.247,.057,.247,.059,.238,.059,.247,.051,.238,.054,.22,.054,.238,.054,.247,.056,.238,.056,.247,.051,.247,.053,.238,.053,.247,.045,.238,.048,.22,.048,.238,.048,.247,.049,.238,.049,.247,.045,.247,.046,.238,.046,.247,.039,.238,.042,.22,.042,.238,.042,.247,.043,.238,.043,.247,.039,.247,.04,.238,.04,.247,.032,.238,.035,.22,.035,.238,.035,.247,.037,.238,.037,.247,.032,.247,.034,.238,.034,.247,.026,.238,.029,.22,.029,.238,.029,.247,.031,.238,.031,.247,.026,.247,.028,.238,.028,.247,.023,.22,.023,.238,.023,.247,.024,.238,.024,.247,.021,.238,.021,.247,.579,.633,.543,.633,.506,.633,.47,.633,.434,.633,.397,.633,.361,.633,.324,.633,.543,.639,.506,.639,.47,.639,.434,.639,.397,.639,.361,.639,.543,.646,.506,.646,.47,.646,.434,.646,.397,.646,.361,.646,.543,.652,.506,.652,.47,.652,.434,.652,.397,.652,.361,.652,.543,.658,.506,.658,.47,.658,.434,.658,.397,.658,.361,.658,.543,.665,.506,.665,.47,.665,.434,.665,.397,.665,.361,.665,.543,.671,.506,.671,.47,.671,.434,.671,.397,.671,.361,.671,.543,.677,.506,.677,.47,.677,.434,.677,.397,.677,.361,.677,.579,.683,.543,.683,.506,.683,.47,.683,.434,.683,.397,.683,.361,.683,.324,.683,.543,.69,.506,.69,.47,.69,.434,.69,.397,.69,.361,.69,.543,.696,.506,.696,.47,.696,.434,.696,.397,.696,.361,.696,.543,.702,.506,.702,.47,.702,.434,.702,.397,.702,.361,.702,.543,.709,.506,.709,.47,.709,.434,.709,.397,.709,.361,.709,.543,.715,.506,.715,.47,.715,.434,.715,.397,.715,.361,.715,.543,.721,.506,.721,.47,.721,.434,.721,.397,.721,.361,.721,.543,.727,.506,.727,.47,.727,.434,.727,.397,.727,.361,.727,.579,.733,.543,.733,.506,.733,.47,.733,.434,.733,.397,.733,.361,.733,.324,.733,.579,.636,.579,.639,.579,.642,.579,.645,.579,.649,.579,.652,.579,.655,.579,.658,.579,.661,.579,.664,.579,.667,.579,.671,.579,.674,.579,.677,.579,.68,.579,.686,.579,.689,.579,.693,.579,.696,.579,.699,.579,.702,.579,.705,.579,.708,.579,.711,.579,.715,.579,.718,.579,.721,.579,.724,.579,.727,.579,.73,.561,.639,.543,.636,.561,.636,.57,.636,.561,.635,.57,.635,.57,.639,.561,.638,.57,.638,.561,.646,.543,.643,.561,.643,.57,.643,.561,.641,.57,.641,.57,.646,.561,.644,.57,.644,.561,.652,.543,.649,.561,.649,.57,.649,.561,.647,.57,.647,.57,.652,.561,.651,.57,.651,.561,.658,.543,.655,.561,.655,.57,.655,.561,.654,.57,.654,.57,.658,.561,.657,.57,.657,.561,.665,.543,.661,.561,.661,.57,.661,.561,.66,.57,.66,.57,.665,.561,.663,.57,.663,.561,.671,.543,.668,.561,.668,.57,.668,.561,.666,.57,.666,.57,.671,.561,.669,.57,.669,.561,.677,.543,.674,.561,.674,.57,.674,.561,.672,.57,.672,.57,.677,.561,.675,.57,.675,.561,.683,.543,.68,.561,.68,.57,.68,.561,.679,.57,.679,.561,.69,.543,.686,.561,.686,.57,.686,.561,.685,.57,.683,.57,.685,.57,.69,.561,.688,.57,.688,.561,.696,.543,.693,.561,.693,.57,.693,.561,.691,.57,.691,.57,.696,.561,.695,.57,.695,.561,.702,.543,.699,.561,.699,.57,.699,.561,.698,.57,.698,.57,.702,.561,.701,.57,.701,.561,.709,.543,.706,.561,.706,.57,.706,.561,.704,.57,.704,.57,.709,.561,.707,.57,.707,.561,.715,.543,.712,.561,.712,.57,.712,.561,.71,.57,.71,.57,.715,.561,.713,.57,.713,.561,.721,.543,.718,.561,.718,.57,.718,.561,.716,.57,.716,.57,.721,.561,.72,.57,.72,.561,.727,.543,.724,.561,.724,.57,.724,.561,.723,.57,.723,.57,.727,.561,.726,.57,.726,.543,.73,.561,.73,.57,.73,.561,.729,.57,.729,.561,.732,.57,.732,.324,.73,.324,.727,.324,.724,.324,.721,.324,.718,.324,.715,.324,.711,.324,.708,.324,.705,.324,.702,.324,.699,.324,.696,.324,.693,.324,.689,.324,.686,.324,.68,.324,.677,.324,.674,.324,.671,.324,.667,.324,.664,.324,.661,.324,.658,.324,.655,.324,.652,.324,.649,.324,.645,.324,.642,.324,.639,.324,.636,.343,.727,.361,.73,.343,.73,.333,.73,.343,.732,.333,.732,.333,.727,.343,.729,.333,.729,.343,.721,.361,.724,.343,.724,.333,.724,.343,.726,.333,.726,.333,.721,.343,.723,.333,.723,.343,.715,.361,.718,.343,.718,.333,.718,.343,.72,.333,.72,.333,.715,.343,.716,.333,.716,.343,.709,.361,.712,.343,.712,.333,.712,.343,.713,.333,.713,.333,.709,.343,.71,.333,.71,.343,.702,.361,.706,.343,.706,.333,.706,.343,.707,.333,.707,.333,.702,.343,.704,.333,.704,.343,.696,.361,.699,.343,.699,.333,.699,.343,.701,.333,.701,.333,.696,.343,.698,.333,.698,.343,.69,.361,.693,.343,.693,.333,.693,.343,.695,.333,.695,.333,.69,.343,.691,.333,.691,.343,.683,.361,.686,.343,.686,.333,.686,.343,.688,.333,.688,.333,.683,.343,.685,.333,.685,.343,.677,.361,.68,.343,.68,.333,.68,.333,.677,.343,.679,.333,.679,.343,.671,.361,.674,.343,.674,.333,.674,.343,.675,.333,.675,.333,.671,.343,.672,.333,.672,.343,.665,.361,.668,.343,.668,.333,.668,.343,.669,.333,.669,.333,.665,.343,.666,.333,.666,.343,.658,.361,.661,.343,.661,.333,.661,.343,.663,.333,.663,.333,.658,.343,.66,.333,.66,.343,.652,.361,.655,.343,.655,.333,.655,.343,.657,.333,.657,.333,.652,.343,.654,.333,.654,.343,.646,.361,.649,.343,.649,.333,.649,.343,.651,.333,.651,.333,.646,.343,.647,.333,.647,.343,.639,.361,.643,.343,.643,.333,.643,.343,.644,.333,.644,.333,.639,.343,.641,.333,.641,.361,.636,.343,.636,.333,.636,.343,.638,.333,.638,.343,.635,.333,.635,.579,.512,.543,.512,.506,.512,.47,.512,.434,.512,.397,.512,.361,.512,.324,.512,.543,.519,.506,.519,.47,.519,.434,.519,.397,.519,.361,.519,.543,.525,.506,.525,.47,.525,.434,.525,.397,.525,.361,.525,.543,.532,.506,.532,.47,.532,.434,.532,.397,.532,.361,.532,.543,.538,.506,.538,.47,.538,.434,.538,.397,.538,.361,.538,.543,.544,.506,.544,.47,.544,.434,.544,.397,.544,.361,.544,.543,.55,.506,.55,.47,.55,.434,.55,.397,.55,.361,.55,.543,.557,.506,.557,.47,.557,.434,.557,.397,.557,.361,.557,.579,.563,.543,.563,.506,.563,.47,.563,.434,.563,.397,.563,.361,.563,.324,.563,.543,.569,.506,.569,.47,.569,.434,.569,.397,.569,.361,.569,.543,.576,.506,.576,.47,.576,.434,.576,.397,.576,.361,.576,.543,.582,.506,.582,.47,.582,.434,.582,.397,.582,.361,.582,.543,.588,.506,.588,.47,.588,.434,.588,.397,.588,.361,.588,.543,.594,.506,.594,.47,.594,.434,.594,.397,.594,.361,.594,.543,.601,.506,.601,.47,.601,.434,.601,.397,.601,.361,.601,.543,.607,.506,.607,.47,.607,.434,.607,.397,.607,.361,.607,.579,.613,.543,.613,.506,.613,.47,.613,.434,.613,.397,.613,.361,.613,.324,.613,.579,.516,.579,.519,.579,.522,.579,.525,.579,.528,.579,.531,.579,.535,.579,.538,.579,.541,.579,.544,.579,.547,.579,.55,.579,.553,.579,.557,.579,.56,.579,.566,.579,.569,.579,.572,.579,.575,.579,.579,.579,.582,.579,.585,.579,.588,.579,.591,.579,.594,.579,.597,.579,.601,.579,.604,.579,.607,.579,.61,.561,.519,.543,.516,.561,.516,.57,.516,.561,.514,.57,.514,.57,.519,.561,.517,.57,.517,.561,.525,.543,.522,.561,.522,.57,.522,.561,.521,.57,.521,.57,.525,.561,.524,.57,.524,.561,.532,.543,.529,.561,.529,.57,.529,.561,.527,.57,.527,.57,.532,.561,.53,.57,.53,.561,.538,.543,.535,.561,.535,.57,.535,.561,.533,.57,.533,.57,.538,.561,.536,.57,.536,.561,.544,.543,.541,.561,.541,.57,.541,.561,.54,.57,.54,.57,.544,.561,.543,.57,.543,.561,.55,.543,.547,.561,.547,.57,.547,.561,.546,.57,.546,.57,.55,.561,.549,.57,.549,.561,.557,.543,.553,.561,.553,.57,.553,.561,.552,.57,.552,.57,.557,.561,.555,.57,.555,.561,.563,.543,.56,.561,.56,.57,.56,.561,.558,.57,.558,.57,.563,.561,.561,.57,.561,.561,.569,.543,.566,.561,.566,.57,.566,.561,.564,.57,.564,.57,.569,.561,.568,.57,.568,.561,.576,.543,.573,.561,.573,.57,.573,.561,.571,.57,.571,.57,.576,.561,.574,.57,.574,.561,.582,.543,.579,.561,.579,.57,.579,.561,.577,.57,.577,.57,.582,.561,.58,.57,.58,.561,.588,.543,.585,.561,.585,.57,.585,.561,.584,.57,.584,.57,.588,.561,.587,.57,.587,.561,.594,.543,.591,.561,.591,.57,.591,.561,.59,.57,.59,.57,.594,.561,.593,.57,.593,.561,.601,.543,.598,.561,.598,.57,.598,.561,.596,.57,.596,.57,.601,.561,.599,.57,.599,.561,.607,.543,.604,.561,.604,.57,.604,.561,.602,.57,.602,.57,.607,.561,.605,.57,.605,.543,.61,.561,.61,.57,.61,.561,.608,.57,.608,.561,.612,.57,.612,.324,.61,.324,.607,.324,.604,.324,.601,.324,.597,.324,.594,.324,.591,.324,.588,.324,.585,.324,.582,.324,.579,.324,.575,.324,.572,.324,.569,.324,.566,.324,.56,.324,.557,.324,.553,.324,.55,.324,.547,.324,.544,.324,.541,.324,.538,.324,.535,.324,.531,.324,.528,.324,.525,.324,.522,.324,.519,.324,.516,.343,.607,.361,.61,.343,.61,.333,.61,.343,.612,.333,.612,.333,.607,.343,.608,.333,.608,.343,.601,.361,.604,.343,.604,.333,.604,.343,.605,.333,.605,.333,.601,.343,.602,.333,.602,.343,.594,.361,.598,.343,.598,.333,.598,.343,.599,.333,.599,.333,.594,.343,.596,.333,.596,.343,.588,.361,.591,.343,.591,.333,.591,.343,.593,.333,.593,.333,.588,.343,.59,.333,.59,.343,.582,.361,.585,.343,.585,.333,.585,.343,.587,.333,.587,.333,.582,.343,.584,.333,.584,.343,.576,.361,.579,.343,.579,.333,.579,.343,.58,.333,.58,.333,.576,.343,.577,.333,.577,.343,.569,.361,.573,.343,.573,.333,.573,.343,.574,.333,.574,.333,.569,.343,.571,.333,.571,.343,.563,.361,.566,.343,.566,.333,.566,.343,.568,.333,.568,.333,.563,.343,.564,.333,.564,.343,.557,.361,.56,.343,.56,.333,.56,.343,.561,.333,.561,.333,.557,.343,.558,.333,.558,.343,.55,.361,.553,.343,.553,.333,.553,.343,.555,.333,.555,.333,.55,.343,.552,.333,.552,.343,.544,.361,.547,.343,.547,.333,.547,.343,.549,.333,.549,.333,.544,.343,.546,.333,.546,.343,.538,.361,.541,.343,.541,.333,.541,.343,.543,.333,.543,.333,.538,.343,.54,.333,.54,.343,.532,.361,.535,.343,.535,.333,.535,.343,.536,.333,.536,.333,.532,.343,.533,.333,.533,.343,.525,.361,.529,.343,.529,.333,.529,.343,.53,.333,.53,.333,.525,.343,.527,.333,.527,.343,.519,.361,.522,.343,.522,.333,.522,.343,.524,.333,.524,.333,.519,.343,.521,.333,.521,.361,.516,.343,.516,.333,.516,.343,.517,.333,.517,.343,.514,.333,.514,.223,0,.223,.037,.223,.073,.223,.11,.223,.146,.223,.183,.223,.22,.223,.256,.229,.037,.229,.073,.229,.11,.229,.146,.229,.183,.229,.22,.236,.037,.236,.073,.236,.11,.236,.146,.236,.183,.236,.22,.242,.037,.242,.073,.242,.11,.242,.146,.242,.183,.242,.22,.248,.037,.248,.073,.248,.11,.248,.146,.248,.183,.248,.22,.254,.037,.254,.073,.254,.11,.254,.146,.254,.183,.254,.22,.26,.037,.26,.073,.26,.11,.26,.146,.26,.183,.26,.22,.267,.037,.267,.073,.267,.11,.267,.146,.267,.183,.267,.22,.273,0,.273,.037,.273,.073,.273,.11,.273,.146,.273,.183,.273,.22,.273,.256,.279,.037,.279,.073,.279,.11,.279,.146,.279,.183,.279,.22,.286,.037,.286,.073,.286,.11,.286,.146,.286,.183,.286,.22,.292,.037,.292,.073,.292,.11,.292,.146,.292,.183,.292,.22,.298,.037,.298,.073,.298,.11,.298,.146,.298,.183,.298,.22,.304,.037,.304,.073,.304,.11,.304,.146,.304,.183,.304,.22,.311,.037,.311,.073,.311,.11,.311,.146,.311,.183,.311,.22,.317,.037,.317,.073,.317,.11,.317,.146,.317,.183,.317,.22,.323,0,.323,.037,.323,.073,.323,.11,.323,.146,.323,.183,.323,.22,.323,.256,.226,0,.229,0,.232,0,.235,0,.238,0,.241,0,.245,0,.248,0,.251,0,.254,0,.257,0,.26,0,.263,0,.267,0,.27,0,.276,0,.279,0,.282,0,.285,0,.288,0,.292,0,.295,0,.298,0,.301,0,.304,0,.307,0,.31,0,.313,0,.317,0,.32,0,.229,.018,.226,.037,.226,.018,.226,.009,.224,.018,.224,.009,.229,.009,.228,.018,.228,.009,.236,.018,.232,.037,.232,.018,.232,.009,.231,.018,.231,.009,.236,.009,.234,.018,.234,.009,.242,.018,.239,.037,.239,.018,.239,.009,.237,.018,.237,.009,.242,.009,.24,.018,.24,.009,.248,.018,.245,.037,.245,.018,.245,.009,.243,.018,.243,.009,.248,.009,.247,.018,.247,.009,.254,.018,.251,.037,.251,.018,.251,.009,.25,.018,.25,.009,.254,.009,.253,.018,.253,.009,.26,.018,.257,.037,.257,.018,.257,.009,.256,.018,.256,.009,.26,.009,.259,.018,.259,.009,.267,.018,.264,.037,.264,.018,.264,.009,.262,.018,.262,.009,.267,.009,.265,.018,.265,.009,.273,.018,.27,.037,.27,.018,.27,.009,.268,.018,.268,.009,.273,.009,.271,.018,.271,.009,.279,.018,.276,.037,.276,.018,.276,.009,.274,.018,.274,.009,.279,.009,.278,.018,.278,.009,.286,.018,.283,.037,.283,.018,.283,.009,.281,.018,.281,.009,.286,.009,.284,.018,.284,.009,.292,.018,.289,.037,.289,.018,.289,.009,.287,.018,.287,.009,.292,.009,.29,.018,.29,.009,.298,.018,.295,.037,.295,.018,.295,.009,.294,.018,.294,.009,.298,.009,.297,.018,.297,.009,.304,.018,.301,.037,.301,.018,.301,.009,.3,.018,.3,.009,.304,.009,.303,.018,.303,.009,.311,.018,.307,.037,.307,.018,.307,.009,.306,.018,.306,.009,.311,.009,.309,.018,.309,.009,.317,.018,.314,.037,.314,.018,.314,.009,.312,.018,.312,.009,.317,.009,.315,.018,.315,.009,.32,.037,.32,.018,.32,.009,.318,.018,.318,.009,.321,.018,.321,.009,.32,.256,.317,.256,.313,.256,.31,.256,.307,.256,.304,.256,.301,.256,.298,.256,.295,.256,.292,.256,.288,.256,.285,.256,.282,.256,.279,.256,.276,.256,.27,.256,.267,.256,.263,.256,.26,.256,.257,.256,.254,.256,.251,.256,.248,.256,.245,.256,.241,.256,.238,.256,.235,.256,.232,.256,.229,.256,.226,.256,.317,.238,.32,.22,.32,.238,.32,.247,.321,.238,.321,.247,.317,.247,.318,.238,.318,.247,.311,.238,.314,.22,.314,.238,.314,.247,.315,.238,.315,.247,.311,.247,.312,.238,.312,.247,.304,.238,.307,.22,.307,.238,.307,.247,.309,.238,.309,.247,.304,.247,.306,.238,.306,.247,.298,.238,.301,.22,.301,.238,.301,.247,.303,.238,.303,.247,.298,.247,.3,.238,.3,.247,.292,.238,.295,.22,.295,.238,.295,.247,.297,.238,.297,.247,.292,.247,.294,.238,.294,.247,.286,.238,.289,.22,.289,.238,.289,.247,.29,.238,.29,.247,.286,.247,.287,.238,.287,.247,.279,.238,.283,.22,.283,.238,.283,.247,.284,.238,.284,.247,.279,.247,.281,.238,.281,.247,.273,.238,.276,.22,.276,.238,.276,.247,.278,.238,.278,.247,.273,.247,.274,.238,.274,.247,.267,.238,.27,.22,.27,.238,.27,.247,.271,.238,.271,.247,.267,.247,.268,.238,.268,.247,.26,.238,.264,.22,.264,.238,.264,.247,.265,.238,.265,.247,.26,.247,.262,.238,.262,.247,.254,.238,.257,.22,.257,.238,.257,.247,.259,.238,.259,.247,.254,.247,.256,.238,.256,.247,.248,.238,.251,.22,.251,.238,.251,.247,.253,.238,.253,.247,.248,.247,.25,.238,.25,.247,.242,.238,.245,.22,.245,.238,.245,.247,.247,.238,.247,.247,.242,.247,.243,.238,.243,.247,.236,.238,.239,.22,.239,.238,.239,.247,.24,.238,.24,.247,.236,.247,.237,.238,.237,.247,.229,.238,.232,.22,.232,.238,.232,.247,.234,.238,.234,.247,.229,.247,.231,.238,.231,.247,.226,.22,.226,.238,.226,.247,.228,.238,.228,.247,.224,.238,.224,.247,.121,0,.121,.037,.121,.073,.121,.11,.121,.146,.121,.183,.121,.22,.121,.256,.128,.037,.128,.073,.128,.11,.128,.146,.128,.183,.128,.22,.134,.037,.134,.073,.134,.11,.134,.146,.134,.183,.134,.22,.14,.037,.14,.073,.14,.11,.14,.146,.14,.183,.14,.22,.146,.037,.146,.073,.146,.11,.146,.146,.146,.183,.146,.22,.153,.037,.153,.073,.153,.11,.153,.146,.153,.183,.153,.22,.159,.037,.159,.073,.159,.11,.159,.146,.159,.183,.159,.22,.165,.037,.165,.073,.165,.11,.165,.146,.165,.183,.165,.22,.171,0,.171,.037,.171,.073,.171,.11,.171,.146,.171,.183,.171,.22,.171,.256,.178,.037,.178,.073,.178,.11,.178,.146,.178,.183,.178,.22,.184,.037,.184,.073,.184,.11,.184,.146,.184,.183,.184,.22,.19,.037,.19,.073,.19,.11,.19,.146,.19,.183,.19,.22,.197,.037,.197,.073,.197,.11,.197,.146,.197,.183,.197,.22,.203,.037,.203,.073,.203,.11,.203,.146,.203,.183,.203,.22,.209,.037,.209,.073,.209,.11,.209,.146,.209,.183,.209,.22,.215,.037,.215,.073,.215,.11,.215,.146,.215,.183,.215,.22,.221,0,.221,.037,.221,.073,.221,.11,.221,.146,.221,.183,.221,.22,.221,.256,.124,0,.127,0,.13,0,.134,0,.137,0,.14,0,.143,0,.146,0,.149,0,.152,0,.155,0,.159,0,.162,0,.165,0,.168,0,.174,0,.177,0,.181,0,.184,0,.187,0,.19,0,.193,0,.196,0,.199,0,.202,0,.206,0,.209,0,.212,0,.215,0,.218,0,.128,.018,.124,.037,.124,.018,.124,.009,.123,.018,.123,.009,.128,.009,.126,.018,.126,.009,.134,.018,.131,.037,.131,.018,.131,.009,.129,.018,.129,.009,.134,.009,.132,.018,.132,.009,.14,.018,.137,.037,.137,.018,.137,.009,.136,.018,.136,.009,.14,.009,.139,.018,.139,.009,.146,.018,.143,.037,.143,.018,.143,.009,.142,.018,.142,.009,.146,.009,.145,.018,.145,.009,.153,.018,.15,.037,.15,.018,.15,.009,.148,.018,.148,.009,.153,.009,.151,.018,.151,.009,.159,.018,.156,.037,.156,.018,.156,.009,.154,.018,.154,.009,.159,.009,.157,.018,.157,.009,.165,.018,.162,.037,.162,.018,.162,.009,.16,.018,.16,.009,.165,.009,.163,.018,.163,.009,.171,.018,.168,.037,.168,.018,.168,.009,.167,.018,.167,.009,.171,.009,.17,.018,.17,.009,.178,.018,.174,.037,.174,.018,.174,.009,.173,.018,.173,.009,.178,.009,.176,.018,.176,.009,.184,.018,.181,.037,.181,.018,.181,.009,.179,.018,.179,.009,.184,.009,.182,.018,.182,.009,.19,.018,.187,.037,.187,.018,.187,.009,.186,.018,.186,.009,.19,.009,.189,.018,.189,.009,.197,.018,.193,.037,.193,.018,.193,.009,.192,.018,.192,.009,.197,.009,.195,.018,.195,.009,.203,.018,.2,.037,.2,.018,.2,.009,.198,.018,.198,.009,.203,.009,.201,.018,.201,.009,.209,.018,.206,.037,.206,.018,.206,.009,.204,.018,.204,.009,.209,.009,.207,.018,.207,.009,.215,.018,.212,.037,.212,.018,.212,.009,.21,.018,.21,.009,.215,.009,.214,.018,.214,.009,.218,.037,.218,.018,.218,.009,.217,.018,.217,.009,.22,.018,.22,.009,.218,.256,.215,.256,.212,.256,.209,.256,.206,.256,.202,.256,.199,.256,.196,.256,.193,.256,.19,.256,.187,.256,.184,.256,.181,.256,.177,.256,.174,.256,.168,.256,.165,.256,.162,.256,.159,.256,.155,.256,.152,.256,.149,.256,.146,.256,.143,.256,.14,.256,.137,.256,.134,.256,.13,.256,.127,.256,.124,.256,.215,.238,.218,.22,.218,.238,.218,.247,.22,.238,.22,.247,.215,.247,.217,.238,.217,.247,.209,.238,.212,.22,.212,.238,.212,.247,.214,.238,.214,.247,.209,.247,.21,.238,.21,.247,.203,.238,.206,.22,.206,.238,.206,.247,.207,.238,.207,.247,.203,.247,.204,.238,.204,.247,.197,.238,.2,.22,.2,.238,.2,.247,.201,.238,.201,.247,.197,.247,.198,.238,.198,.247,.19,.238,.193,.22,.193,.238,.193,.247,.195,.238,.195,.247,.19,.247,.192,.238,.192,.247,.184,.238,.187,.22,.187,.238,.187,.247,.189,.238,.189,.247,.184,.247,.186,.238,.186,.247,.178,.238,.181,.22,.181,.238,.181,.247,.182,.238,.182,.247,.178,.247,.179,.238,.179,.247,.171,.238,.174,.22,.174,.238,.174,.247,.176,.238,.176,.247,.171,.247,.173,.238,.173,.247,.165,.238,.168,.22,.168,.238,.168,.247,.17,.238,.17,.247,.165,.247,.167,.238,.167,.247,.159,.238,.162,.22,.162,.238,.162,.247,.163,.238,.163,.247,.159,.247,.16,.238,.16,.247,.153,.238,.156,.22,.156,.238,.156,.247,.157,.238,.157,.247,.153,.247,.154,.238,.154,.247,.146,.238,.15,.22,.15,.238,.15,.247,.151,.238,.151,.247,.146,.247,.148,.238,.148,.247,.14,.238,.143,.22,.143,.238,.143,.247,.145,.238,.145,.247,.14,.247,.142,.238,.142,.247,.134,.238,.137,.22,.137,.238,.137,.247,.139,.238,.139,.247,.134,.247,.136,.238,.136,.247,.128,.238,.131,.22,.131,.238,.131,.247,.132,.238,.132,.247,.128,.247,.129,.238,.129,.247,.124,.22,.124,.238,.124,.247,.126,.238,.126,.247,.123,.238,.123,.247,.581,.256,.581,.511,.707,.256,.707,.511,.584,.256,.588,.256,.591,.256,.595,.256,.598,.256,.602,.256,.605,.256,.609,.256,.612,.256,.616,.256,.619,.256,.623,.256,.626,.256,.63,.256,.633,.256,.637,.256,.64,.256,.644,.256,.647,.256,.651,.256,.654,.256,.658,.256,.662,.256,.665,.256,.669,.256,.672,.256,.676,.256,.679,.256,.683,.256,.686,.256,.69,.256,.693,.256,.697,.256,.7,.256,.704,.256,.644,.511,.581,.384,.644,.384,.644,.32,.612,.384,.612,.32,.612,.288,.596,.32,.596,.288,.596,.272,.589,.288,.589,.272,.589,.264,.585,.272,.585,.264,.596,.264,.592,.272,.592,.264,.612,.272,.604,.288,.604,.272,.644,.288,.628,.32,.628,.288,.676,.384,.676,.32,.604,.264,.6,.272,.6,.264,.612,.264,.608,.272,.608,.264,.628,.272,.62,.288,.62,.272,.62,.264,.616,.272,.616,.264,.628,.264,.624,.272,.624,.264,.644,.272,.636,.288,.636,.272,.676,.288,.66,.32,.66,.288,.636,.264,.632,.272,.632,.264,.644,.264,.64,.272,.64,.264,.66,.272,.652,.288,.652,.272,.652,.264,.648,.272,.648,.264,.66,.264,.656,.272,.656,.264,.676,.272,.668,.288,.668,.272,.691,.32,.691,.288,.668,.264,.664,.272,.664,.264,.676,.264,.672,.272,.672,.264,.691,.272,.684,.288,.684,.272,.684,.264,.68,.272,.68,.264,.691,.264,.687,.272,.687,.264,.699,.288,.699,.272,.699,.264,.695,.272,.695,.264,.703,.272,.703,.264,.707,.293,.707,.329,.707,.365,.707,.402,.707,.438,.707,.475,.704,.511,.7,.511,.697,.511,.693,.511,.69,.511,.686,.511,.683,.511,.679,.511,.676,.511,.672,.511,.669,.511,.665,.511,.662,.511,.658,.511,.654,.511,.651,.511,.647,.511,.64,.511,.637,.511,.633,.511,.63,.511,.626,.511,.623,.511,.619,.511,.616,.511,.612,.511,.609,.511,.605,.511,.602,.511,.598,.511,.595,.511,.591,.511,.588,.511,.584,.511,.644,.447,.676,.447,.676,.479,.691,.447,.691,.479,.691,.495,.699,.479,.699,.495,.699,.503,.703,.495,.703,.503,.691,.503,.695,.495,.695,.503,.676,.495,.684,.479,.684,.495,.644,.479,.66,.447,.66,.479,.581,.447,.612,.447,.684,.503,.687,.495,.687,.503,.676,.503,.68,.495,.68,.503,.66,.495,.668,.479,.668,.495,.668,.503,.672,.495,.672,.503,.66,.503,.664,.495,.664,.503,.644,.495,.652,.479,.652,.495,.612,.479,.628,.447,.628,.479,.652,.503,.656,.495,.656,.503,.644,.503,.648,.495,.648,.503,.628,.495,.636,.479,.636,.495,.636,.503,.64,.495,.64,.503,.628,.503,.632,.495,.632,.503,.612,.495,.62,.479,.62,.495,.581,.479,.596,.447,.596,.479,.62,.503,.624,.495,.624,.503,.612,.503,.616,.495,.616,.503,.596,.495,.604,.479,.604,.495,.604,.503,.608,.495,.608,.503,.596,.503,.6,.495,.6,.503,.589,.479,.589,.495,.589,.503,.592,.495,.592,.503,.585,.495,.585,.503,.581,.507,.581,.504,.581,.5,.581,.497,.581,.493,.581,.49,.581,.486,.581,.483,.581,.476,.581,.472,.581,.469,.581,.465,.581,.461,.581,.458,.581,.454,.581,.451,.581,.444,.581,.44,.581,.437,.581,.433,.581,.43,.581,.426,.581,.423,.581,.419,.581,.415,.581,.412,.581,.408,.581,.405,.581,.401,.581,.398,.581,.394,.581,.391,.581,.387,.581,.38,.581,.377,.581,.373,.581,.369,.581,.366,.581,.362,.581,.359,.581,.355,.581,.352,.581,.348,.581,.345,.581,.341,.581,.338,.581,.334,.581,.331,.581,.327,.581,.323,.581,.32,.581,.316,.581,.313,.581,.309,.581,.306,.581,.302,.581,.299,.581,.295,.581,.292,.581,.288,.581,.285,.581,.281,.581,.277,.581,.274,.581,.27,.581,.267,.581,.263,.581,.26,.589,.487,.585,.479,.585,.487,.596,.463,.589,.447,.589,.463,.612,.415,.596,.384,.596,.415,.589,.471,.585,.463,.585,.471,.589,.455,.585,.447,.585,.455,.596,.431,.589,.415,.589,.431,.589,.439,.585,.431,.585,.439,.589,.423,.585,.415,.585,.423,.596,.4,.589,.384,.589,.4,.612,.352,.596,.352,.589,.408,.585,.4,.585,.408,.589,.392,.585,.384,.585,.392,.596,.368,.589,.352,.589,.368,.589,.376,.585,.368,.585,.376,.589,.36,.585,.352,.585,.36,.596,.336,.589,.32,.589,.336,.589,.344,.585,.336,.585,.344,.589,.328,.585,.32,.585,.328,.596,.304,.589,.304,.589,.312,.585,.304,.585,.312,.589,.296,.585,.288,.585,.296,.589,.28,.585,.28,.709,.744,.709,.999,.835,.744,.835,.999,.712,.744,.716,.744,.719,.744,.723,.744,.726,.744,.73,.744,.733,.744,.737,.744,.74,.744,.744,.744,.747,.744,.751,.744,.754,.744,.758,.744,.761,.744,.765,.744,.769,.744,.772,.744,.776,.744,.779,.744,.783,.744,.786,.744,.79,.744,.793,.744,.797,.744,.8,.744,.804,.744,.807,.744,.811,.744,.814,.744,.818,.744,.821,.744,.825,.744,.828,.744,.832,.744,.772,.999,.772,.871,.772,.807,.74,.871,.74,.807,.74,.776,.725,.807,.725,.776,.725,.76,.717,.776,.717,.76,.717,.752,.713,.76,.713,.752,.725,.752,.721,.76,.721,.752,.74,.76,.732,.776,.732,.76,.772,.776,.756,.807,.756,.776,.804,.871,.804,.807,.732,.752,.729,.76,.729,.752,.74,.752,.736,.76,.736,.752,.756,.76,.748,.776,.748,.76,.748,.752,.744,.76,.744,.752,.756,.752,.752,.76,.752,.752,.772,.76,.764,.776,.764,.76,.804,.776,.788,.807,.788,.776,.764,.752,.76,.76,.76,.752,.772,.752,.768,.76,.768,.752,.788,.76,.78,.776,.78,.76,.78,.752,.776,.76,.776,.752,.788,.752,.784,.76,.784,.752,.804,.76,.796,.776,.796,.76,.82,.807,.82,.776,.796,.752,.792,.76,.792,.752,.804,.752,.8,.76,.8,.752,.82,.76,.812,.776,.812,.76,.812,.752,.808,.76,.808,.752,.82,.752,.816,.76,.816,.752,.827,.776,.827,.76,.827,.752,.823,.76,.823,.752,.831,.76,.831,.752,.835,.78,.835,.817,.835,.853,.835,.889,.835,.926,.835,.962,.832,.999,.828,.999,.825,.999,.821,.999,.818,.999,.814,.999,.811,.999,.807,.999,.804,.999,.8,.999,.797,.999,.793,.999,.79,.999,.786,.999,.783,.999,.779,.999,.776,.999,.769,.999,.765,.999,.761,.999,.758,.999,.754,.999,.751,.999,.747,.999,.744,.999,.74,.999,.737,.999,.733,.999,.73,.999,.726,.999,.723,.999,.719,.999,.716,.999,.712,.999,.772,.935,.804,.935,.804,.967,.82,.935,.82,.967,.82,.983,.827,.967,.827,.983,.827,.991,.831,.983,.831,.991,.82,.991,.823,.983,.823,.991,.804,.983,.812,.967,.812,.983,.772,.967,.788,.935,.788,.967,.74,.935,.812,.991,.816,.983,.816,.991,.804,.991,.808,.983,.808,.991,.788,.983,.796,.967,.796,.983,.796,.991,.8,.983,.8,.991,.788,.991,.792,.983,.792,.991,.772,.983,.78,.967,.78,.983,.74,.967,.756,.935,.756,.967,.78,.991,.784,.983,.784,.991,.772,.991,.776,.983,.776,.991,.756,.983,.764,.967,.764,.983,.764,.991,.768,.983,.768,.991,.756,.991,.76,.983,.76,.991,.74,.983,.748,.967,.748,.983,.725,.935,.725,.967,.748,.991,.752,.983,.752,.991,.74,.991,.744,.983,.744,.991,.725,.983,.732,.967,.732,.983,.732,.991,.736,.983,.736,.991,.725,.991,.729,.983,.729,.991,.717,.967,.717,.983,.717,.991,.721,.983,.721,.991,.713,.983,.713,.991,.709,.962,.709,.926,.709,.889,.709,.853,.709,.817,.709,.78,.581,.744,.581,.999,.707,.744,.707,.999,.584,.744,.588,.744,.591,.744,.595,.744,.598,.744,.602,.744,.605,.744,.609,.744,.612,.744,.616,.744,.619,.744,.623,.744,.626,.744,.63,.744,.633,.744,.637,.744,.64,.744,.644,.744,.647,.744,.651,.744,.654,.744,.658,.744,.662,.744,.665,.744,.669,.744,.672,.744,.676,.744,.679,.744,.683,.744,.686,.744,.69,.744,.693,.744,.697,.744,.7,.744,.704,.744,.644,.999,.644,.871,.644,.807,.612,.871,.612,.807,.612,.776,.596,.807,.596,.776,.596,.76,.589,.776,.589,.76,.589,.752,.585,.76,.585,.752,.596,.752,.592,.76,.592,.752,.612,.76,.604,.776,.604,.76,.644,.776,.628,.807,.628,.776,.676,.871,.676,.807,.604,.752,.6,.76,.6,.752,.612,.752,.608,.76,.608,.752,.628,.76,.62,.776,.62,.76,.62,.752,.616,.76,.616,.752,.628,.752,.624,.76,.624,.752,.644,.76,.636,.776,.636,.76,.676,.776,.66,.807,.66,.776,.636,.752,.632,.76,.632,.752,.644,.752,.64,.76,.64,.752,.66,.76,.652,.776,.652,.76,.652,.752,.648,.76,.648,.752,.66,.752,.656,.76,.656,.752,.676,.76,.668,.776,.668,.76,.691,.807,.691,.776,.668,.752,.664,.76,.664,.752,.676,.752,.672,.76,.672,.752,.691,.76,.684,.776,.684,.76,.684,.752,.68,.76,.68,.752,.691,.752,.687,.76,.687,.752,.699,.776,.699,.76,.699,.752,.695,.76,.695,.752,.703,.76,.703,.752,.707,.78,.707,.817,.707,.853,.707,.889,.707,.926,.707,.962,.704,.999,.7,.999,.697,.999,.693,.999,.69,.999,.686,.999,.683,.999,.679,.999,.676,.999,.672,.999,.669,.999,.665,.999,.662,.999,.658,.999,.654,.999,.651,.999,.647,.999,.64,.999,.637,.999,.633,.999,.63,.999,.626,.999,.623,.999,.619,.999,.616,.999,.612,.999,.609,.999,.605,.999,.602,.999,.598,.999,.595,.999,.591,.999,.588,.999,.584,.999,.644,.935,.676,.935,.676,.967,.691,.935,.691,.967,.691,.983,.699,.967,.699,.983,.699,.991,.703,.983,.703,.991,.691,.991,.695,.983,.695,.991,.676,.983,.684,.967,.684,.983,.644,.967,.66,.935,.66,.967,.612,.935,.684,.991,.687,.983,.687,.991,.676,.991,.68,.983,.68,.991,.66,.983,.668,.967,.668,.983,.668,.991,.672,.983,.672,.991,.66,.991,.664,.983,.664,.991,.644,.983,.652,.967,.652,.983,.612,.967,.628,.935,.628,.967,.652,.991,.656,.983,.656,.991,.644,.991,.648,.983,.648,.991,.628,.983,.636,.967,.636,.983,.636,.991,.64,.983,.64,.991,.628,.991,.632,.983,.632,.991,.612,.983,.62,.967,.62,.983,.596,.935,.596,.967,.62,.991,.624,.983,.624,.991,.612,.991,.616,.983,.616,.991,.596,.983,.604,.967,.604,.983,.604,.991,.608,.983,.608,.991,.596,.991,.6,.983,.6,.991,.589,.967,.589,.983,.589,.991,.592,.983,.592,.991,.585,.983,.585,.991,.581,.962,.581,.926,.581,.889,.581,.853,.581,.817,.581,.78,.579,.128,.324,.128,.579,.255,.324,.255,.579,.132,.579,.135,.579,.139,.579,.142,.579,.146,.579,.149,.579,.153,.579,.156,.579,.16,.579,.163,.579,.167,.579,.17,.579,.174,.579,.177,.579,.181,.579,.184,.579,.188,.579,.191,.579,.195,.579,.198,.579,.202,.579,.206,.579,.209,.579,.213,.579,.216,.579,.22,.579,.223,.579,.227,.579,.23,.579,.234,.579,.237,.579,.241,.579,.244,.579,.248,.579,.251,.324,.191,.452,.191,.515,.191,.452,.16,.515,.16,.547,.16,.515,.144,.547,.144,.563,.144,.547,.136,.563,.136,.571,.136,.563,.132,.571,.132,.571,.144,.563,.14,.571,.14,.563,.16,.547,.152,.563,.152,.547,.191,.515,.176,.547,.176,.452,.223,.515,.223,.571,.152,.563,.148,.571,.148,.571,.16,.563,.156,.571,.156,.563,.176,.547,.168,.563,.168,.571,.168,.563,.164,.571,.164,.571,.176,.563,.172,.571,.172,.563,.191,.547,.184,.563,.184,.547,.223,.515,.207,.547,.207,.571,.184,.563,.18,.571,.18,.571,.191,.563,.187,.571,.187,.563,.207,.547,.199,.563,.199,.571,.199,.563,.195,.571,.195,.571,.207,.563,.203,.571,.203,.563,.223,.547,.215,.563,.215,.515,.239,.547,.239,.571,.215,.563,.211,.571,.211,.571,.223,.563,.219,.571,.219,.563,.239,.547,.231,.563,.231,.571,.231,.563,.227,.571,.227,.571,.239,.563,.235,.571,.235,.547,.247,.563,.247,.571,.247,.563,.243,.571,.243,.563,.251,.571,.251,.543,.255,.506,.255,.47,.255,.434,.255,.397,.255,.361,.255,.324,.251,.324,.248,.324,.244,.324,.241,.324,.237,.324,.234,.324,.23,.324,.227,.324,.223,.324,.22,.324,.216,.324,.213,.324,.209,.324,.206,.324,.202,.324,.198,.324,.195,.324,.188,.324,.184,.324,.181,.324,.177,.324,.174,.324,.17,.324,.167,.324,.163,.324,.16,.324,.156,.324,.153,.324,.149,.324,.146,.324,.142,.324,.139,.324,.135,.324,.132,.388,.191,.388,.223,.356,.223,.388,.239,.356,.239,.34,.239,.356,.247,.34,.247,.332,.247,.34,.251,.332,.251,.332,.239,.34,.243,.332,.243,.34,.223,.356,.231,.34,.231,.356,.191,.388,.207,.356,.207,.388,.16,.332,.231,.34,.235,.332,.235,.332,.223,.34,.227,.332,.227,.34,.207,.356,.215,.34,.215,.332,.215,.34,.219,.332,.219,.332,.207,.34,.211,.332,.211,.34,.191,.356,.199,.34,.199,.356,.16,.388,.176,.356,.176,.332,.199,.34,.203,.332,.203,.332,.191,.34,.195,.332,.195,.34,.176,.356,.184,.34,.184,.332,.184,.34,.187,.332,.187,.332,.176,.34,.18,.332,.18,.34,.16,.356,.168,.34,.168,.388,.144,.356,.144,.332,.168,.34,.172,.332,.172,.332,.16,.34,.164,.332,.164,.34,.144,.356,.152,.34,.152,.332,.152,.34,.156,.332,.156,.332,.144,.34,.148,.332,.148,.356,.136,.34,.136,.332,.136,.34,.14,.332,.14,.34,.132,.332,.132,.361,.128,.397,.128,.434,.128,.47,.128,.506,.128,.543,.128,.579,0,.324,0,.579,.127,.324,.127,.579,.004,.579,.007,.579,.011,.579,.014,.579,.018,.579,.021,.579,.025,.579,.028,.579,.032,.579,.035,.579,.039,.579,.042,.579,.046,.579,.049,.579,.053,.579,.056,.579,.06,.579,.063,.579,.067,.579,.07,.579,.074,.579,.077,.579,.081,.579,.084,.579,.088,.579,.091,.579,.095,.579,.099,.579,.102,.579,.106,.579,.109,.579,.113,.579,.116,.579,.12,.579,.123,.324,.063,.452,0,.452,.063,.515,.063,.452,.032,.515,.032,.547,.032,.515,.016,.547,.016,.563,.016,.547,.008,.563,.008,.571,.008,.563,.004,.571,.004,.571,.016,.563,.012,.571,.012,.563,.032,.547,.024,.563,.024,.547,.063,.515,.047,.547,.047,.452,.095,.515,.095,.571,.024,.563,.02,.571,.02,.571,.032,.563,.028,.571,.028,.563,.047,.547,.04,.563,.04,.571,.04,.563,.036,.571,.036,.571,.047,.563,.044,.571,.044,.563,.063,.547,.055,.563,.055,.547,.095,.515,.079,.547,.079,.571,.055,.563,.051,.571,.051,.571,.063,.563,.059,.571,.059,.563,.079,.547,.071,.563,.071,.571,.071,.563,.067,.571,.067,.571,.079,.563,.075,.571,.075,.563,.095,.547,.087,.563,.087,.515,.111,.547,.111,.571,.087,.563,.083,.571,.083,.571,.095,.563,.091,.571,.091,.563,.111,.547,.103,.563,.103,.571,.103,.563,.099,.571,.099,.571,.111,.563,.107,.571,.107,.547,.119,.563,.119,.571,.119,.563,.115,.571,.115,.563,.123,.571,.123,.543,.127,.506,.127,.47,.127,.434,.127,.397,.127,.361,.127,.324,.123,.324,.12,.324,.116,.324,.113,.324,.109,.324,.106,.324,.102,.324,.099,.324,.095,.324,.091,.324,.088,.324,.084,.324,.081,.324,.077,.324,.074,.324,.07,.324,.067,.324,.06,.324,.056,.324,.053,.324,.049,.324,.046,.324,.042,.324,.039,.324,.035,.324,.032,.324,.028,.324,.025,.324,.021,.324,.018,.324,.014,.324,.011,.324,.007,.324,.004,.388,.063,.388,.095,.356,.095,.388,.111,.356,.111,.34,.111,.356,.119,.34,.119,.332,.119,.34,.123,.332,.123,.332,.111,.34,.115,.332,.115,.34,.095,.356,.103,.34,.103,.356,.063,.388,.079,.356,.079,.388,0,.388,.032,.332,.103,.34,.107,.332,.107,.332,.095,.34,.099,.332,.099,.34,.079,.356,.087,.34,.087,.332,.087,.34,.091,.332,.091,.332,.079,.34,.083,.332,.083,.34,.063,.356,.071,.34,.071,.356,.032,.388,.047,.356,.047,.332,.071,.34,.075,.332,.075,.332,.063,.34,.067,.332,.067,.34,.047,.356,.055,.34,.055,.332,.055,.34,.059,.332,.059,.332,.047,.34,.051,.332,.051,.34,.032,.356,.04,.34,.04,.356,0,.388,.016,.356,.016,.332,.04,.34,.044,.332,.044,.332,.032,.34,.036,.332,.036,.34,.016,.356,.024,.34,.024,.332,.024,.34,.028,.332,.028,.332,.016,.34,.02,.332,.02,.356,.008,.34,.008,.332,.008,.34,.012,.332,.012,.34,.004,.332,.004,.328,0,.331,0,.335,0,.339,0,.342,0,.346,0,.349,0,.353,0,.36,0,.363,0,.367,0,.37,0,.374,0,.377,0,.381,0,.385,0,.392,0,.395,0,.399,0,.402,0,.406,0,.409,0,.413,0,.416,0,.42,0,.423,0,.427,0,.431,0,.434,0,.438,0,.441,0,.445,0,.448,0,.455,0,.459,0,.462,0,.466,0,.469,0,.473,0,.477,0,.48,0,.484,0,.487,0,.491,0,.494,0,.498,0,.501,0,.505,0,.508,0,.512,0,.515,0,.519,0,.523,0,.526,0,.53,0,.533,0,.537,0,.54,0,.544,0,.547,0,.551,0,.554,0,.558,0,.561,0,.565,0,.569,0,.572,0,.576,0,.348,.008,.356,.004,.348,.004,.372,.016,.388,.008,.372,.008,.42,.032,.452,.016,.42,.016,.364,.008,.372,.004,.364,.004,.38,.008,.388,.004,.38,.004,.404,.016,.42,.008,.404,.008,.396,.008,.404,.004,.396,.004,.412,.008,.42,.004,.412,.004,.436,.016,.452,.008,.436,.008,.484,.032,.484,.016,.428,.008,.436,.004,.428,.004,.444,.008,.452,.004,.444,.004,.468,.016,.484,.008,.468,.008,.46,.008,.468,.004,.46,.004,.476,.008,.484,.004,.476,.004,.5,.016,.515,.008,.5,.008,.492,.008,.5,.004,.492,.004,.507,.008,.515,.004,.507,.004,.531,.016,.531,.008,.523,.008,.531,.004,.523,.004,.539,.008,.547,.004,.539,.004,.555,.008,.555,.004,.835,.616,.581,.616,.835,.742,.581,.742,.835,.619,.835,.623,.835,.626,.835,.63,.835,.633,.835,.637,.835,.64,.835,.644,.835,.647,.835,.651,.835,.654,.835,.658,.835,.661,.835,.665,.835,.668,.835,.672,.835,.675,.835,.679,.835,.682,.835,.686,.835,.69,.835,.693,.835,.697,.835,.7,.835,.704,.835,.707,.835,.711,.835,.714,.835,.718,.835,.721,.835,.725,.835,.728,.835,.732,.835,.735,.835,.739,.581,.679,.708,.679,.772,.679,.708,.647,.772,.647,.804,.647,.772,.631,.804,.631,.819,.631,.804,.624,.819,.624,.827,.624,.819,.62,.827,.62,.827,.631,.819,.628,.827,.628,.819,.647,.804,.639,.819,.639,.804,.679,.772,.663,.804,.663,.708,.711,.772,.711,.827,.639,.819,.635,.827,.635,.827,.647,.819,.643,.827,.643,.819,.663,.804,.655,.819,.655,.827,.655,.819,.651,.827,.651,.827,.663,.819,.659,.827,.659,.819,.679,.804,.671,.819,.671,.804,.711,.772,.695,.804,.695,.827,.671,.819,.667,.827,.667,.827,.679,.819,.675,.827,.675,.819,.695,.804,.687,.819,.687,.827,.687,.819,.683,.827,.683,.827,.695,.819,.691,.827,.691,.819,.711,.804,.703,.819,.703,.772,.726,.804,.726,.827,.703,.819,.699,.827,.699,.827,.711,.819,.707,.827,.707,.819,.726,.804,.719,.819,.719,.827,.719,.819,.715,.827,.715,.827,.726,.819,.723,.827,.723,.804,.734,.819,.734,.827,.734,.819,.73,.827,.73,.819,.738,.827,.738,.799,.742,.763,.742,.726,.742,.69,.742,.653,.742,.617,.742,.581,.739,.581,.735,.581,.732,.581,.728,.581,.725,.581,.721,.581,.718,.581,.714,.581,.711,.581,.707,.581,.704,.581,.7,.581,.697,.581,.693,.581,.69,.581,.686,.581,.682,.581,.675,.581,.672,.581,.668,.581,.665,.581,.661,.581,.658,.581,.654,.581,.651,.581,.647,.581,.644,.581,.64,.581,.637,.581,.633,.581,.63,.581,.626,.581,.623,.581,.619,.644,.679,.644,.711,.612,.711,.644,.726,.612,.726,.597,.726,.612,.734,.597,.734,.589,.734,.597,.738,.589,.738,.589,.726,.597,.73,.589,.73,.597,.711,.612,.719,.597,.719,.612,.679,.644,.695,.612,.695,.644,.647,.589,.719,.597,.723,.589,.723,.589,.711,.597,.715,.589,.715,.597,.695,.612,.703,.597,.703,.589,.703,.597,.707,.589,.707,.589,.695,.597,.699,.589,.699,.597,.679,.612,.687,.597,.687,.612,.647,.644,.663,.612,.663,.589,.687,.597,.691,.589,.691,.589,.679,.597,.683,.589,.683,.597,.663,.612,.671,.597,.671,.589,.671,.597,.675,.589,.675,.589,.663,.597,.667,.589,.667,.597,.647,.612,.655,.597,.655,.644,.631,.612,.631,.589,.655,.597,.659,.589,.659,.589,.647,.597,.651,.589,.651,.597,.631,.612,.639,.597,.639,.589,.639,.597,.643,.589,.643,.589,.631,.597,.635,.589,.635,.612,.624,.597,.624,.589,.624,.597,.628,.589,.628,.597,.62,.589,.62,.617,.616,.653,.616,.69,.616,.726,.616,.763,.616,.799,.616,.579,.753,.543,.753,.506,.753,.47,.753,.434,.753,.397,.753,.361,.753,.324,.753,.543,.76,.506,.76,.47,.76,.434,.76,.397,.76,.361,.76,.543,.767,.506,.767,.47,.767,.434,.767,.397,.767,.361,.767,.543,.773,.506,.773,.47,.773,.434,.773,.397,.773,.361,.773,.543,.779,.506,.779,.47,.779,.434,.779,.397,.779,.361,.779,.543,.786,.506,.786,.47,.786,.434,.786,.397,.786,.361,.786,.543,.792,.506,.792,.47,.792,.434,.792,.397,.792,.361,.792,.543,.798,.506,.798,.47,.798,.434,.798,.397,.798,.361,.798,.579,.805,.543,.805,.506,.805,.47,.805,.434,.805,.397,.805,.361,.805,.324,.805,.543,.812,.506,.812,.47,.812,.434,.812,.397,.812,.361,.812,.543,.818,.506,.818,.47,.818,.434,.818,.397,.818,.361,.818,.543,.825,.506,.825,.47,.825,.434,.825,.397,.825,.361,.825,.543,.831,.506,.831,.47,.831,.434,.831,.397,.831,.361,.831,.543,.837,.506,.837,.47,.837,.434,.837,.397,.837,.361,.837,.543,.844,.506,.844,.47,.844,.434,.844,.397,.844,.361,.844,.543,.85,.506,.85,.47,.85,.434,.85,.397,.85,.361,.85,.579,.856,.543,.856,.506,.856,.47,.856,.434,.856,.397,.856,.361,.856,.324,.856,.579,.756,.579,.76,.579,.763,.579,.766,.579,.769,.579,.773,.579,.776,.579,.779,.579,.782,.579,.785,.579,.789,.579,.792,.579,.795,.579,.798,.579,.802,.579,.808,.579,.811,.579,.814,.579,.818,.579,.821,.579,.824,.579,.827,.579,.831,.579,.834,.579,.837,.579,.84,.579,.843,.579,.847,.579,.85,.579,.853,.561,.76,.543,.757,.561,.757,.57,.757,.561,.755,.57,.755,.57,.76,.561,.758,.57,.758,.561,.767,.543,.763,.561,.763,.57,.763,.561,.762,.57,.762,.57,.767,.561,.765,.57,.765,.561,.773,.543,.77,.561,.77,.57,.77,.561,.768,.57,.768,.57,.773,.561,.771,.57,.771,.561,.779,.543,.776,.561,.776,.57,.776,.561,.775,.57,.775,.57,.779,.561,.778,.57,.778,.561,.786,.543,.783,.561,.783,.57,.783,.561,.781,.57,.781,.57,.786,.561,.784,.57,.784,.561,.792,.543,.789,.561,.789,.57,.789,.561,.787,.57,.787,.57,.792,.561,.79,.57,.79,.561,.798,.543,.795,.561,.795,.57,.795,.561,.794,.57,.794,.57,.798,.561,.797,.57,.797,.561,.805,.543,.802,.561,.802,.57,.802,.561,.8,.57,.8,.561,.812,.543,.808,.561,.808,.57,.808,.561,.806,.57,.805,.57,.806,.57,.812,.561,.81,.57,.81,.561,.818,.543,.815,.561,.815,.57,.815,.561,.813,.57,.813,.57,.818,.561,.816,.57,.816,.561,.825,.543,.821,.561,.821,.57,.821,.561,.82,.57,.82,.57,.825,.561,.823,.57,.823,.561,.831,.543,.828,.561,.828,.57,.828,.561,.826,.57,.826,.57,.831,.561,.829,.57,.829,.561,.837,.543,.834,.561,.834,.57,.834,.561,.833,.57,.833,.57,.837,.561,.836,.57,.836,.561,.844,.543,.84,.561,.84,.57,.84,.561,.839,.57,.839,.57,.844,.561,.842,.57,.842,.561,.85,.543,.847,.561,.847,.57,.847,.561,.845,.57,.845,.57,.85,.561,.848,.57,.848,.543,.853,.561,.853,.57,.853,.561,.852,.57,.852,.561,.855,.57,.855,.324,.853,.324,.85,.324,.847,.324,.843,.324,.84,.324,.837,.324,.834,.324,.831,.324,.827,.324,.824,.324,.821,.324,.818,.324,.814,.324,.811,.324,.808,.324,.802,.324,.798,.324,.795,.324,.792,.324,.789,.324,.785,.324,.782,.324,.779,.324,.776,.324,.773,.324,.769,.324,.766,.324,.763,.324,.76,.324,.756,.343,.85,.361,.853,.343,.853,.333,.853,.343,.855,.333,.855,.333,.85,.343,.852,.333,.852,.343,.844,.361,.847,.343,.847,.333,.847,.343,.848,.333,.848,.333,.844,.343,.845,.333,.845,.343,.837,.361,.84,.343,.84,.333,.84,.343,.842,.333,.842,.333,.837,.343,.839,.333,.839,.343,.831,.361,.834,.343,.834,.333,.834,.343,.836,.333,.836,.333,.831,.343,.833,.333,.833,.343,.825,.361,.828,.343,.828,.333,.828,.343,.829,.333,.829,.333,.825,.343,.826,.333,.826,.343,.818,.361,.821,.343,.821,.333,.821,.343,.823,.333,.823,.333,.818,.343,.82,.333,.82,.343,.812,.361,.815,.343,.815,.333,.815,.343,.816,.333,.816,.333,.812,.343,.813,.333,.813,.343,.805,.361,.808,.343,.808,.333,.808,.343,.81,.333,.81,.333,.805,.343,.806,.333,.806,.343,.798,.361,.802,.343,.802,.333,.802,.333,.798,.343,.8,.333,.8,.343,.792,.361,.795,.343,.795,.333,.795,.343,.797,.333,.797,.333,.792,.343,.794,.333,.794,.343,.786,.361,.789,.343,.789,.333,.789,.343,.79,.333,.79,.333,.786,.343,.787,.333,.787,.343,.779,.361,.783,.343,.783,.333,.783,.343,.784,.333,.784,.333,.779,.343,.781,.333,.781,.343,.773,.361,.776,.343,.776,.333,.776,.343,.778,.333,.778,.333,.773,.343,.775,.333,.775,.343,.767,.361,.77,.343,.77,.333,.77,.343,.771,.333,.771,.333,.767,.343,.768,.333,.768,.343,.76,.361,.763,.343,.763,.333,.763,.343,.765,.333,.765,.333,.76,.343,.762,.333,.762,.361,.757,.343,.757,.333,.757,.343,.758,.333,.758,.343,.755,.333,.755,.579,.877,.543,.877,.506,.877,.47,.877,.434,.877,.397,.877,.361,.877,.324,.877,.543,.883,.506,.883,.47,.883,.434,.883,.397,.883,.361,.883,.543,.89,.506,.89,.47,.89,.434,.89,.397,.89,.361,.89,.543,.896,.506,.896,.47,.896,.434,.896,.397,.896,.361,.896,.543,.903,.506,.903,.47,.903,.434,.903,.397,.903,.361,.903,.543,.909,.506,.909,.47,.909,.434,.909,.397,.909,.361,.909,.543,.915,.506,.915,.47,.915,.434,.915,.397,.915,.361,.915,.543,.922,.506,.922,.47,.922,.434,.922,.397,.922,.361,.922,.579,.928,.543,.928,.506,.928,.47,.928,.434,.928,.397,.928,.361,.928,.324,.928,.543,.935,.506,.935,.47,.935,.434,.935,.397,.935,.361,.935,.543,.941,.506,.941,.47,.941,.434,.941,.397,.941,.361,.941,.543,.948,.506,.948,.47,.948,.434,.948,.397,.948,.361,.948,.543,.954,.506,.954,.47,.954,.434,.954,.397,.954,.361,.954,.543,.961,.506,.961,.47,.961,.434,.961,.397,.961,.361,.961,.543,.967,.506,.967,.47,.967,.434,.967,.397,.967,.361,.967,.543,.973,.506,.973,.47,.973,.434,.973,.397,.973,.361,.973,.579,.98,.543,.98,.506,.98,.47,.98,.434,.98,.397,.98,.361,.98,.324,.98,.579,.88,.579,.883,.579,.886,.579,.89,.579,.893,.579,.896,.579,.899,.579,.902,.579,.906,.579,.909,.579,.912,.579,.915,.579,.919,.579,.922,.579,.925,.579,.931,.579,.935,.579,.938,.579,.941,.579,.944,.579,.948,.579,.951,.579,.954,.579,.957,.579,.96,.579,.964,.579,.967,.579,.97,.579,.973,.579,.977,.561,.883,.543,.88,.561,.88,.57,.88,.561,.878,.57,.878,.57,.883,.561,.882,.57,.882,.561,.89,.543,.887,.561,.887,.57,.887,.561,.885,.57,.885,.57,.89,.561,.888,.57,.888,.561,.896,.543,.893,.561,.893,.57,.893,.561,.892,.57,.892,.57,.896,.561,.895,.57,.895,.561,.903,.543,.9,.561,.9,.57,.9,.561,.898,.57,.898,.57,.903,.561,.901,.57,.901,.561,.909,.543,.906,.561,.906,.57,.906,.561,.904,.57,.904,.57,.909,.561,.908,.57,.908,.561,.915,.543,.912,.561,.912,.57,.912,.561,.911,.57,.911,.57,.915,.561,.914,.57,.914,.561,.922,.543,.919,.561,.919,.57,.919,.561,.917,.57,.917,.57,.922,.561,.92,.57,.92,.561,.928,.543,.925,.561,.925,.57,.925,.561,.923,.57,.923,.561,.935,.543,.932,.561,.932,.57,.932,.561,.93,.57,.928,.57,.93,.57,.935,.561,.933,.57,.933,.561,.941,.543,.938,.561,.938,.57,.938,.561,.937,.57,.937,.57,.941,.561,.94,.57,.94,.561,.948,.543,.945,.561,.945,.57,.945,.561,.943,.57,.943,.57,.948,.561,.946,.57,.946,.561,.954,.543,.951,.561,.951,.57,.951,.561,.95,.57,.95,.57,.954,.561,.953,.57,.953,.561,.961,.543,.957,.561,.957,.57,.957,.561,.956,.57,.956,.57,.961,.561,.959,.57,.959,.561,.967,.543,.964,.561,.964,.57,.964,.561,.962,.57,.962,.57,.967,.561,.965,.57,.965,.561,.973,.543,.97,.561,.97,.57,.97,.561,.969,.57,.969,.57,.973,.561,.972,.57,.972,.543,.977,.561,.977,.57,.977,.561,.975,.57,.975,.561,.978,.57,.978,.324,.977,.324,.973,.324,.97,.324,.967,.324,.964,.324,.96,.324,.957,.324,.954,.324,.951,.324,.948,.324,.944,.324,.941,.324,.938,.324,.935,.324,.931,.324,.925,.324,.922,.324,.919,.324,.915,.324,.912,.324,.909,.324,.906,.324,.902,.324,.899,.324,.896,.324,.893,.324,.89,.324,.886,.324,.883,.324,.88,.343,.973,.361,.977,.343,.977,.333,.977,.343,.978,.333,.978,.333,.973,.343,.975,.333,.975,.343,.967,.361,.97,.343,.97,.333,.97,.343,.972,.333,.972,.333,.967,.343,.969,.333,.969,.343,.961,.361,.964,.343,.964,.333,.964,.343,.965,.333,.965,.333,.961,.343,.962,.333,.962,.343,.954,.361,.957,.343,.957,.333,.957,.343,.959,.333,.959,.333,.954,.343,.956,.333,.956,.343,.948,.361,.951,.343,.951,.333,.951,.343,.953,.333,.953,.333,.948,.343,.95,.333,.95,.343,.941,.361,.945,.343,.945,.333,.945,.343,.946,.333,.946,.333,.941,.343,.943,.333,.943,.343,.935,.361,.938,.343,.938,.333,.938,.343,.94,.333,.94,.333,.935,.343,.937,.333,.937,.343,.928,.361,.932,.343,.932,.333,.932,.343,.933,.333,.933,.333,.928,.343,.93,.333,.93,.343,.922,.361,.925,.343,.925,.333,.925,.333,.922,.343,.923,.333,.923,.343,.915,.361,.919,.343,.919,.333,.919,.343,.92,.333,.92,.333,.915,.343,.917,.333,.917,.343,.909,.361,.912,.343,.912,.333,.912,.343,.914,.333,.914,.333,.909,.343,.911,.333,.911,.343,.903,.361,.906,.343,.906,.333,.906,.343,.908,.333,.908,.333,.903,.343,.904,.333,.904,.343,.896,.361,.9,.343,.9,.333,.9,.343,.901,.333,.901,.333,.896,.343,.898,.333,.898,.343,.89,.361,.893,.343,.893,.333,.893,.343,.895,.333,.895,.333,.89,.343,.892,.333,.892,.343,.883,.361,.887,.343,.887,.333,.887,.343,.888,.333,.888,.333,.883,.343,.885,.333,.885,.361,.88,.343,.88,.333,.88,.343,.882,.333,.882,.343,.878,.333,.878,.835,.512,.799,.512,.763,.512,.726,.512,.69,.512,.653,.512,.617,.512,.581,.512,.799,.519,.763,.519,.726,.519,.69,.519,.653,.519,.617,.519,.799,.526,.763,.526,.726,.526,.69,.526,.653,.526,.617,.526,.799,.532,.763,.532,.726,.532,.69,.532,.653,.532,.617,.532,.799,.538,.763,.538,.726,.538,.69,.538,.653,.538,.617,.538,.799,.545,.763,.545,.726,.545,.69,.545,.653,.545,.617,.545,.799,.551,.763,.551,.726,.551,.69,.551,.653,.551,.617,.551,.799,.557,.763,.557,.726,.557,.69,.557,.653,.557,.617,.557,.835,.563,.799,.563,.763,.563,.726,.563,.69,.563,.653,.563,.617,.563,.581,.563,.799,.57,.763,.57,.726,.57,.69,.57,.653,.57,.617,.57,.799,.576,.763,.576,.726,.576,.69,.576,.653,.576,.617,.576,.799,.583,.763,.583,.726,.583,.69,.583,.653,.583,.617,.583,.799,.589,.763,.589,.726,.589,.69,.589,.653,.589,.617,.589,.799,.595,.763,.595,.726,.595,.69,.595,.653,.595,.617,.595,.799,.602,.763,.602,.726,.602,.69,.602,.653,.602,.617,.602,.799,.608,.763,.608,.726,.608,.69,.608,.653,.608,.617,.608,.835,.614,.799,.614,.763,.614,.726,.614,.69,.614,.653,.614,.617,.614,.581,.614,.835,.516,.835,.519,.835,.522,.835,.525,.835,.528,.835,.532,.835,.535,.835,.538,.835,.541,.835,.544,.835,.547,.835,.551,.835,.554,.835,.557,.835,.56,.835,.567,.835,.57,.835,.573,.835,.576,.835,.579,.835,.582,.835,.586,.835,.589,.835,.592,.835,.595,.835,.598,.835,.601,.835,.605,.835,.608,.835,.611,.817,.519,.799,.516,.817,.516,.826,.516,.817,.514,.826,.514,.826,.519,.817,.517,.826,.517,.817,.526,.799,.522,.817,.522,.826,.522,.817,.521,.826,.521,.826,.526,.817,.524,.826,.524,.817,.532,.799,.529,.817,.529,.826,.529,.817,.527,.826,.527,.826,.532,.817,.53,.826,.53,.817,.538,.799,.535,.817,.535,.826,.535,.817,.534,.826,.534,.826,.538,.817,.537,.826,.537,.817,.545,.799,.541,.817,.541,.826,.541,.817,.54,.826,.54,.826,.545,.817,.543,.826,.543,.817,.551,.799,.548,.817,.548,.826,.548,.817,.546,.826,.546,.826,.551,.817,.549,.826,.549,.817,.557,.799,.554,.817,.554,.826,.554,.817,.552,.826,.552,.826,.557,.817,.555,.826,.555,.817,.563,.799,.56,.817,.56,.826,.56,.817,.559,.826,.559,.817,.57,.799,.567,.817,.567,.826,.567,.817,.565,.826,.563,.826,.565,.826,.57,.817,.568,.826,.568,.817,.576,.799,.573,.817,.573,.826,.573,.817,.572,.826,.572,.826,.576,.817,.575,.826,.575,.817,.583,.799,.58,.817,.58,.826,.58,.817,.578,.826,.578,.826,.583,.817,.581,.826,.581,.817,.589,.799,.586,.817,.586,.826,.586,.817,.584,.826,.584,.826,.589,.817,.587,.826,.587,.817,.595,.799,.592,.817,.592,.826,.592,.817,.591,.826,.591,.826,.595,.817,.594,.826,.594,.817,.602,.799,.598,.817,.598,.826,.598,.817,.597,.826,.597,.826,.602,.817,.6,.826,.6,.817,.608,.799,.605,.817,.605,.826,.605,.817,.603,.826,.603,.826,.608,.817,.606,.826,.606,.799,.611,.817,.611,.826,.611,.817,.609,.826,.609,.817,.613,.826,.613,.581,.611,.581,.608,.581,.605,.581,.601,.581,.598,.581,.595,.581,.592,.581,.589,.581,.586,.581,.582,.581,.579,.581,.576,.581,.573,.581,.57,.581,.567,.581,.56,.581,.557,.581,.554,.581,.551,.581,.547,.581,.544,.581,.541,.581,.538,.581,.535,.581,.532,.581,.528,.581,.525,.581,.522,.581,.519,.581,.516,.599,.608,.617,.611,.599,.611,.59,.611,.599,.613,.59,.613,.59,.608,.599,.609,.59,.609,.599,.602,.617,.605,.599,.605,.59,.605,.599,.606,.59,.606,.59,.602,.599,.603,.59,.603,.599,.595,.617,.598,.599,.598,.59,.598,.599,.6,.59,.6,.59,.595,.599,.597,.59,.597,.599,.589,.617,.592,.599,.592,.59,.592,.599,.594,.59,.594,.59,.589,.599,.591,.59,.591,.599,.583,.617,.586,.599,.586,.59,.586,.599,.587,.59,.587,.59,.583,.599,.584,.59,.584,.599,.576,.617,.58,.599,.58,.59,.58,.599,.581,.59,.581,.59,.576,.599,.578,.59,.578,.599,.57,.617,.573,.599,.573,.59,.573,.599,.575,.59,.575,.59,.57,.599,.572,.59,.572,.599,.563,.617,.567,.599,.567,.59,.567,.599,.568,.59,.568,.59,.563,.599,.565,.59,.565,.599,.557,.617,.56,.599,.56,.59,.56,.59,.557,.599,.559,.59,.559,.599,.551,.617,.554,.599,.554,.59,.554,.599,.555,.59,.555,.59,.551,.599,.552,.59,.552,.599,.545,.617,.548,.599,.548,.59,.548,.599,.549,.59,.549,.59,.545,.599,.546,.59,.546,.599,.538,.617,.541,.599,.541,.59,.541,.599,.543,.59,.543,.59,.538,.599,.54,.59,.54,.599,.532,.617,.535,.599,.535,.59,.535,.599,.537,.59,.537,.59,.532,.599,.534,.59,.534,.599,.526,.617,.529,.599,.529,.59,.529,.599,.53,.59,.53,.59,.526,.599,.527,.59,.527,.599,.519,.617,.522,.599,.522,.59,.522,.599,.524,.59,.524,.59,.519,.599,.521,.59,.521,.617,.516,.599,.516,.59,.516,.599,.517,.59,.517,.599,.514,.59,.514,.226,.5,.226,.537,.226,.573,.226,.61,.226,.646,.226,.683,.226,.72,.226,.756,.233,.537,.233,.573,.233,.61,.233,.646,.233,.683,.233,.72,.239,.537,.239,.573,.239,.61,.239,.646,.239,.683,.239,.72,.245,.537,.245,.573,.245,.61,.245,.646,.245,.683,.245,.72,.251,.537,.251,.573,.251,.61,.251,.646,.251,.683,.251,.72,.257,.537,.257,.573,.257,.61,.257,.646,.257,.683,.257,.72,.263,.537,.263,.573,.263,.61,.263,.646,.263,.683,.263,.72,.269,.537,.269,.573,.269,.61,.269,.646,.269,.683,.269,.72,.275,.5,.275,.537,.275,.573,.275,.61,.275,.646,.275,.683,.275,.72,.275,.756,.281,.537,.281,.573,.281,.61,.281,.646,.281,.683,.281,.72,.287,.537,.287,.573,.287,.61,.287,.646,.287,.683,.287,.72,.293,.537,.293,.573,.293,.61,.293,.646,.293,.683,.293,.72,.299,.537,.299,.573,.299,.61,.299,.646,.299,.683,.299,.72,.305,.537,.305,.573,.305,.61,.305,.646,.305,.683,.305,.72,.311,.537,.311,.573,.311,.61,.311,.646,.311,.683,.311,.72,.317,.537,.317,.573,.317,.61,.317,.646,.317,.683,.317,.72,.323,.5,.323,.537,.323,.573,.323,.61,.323,.646,.323,.683,.323,.72,.323,.756,.229,.5,.232,.5,.235,.5,.238,.5,.241,.5,.244,.5,.247,.5,.25,.5,.253,.5,.256,.5,.259,.5,.262,.5,.265,.5,.269,.5,.272,.5,.278,.5,.281,.5,.284,.5,.287,.5,.29,.5,.293,.5,.296,.5,.299,.5,.302,.5,.305,.5,.308,.5,.311,.5,.314,.5,.317,.5,.32,.5,.233,.518,.229,.537,.229,.518,.229,.509,.228,.518,.228,.509,.233,.509,.231,.518,.231,.509,.239,.518,.236,.537,.236,.518,.236,.509,.234,.518,.234,.509,.239,.509,.237,.518,.237,.509,.245,.518,.242,.537,.242,.518,.242,.509,.24,.518,.24,.509,.245,.509,.243,.518,.243,.509,.251,.518,.248,.537,.248,.518,.248,.509,.246,.518,.246,.509,.251,.509,.249,.518,.249,.509,.257,.518,.254,.537,.254,.518,.254,.509,.252,.518,.252,.509,.257,.509,.255,.518,.255,.509,.263,.518,.26,.537,.26,.518,.26,.509,.258,.518,.258,.509,.263,.509,.261,.518,.261,.509,.269,.518,.266,.537,.266,.518,.266,.509,.264,.518,.264,.509,.269,.509,.267,.518,.267,.509,.275,.518,.272,.537,.272,.518,.272,.509,.27,.518,.27,.509,.275,.509,.273,.518,.273,.509,.281,.518,.278,.537,.278,.518,.278,.509,.276,.518,.276,.509,.281,.509,.279,.518,.279,.509,.287,.518,.284,.537,.284,.518,.284,.509,.282,.518,.282,.509,.287,.509,.285,.518,.285,.509,.293,.518,.29,.537,.29,.518,.29,.509,.289,.518,.289,.509,.293,.509,.292,.518,.292,.509,.299,.518,.296,.537,.296,.518,.296,.509,.295,.518,.295,.509,.299,.509,.298,.518,.298,.509,.305,.518,.302,.537,.302,.518,.302,.509,.301,.518,.301,.509,.305,.509,.303,.518,.303,.509,.311,.518,.308,.537,.308,.518,.308,.509,.306,.518,.306,.509,.311,.509,.309,.518,.309,.509,.317,.518,.314,.537,.314,.518,.314,.509,.312,.518,.312,.509,.317,.509,.315,.518,.315,.509,.32,.537,.32,.518,.32,.509,.318,.518,.318,.509,.321,.518,.321,.509,.32,.756,.317,.756,.314,.756,.311,.756,.308,.756,.305,.756,.302,.756,.299,.756,.296,.756,.293,.756,.29,.756,.287,.756,.284,.756,.281,.756,.278,.756,.272,.756,.269,.756,.265,.756,.262,.756,.259,.756,.256,.756,.253,.756,.25,.756,.247,.756,.244,.756,.241,.756,.238,.756,.235,.756,.232,.756,.229,.756,.317,.738,.32,.72,.32,.738,.32,.747,.321,.738,.321,.747,.317,.747,.318,.738,.318,.747,.311,.738,.314,.72,.314,.738,.314,.747,.315,.738,.315,.747,.311,.747,.312,.738,.312,.747,.305,.738,.308,.72,.308,.738,.308,.747,.309,.738,.309,.747,.305,.747,.306,.738,.306,.747,.299,.738,.302,.72,.302,.738,.302,.747,.303,.738,.303,.747,.299,.747,.301,.738,.301,.747,.293,.738,.296,.72,.296,.738,.296,.747,.298,.738,.298,.747,.293,.747,.295,.738,.295,.747,.287,.738,.29,.72,.29,.738,.29,.747,.292,.738,.292,.747,.287,.747,.289,.738,.289,.747,.281,.738,.284,.72,.284,.738,.284,.747,.285,.738,.285,.747,.281,.747,.282,.738,.282,.747,.275,.738,.278,.72,.278,.738,.278,.747,.279,.738,.279,.747,.275,.747,.276,.738,.276,.747,.269,.738,.272,.72,.272,.738,.272,.747,.273,.738,.273,.747,.269,.747,.27,.738,.27,.747,.263,.738,.266,.72,.266,.738,.266,.747,.267,.738,.267,.747,.263,.747,.264,.738,.264,.747,.257,.738,.26,.72,.26,.738,.26,.747,.261,.738,.261,.747,.257,.747,.258,.738,.258,.747,.251,.738,.254,.72,.254,.738,.254,.747,.255,.738,.255,.747,.251,.747,.252,.738,.252,.747,.245,.738,.248,.72,.248,.738,.248,.747,.249,.738,.249,.747,.245,.747,.246,.738,.246,.747,.239,.738,.242,.72,.242,.738,.242,.747,.243,.738,.243,.747,.239,.747,.24,.738,.24,.747,.233,.738,.236,.72,.236,.738,.236,.747,.237,.738,.237,.747,.233,.747,.234,.738,.234,.747,.229,.72,.229,.738,.229,.747,.231,.738,.231,.747,.228,.738,.228,.747,.128,.5,.128,.537,.128,.573,.128,.61,.128,.646,.128,.683,.128,.72,.128,.756,.134,.537,.134,.573,.134,.61,.134,.646,.134,.683,.134,.72,.141,.537,.141,.573,.141,.61,.141,.646,.141,.683,.141,.72,.147,.537,.147,.573,.147,.61,.147,.646,.147,.683,.147,.72,.153,.537,.153,.573,.153,.61,.153,.646,.153,.683,.153,.72,.159,.537,.159,.573,.159,.61,.159,.646,.159,.683,.159,.72,.165,.537,.165,.573,.165,.61,.165,.646,.165,.683,.165,.72,.17,.537,.17,.573,.17,.61,.17,.646,.17,.683,.17,.72,.176,.5,.176,.537,.176,.573,.176,.61,.176,.646,.176,.683,.176,.72,.176,.756,.183,.537,.183,.573,.183,.61,.183,.646,.183,.683,.183,.72,.189,.537,.189,.573,.189,.61,.189,.646,.189,.683,.189,.72,.195,.537,.195,.573,.195,.61,.195,.646,.195,.683,.195,.72,.201,.537,.201,.573,.201,.61,.201,.646,.201,.683,.201,.72,.207,.537,.207,.573,.207,.61,.207,.646,.207,.683,.207,.72,.213,.537,.213,.573,.213,.61,.213,.646,.213,.683,.213,.72,.219,.537,.219,.573,.219,.61,.219,.646,.219,.683,.219,.72,.225,.5,.225,.537,.225,.573,.225,.61,.225,.646,.225,.683,.225,.72,.225,.756,.131,.5,.134,.5,.137,.5,.14,.5,.143,.5,.146,.5,.149,.5,.152,.5,.155,.5,.158,.5,.161,.5,.164,.5,.167,.5,.17,.5,.173,.5,.179,.5,.182,.5,.186,.5,.189,.5,.192,.5,.195,.5,.198,.5,.201,.5,.204,.5,.207,.5,.21,.5,.213,.5,.216,.5,.219,.5,.222,.5,.134,.518,.131,.537,.131,.518,.131,.509,.13,.518,.13,.509,.134,.509,.133,.518,.133,.509,.141,.518,.138,.537,.138,.518,.138,.509,.136,.518,.136,.509,.141,.509,.139,.518,.139,.509,.147,.518,.144,.537,.144,.518,.144,.509,.142,.518,.142,.509,.147,.509,.145,.518,.145,.509,.153,.518,.15,.537,.15,.518,.15,.509,.148,.518,.148,.509,.153,.509,.151,.518,.151,.509,.159,.518,.156,.537,.156,.518,.156,.509,.154,.518,.154,.509,.159,.509,.157,.518,.157,.509,.165,.518,.162,.537,.162,.518,.162,.509,.16,.518,.16,.509,.165,.509,.163,.518,.163,.509,.17,.518,.167,.537,.167,.518,.167,.509,.166,.518,.166,.509,.17,.509,.169,.518,.169,.509,.176,.518,.173,.537,.173,.518,.173,.509,.172,.518,.172,.509,.176,.509,.175,.518,.175,.509,.183,.518,.18,.537,.18,.518,.18,.509,.178,.518,.178,.509,.183,.509,.181,.518,.181,.509,.189,.518,.186,.537,.186,.518,.186,.509,.184,.518,.184,.509,.189,.509,.187,.518,.187,.509,.195,.518,.192,.537,.192,.518,.192,.509,.19,.518,.19,.509,.195,.509,.193,.518,.193,.509,.201,.518,.198,.537,.198,.518,.198,.509,.196,.518,.196,.509,.201,.509,.199,.518,.199,.509,.207,.518,.204,.537,.204,.518,.204,.509,.202,.518,.202,.509,.207,.509,.205,.518,.205,.509,.213,.518,.21,.537,.21,.518,.21,.509,.208,.518,.208,.509,.213,.509,.211,.518,.211,.509,.219,.518,.216,.537,.216,.518,.216,.509,.214,.518,.214,.509,.219,.509,.217,.518,.217,.509,.222,.537,.222,.518,.222,.509,.22,.518,.22,.509,.223,.518,.223,.509,.222,.756,.219,.756,.216,.756,.213,.756,.21,.756,.207,.756,.204,.756,.201,.756,.198,.756,.195,.756,.192,.756,.189,.756,.186,.756,.182,.756,.179,.756,.173,.756,.17,.756,.167,.756,.164,.756,.161,.756,.158,.756,.155,.756,.152,.756,.149,.756,.146,.756,.143,.756,.14,.756,.137,.756,.134,.756,.131,.756,.219,.738,.222,.72,.222,.738,.222,.747,.223,.738,.223,.747,.219,.747,.22,.738,.22,.747,.213,.738,.216,.72,.216,.738,.216,.747,.217,.738,.217,.747,.213,.747,.214,.738,.214,.747,.207,.738,.21,.72,.21,.738,.21,.747,.211,.738,.211,.747,.207,.747,.208,.738,.208,.747,.201,.738,.204,.72,.204,.738,.204,.747,.205,.738,.205,.747,.201,.747,.202,.738,.202,.747,.195,.738,.198,.72,.198,.738,.198,.747,.199,.738,.199,.747,.195,.747,.196,.738,.196,.747,.189,.738,.192,.72,.192,.738,.192,.747,.193,.738,.193,.747,.189,.747,.19,.738,.19,.747,.183,.738,.186,.72,.186,.738,.186,.747,.187,.738,.187,.747,.183,.747,.184,.738,.184,.747,.176,.738,.18,.72,.18,.738,.18,.747,.181,.738,.181,.747,.176,.747,.178,.738,.178,.747,.17,.738,.173,.72,.173,.738,.173,.747,.175,.738,.175,.747,.17,.747,.172,.738,.172,.747,.165,.738,.167,.72,.167,.738,.167,.747,.169,.738,.169,.747,.165,.747,.166,.738,.166,.747,.159,.738,.162,.72,.162,.738,.162,.747,.163,.738,.163,.747,.159,.747,.16,.738,.16,.747,.153,.738,.156,.72,.156,.738,.156,.747,.157,.738,.157,.747,.153,.747,.154,.738,.154,.747,.147,.738,.15,.72,.15,.738,.15,.747,.151,.738,.151,.747,.147,.747,.148,.738,.148,.747,.141,.738,.144,.72,.144,.738,.144,.747,.145,.738,.145,.747,.141,.747,.142,.738,.142,.747,.134,.738,.138,.72,.138,.738,.138,.747,.139,.738,.139,.747,.134,.747,.136,.738,.136,.747,.131,.72,.131,.738,.131,.747,.133,.738,.133,.747,.13,.738,.13,.747,.019,0,.019,0,.019,.014,.019,.028,.019,.028,.019,.1,.019,.1,.019,.114,.019,.114,.019,.128,.019,.128,.019,.142,.019,.142,.019,.228,.019,.242,.019,.256,.019,.256,.019,.004,.019,.007,.019,.011,.019,.018,.019,.021,.019,.025,.019,.032,.019,.036,.019,.039,.019,.043,.019,.046,.019,.05,.019,.053,.019,.057,.019,.061,.019,.064,.019,.068,.019,.071,.019,.075,.019,.078,.019,.082,.019,.085,.019,.089,.019,.093,.019,.096,.019,.103,.019,.107,.019,.11,.019,.117,.019,.121,.019,.125,.019,.132,.019,.135,.019,.139,.019,.146,.019,.149,.019,.153,.019,.157,.019,.16,.019,.164,.019,.167,.019,.171,.019,.174,.019,.178,.019,.182,.019,.185,.019,.189,.019,.192,.019,.196,.019,.199,.019,.203,.019,.206,.019,.21,.019,.214,.019,.217,.019,.221,.019,.224,.019,.231,.019,.235,.019,.238,.019,.246,.019,.249,.019,.253,.019,.253,.019,.249,.019,.246,.019,.242,.019,.238,.019,.235,.019,.231,.019,.228,.019,.224,.019,.221,.019,.217,.019,.214,.019,.21,.019,.206,.019,.203,.019,.199,.019,.196,.019,.192,.019,.189,.019,.185,.019,.182,.019,.178,.019,.174,.019,.171,.019,.167,.019,.164,.019,.16,.019,.157,.019,.153,.019,.149,.019,.146,.019,.139,.019,.135,.019,.132,.019,.125,.019,.121,.019,.117,.019,.11,.019,.107,.019,.103,.019,.096,.019,.093,.019,.089,.019,.085,.019,.082,.019,.078,.019,.075,.019,.071,.019,.068,.019,.064,.019,.061,.019,.057,.019,.053,.019,.05,.019,.046,.019,.043,.019,.039,.019,.036,.019,.032,.019,.025,.019,.021,.019,.018,.019,.014,.019,.011,.019,.007,.019,.004,.016,0,.015,0,.015,.028,.016,.043,.015,.057,.016,.071,.015,.071,.016,.085,.015,.085,.016,.1,.015,.1,.016,.114,.015,.114,.016,.128,.015,.128,.016,.004,.016,.007,.016,.011,.016,.014,.016,.018,.016,.021,.016,.025,.016,.028,.016,.032,.016,.036,.016,.039,.016,.046,.016,.05,.016,.053,.016,.057,.016,.061,.016,.064,.016,.068,.016,.075,.016,.078,.016,.082,.016,.089,.016,.093,.016,.096,.016,.103,.016,.107,.016,.11,.016,.117,.016,.121,.016,.125,.015,.125,.015,.121,.015,.117,.015,.11,.015,.107,.015,.103,.015,.096,.015,.093,.015,.089,.015,.082,.015,.078,.015,.075,.015,.068,.015,.064,.015,.061,.015,.053,.015,.05,.015,.046,.015,.043,.015,.039,.015,.036,.015,.032,.015,.025,.015,.021,.015,.018,.015,.014,.015,.011,.015,.007,.015,.004,.006,0,.006,0,.006,.052,.006,.052,.006,.103,.006,.103,.006,.003,.006,.006,.006,.01,.006,.013,.006,.016,.006,.019,.006,.023,.006,.026,.006,.029,.006,.032,.006,.035,.006,.039,.006,.042,.006,.045,.006,.048,.006,.055,.006,.058,.006,.061,.006,.064,.006,.068,.006,.071,.006,.074,.006,.077,.006,.081,.006,.084,.006,.087,.006,.09,.006,.093,.006,.097,.006,.1,.006,.1,.006,.097,.006,.093,.006,.09,.006,.087,.006,.084,.006,.081,.006,.077,.006,.074,.006,.071,.006,.068,.006,.064,.006,.061,.006,.058,.006,.055,.006,.048,.006,.045,.006,.042,.006,.039,.006,.035,.006,.032,.006,.029,.006,.026,.006,.023,.006,.019,.006,.016,.006,.013,.006,.01,.006,.006,.006,.003,.015,0,.015,0,.015,.028,.015,.043,.015,.057,.015,.071,.015,.071,.015,.085,.015,.085,.015,.1,.015,.1,.015,.114,.015,.114,.015,.128,.015,.128,.015,.004,.015,.007,.015,.011,.015,.014,.015,.018,.015,.021,.015,.025,.015,.028,.015,.032,.015,.036,.015,.039,.015,.046,.015,.05,.015,.053,.015,.057,.015,.061,.015,.064,.015,.068,.015,.075,.015,.078,.015,.082,.015,.089,.015,.093,.015,.096,.015,.103,.015,.107,.015,.11,.015,.117,.015,.121,.015,.125,.015,.125,.015,.121,.015,.117,.015,.11,.015,.107,.015,.103,.015,.096,.015,.093,.015,.089,.015,.082,.015,.078,.015,.075,.015,.068,.015,.064,.015,.061,.015,.053,.015,.05,.015,.046,.015,.043,.015,.039,.015,.036,.015,.032,.015,.025,.015,.021,.015,.018,.015,.014,.015,.011,.015,.007,.015,.004,.002,0,.001,0,.002,.101,.001,.101,.002,.003,.002,.006,.002,.009,.002,.013,.002,.016,.002,.019,.002,.022,.002,.025,.002,.028,.002,.031,.002,.035,.002,.038,.002,.041,.002,.044,.002,.047,.002,.05,.002,.053,.002,.057,.002,.06,.002,.063,.002,.066,.002,.069,.002,.072,.002,.075,.002,.079,.002,.082,.002,.085,.002,.088,.002,.091,.002,.094,.002,.097,.001,.097,.001,.094,.001,.091,.001,.088,.001,.085,.001,.082,.001,.079,.001,.075,.001,.072,.001,.069,.001,.066,.001,.063,.001,.06,.001,.057,.001,.053,.001,.05,.001,.047,.001,.044,.001,.041,.001,.038,.001,.035,.001,.031,.001,.028,.001,.025,.001,.022,.001,.019,.001,.016,.001,.013,.001,.009,.001,.006,.001,.003,.011,0,.011,0,.011,.028,.011,.028,.011,.043,.011,.057,.011,.071,.011,.071,.011,.085,.011,.085,.011,.1,.011,.1,.011,.114,.011,.114,.011,.128,.011,.128,.011,.004,.011,.007,.011,.011,.011,.014,.011,.018,.011,.021,.011,.025,.011,.032,.011,.036,.011,.039,.011,.046,.011,.05,.011,.053,.011,.057,.011,.061,.011,.064,.011,.068,.011,.075,.011,.078,.011,.082,.011,.089,.011,.093,.011,.096,.011,.103,.011,.107,.011,.11,.011,.117,.011,.121,.011,.125,.011,.125,.011,.121,.011,.117,.011,.11,.011,.107,.011,.103,.011,.096,.011,.093,.011,.089,.011,.082,.011,.078,.011,.075,.011,.068,.011,.064,.011,.061,.011,.053,.011,.05,.011,.046,.011,.043,.011,.039,.011,.036,.011,.032,.011,.025,.011,.021,.011,.018,.011,.014,.011,.011,.011,.007,.011,.004,.014,0,.013,0,.014,.052,.013,.052,.014,.103,.013,.103,.014,.003,.014,.006,.014,.01,.014,.013,.014,.016,.014,.019,.014,.023,.014,.026,.014,.029,.014,.032,.014,.035,.014,.039,.014,.042,.014,.045,.014,.048,.014,.055,.014,.058,.014,.061,.014,.064,.014,.068,.014,.071,.014,.074,.014,.077,.014,.081,.014,.084,.014,.087,.014,.09,.014,.093,.014,.097,.014,.1,.013,.1,.013,.097,.013,.093,.013,.09,.013,.087,.013,.084,.013,.081,.013,.077,.013,.074,.013,.071,.013,.068,.013,.064,.013,.061,.013,.058,.013,.055,.013,.048,.013,.045,.013,.042,.013,.039,.013,.035,.013,.032,.013,.029,.013,.026,.013,.023,.013,.019,.013,.016,.013,.013,.013,.01,.013,.006,.013,.003,.011,0,.01,0,.01,.028,.01,.057,.011,.071,.01,.071,.011,.085,.01,.085,.011,.1,.01,.1,.011,.114,.01,.114,.011,.128,.01,.128,.011,.004,.011,.007,.011,.011,.011,.014,.011,.018,.011,.021,.011,.025,.011,.028,.011,.032,.011,.036,.011,.039,.011,.043,.011,.046,.011,.05,.011,.053,.011,.057,.011,.061,.011,.064,.011,.068,.011,.075,.011,.078,.011,.082,.011,.089,.011,.093,.011,.096,.011,.103,.011,.107,.011,.11,.011,.117,.011,.121,.011,.125,.01,.125,.01,.121,.01,.117,.01,.11,.01,.107,.01,.103,.01,.096,.01,.093,.01,.089,.01,.082,.01,.078,.01,.075,.01,.068,.01,.064,.01,.061,.01,.053,.01,.05,.01,.046,.01,.043,.01,.039,.01,.036,.01,.032,.01,.025,.01,.021,.01,.018,.01,.014,.01,.011,.01,.007,.01,.004,.001,0,0,0,.001,.101,0,.101,.001,.003,.001,.006,.001,.009,.001,.013,.001,.016,.001,.019,.001,.022,.001,.025,.001,.028,.001,.031,.001,.035,.001,.038,.001,.041,.001,.044,.001,.047,.001,.05,.001,.053,.001,.057,.001,.06,.001,.063,.001,.066,.001,.069,.001,.072,.001,.075,.001,.079,.001,.082,.001,.085,.001,.088,.001,.091,.001,.094,.001,.097,0,.097,0,.094,0,.091,0,.088,0,.085,0,.082,0,.079,0,.075,0,.072,0,.069,0,.066,0,.063,0,.06,0,.057,0,.053,0,.05,0,.047,0,.044,0,.041,0,.038,0,.035,0,.031,0,.028,0,.025,0,.022,0,.019,0,.016,0,.013,0,.009,0,.006,0,.003,.013,0,.012,0,.012,.028,.013,.043,.012,.057,.013,.071,.012,.071,.013,.085,.012,.085,.013,.1,.012,.1,.013,.114,.012,.114,.013,.128,.012,.128,.013,.004,.013,.007,.013,.011,.013,.014,.013,.018,.013,.021,.013,.025,.013,.028,.013,.032,.013,.036,.013,.039,.013,.046,.013,.05,.013,.053,.013,.057,.013,.061,.013,.064,.013,.068,.013,.075,.013,.078,.013,.082,.013,.089,.013,.093,.013,.096,.013,.103,.013,.107,.013,.11,.013,.117,.013,.121,.013,.125,.012,.125,.012,.121,.012,.117,.012,.11,.012,.107,.012,.103,.012,.096,.012,.093,.012,.089,.012,.082,.012,.078,.012,.075,.012,.068,.012,.064,.012,.061,.012,.053,.012,.05,.012,.046,.012,.043,.012,.039,.012,.036,.012,.032,.012,.025,.012,.021,.012,.018,.012,.014,.012,.011,.012,.007,.012,.004,.005,0,.004,0,.005,.052,.004,.052,.005,.103,.004,.103,.005,.003,.005,.006,.005,.01,.005,.013,.005,.016,.005,.019,.005,.023,.005,.026,.005,.029,.005,.032,.005,.035,.005,.039,.005,.042,.005,.045,.005,.048,.005,.055,.005,.058,.005,.061,.005,.064,.005,.068,.005,.071,.005,.074,.005,.077,.005,.081,.005,.084,.005,.087,.005,.09,.005,.093,.005,.097,.005,.1,.004,.1,.004,.097,.004,.093,.004,.09,.004,.087,.004,.084,.004,.081,.004,.077,.004,.074,.004,.071,.004,.068,.004,.064,.004,.061,.004,.058,.004,.055,.004,.048,.004,.045,.004,.042,.004,.039,.004,.035,.004,.032,.004,.029,.004,.026,.004,.023,.004,.019,.004,.016,.004,.013,.004,.01,.004,.006,.004,.003,.012,0,.011,0,.011,.028,.012,.043,.011,.057,.012,.071,.011,.071,.012,.085,.011,.085,.012,.1,.011,.1,.012,.114,.011,.114,.012,.128,.011,.128,.012,.004,.012,.007,.012,.011,.012,.014,.012,.018,.012,.021,.012,.025,.012,.028,.012,.032,.012,.036,.012,.039,.012,.046,.012,.05,.012,.053,.012,.057,.012,.061,.012,.064,.012,.068,.012,.075,.012,.078,.012,.082,.012,.089,.012,.093,.012,.096,.012,.103,.012,.107,.012,.11,.012,.117,.012,.121,.012,.125,.011,.125,.011,.121,.011,.117,.011,.11,.011,.107,.011,.103,.011,.096,.011,.093,.011,.089,.011,.082,.011,.078,.011,.075,.011,.068,.011,.064,.011,.061,.011,.053,.011,.05,.011,.046,.011,.043,.011,.039,.011,.036,.011,.032,.011,.025,.011,.021,.011,.018,.011,.014,.011,.011,.011,.007,.011,.004,.019,0,.018,0,.019,.014,.019,.028,.018,.028,.019,.1,.018,.1,.019,.114,.018,.114,.019,.128,.018,.128,.019,.142,.018,.142,.019,.185,.018,.185,.019,.228,.019,.242,.019,.256,.018,.256,.019,.004,.019,.007,.019,.011,.019,.018,.019,.021,.019,.025,.019,.032,.019,.036,.019,.039,.019,.043,.019,.046,.019,.05,.019,.053,.019,.057,.019,.061,.019,.064,.019,.068,.019,.071,.019,.075,.019,.078,.019,.082,.019,.085,.019,.089,.019,.093,.019,.096,.019,.103,.019,.107,.019,.11,.019,.117,.019,.121,.019,.125,.019,.132,.019,.135,.019,.139,.019,.146,.019,.149,.019,.153,.019,.157,.019,.16,.019,.164,.019,.167,.019,.171,.019,.174,.019,.178,.019,.182,.019,.189,.019,.192,.019,.196,.019,.199,.019,.203,.019,.206,.019,.21,.019,.214,.019,.217,.019,.221,.019,.224,.019,.231,.019,.235,.019,.238,.019,.246,.019,.249,.019,.253,.018,.253,.018,.249,.018,.246,.018,.242,.018,.238,.018,.235,.018,.231,.018,.228,.018,.224,.018,.221,.018,.217,.018,.214,.018,.21,.018,.206,.018,.203,.018,.199,.018,.196,.018,.192,.018,.189,.018,.182,.018,.178,.018,.174,.018,.171,.018,.167,.018,.164,.018,.16,.018,.157,.018,.153,.018,.149,.018,.146,.018,.139,.018,.135,.018,.132,.018,.125,.018,.121,.018,.117,.018,.11,.018,.107,.018,.103,.018,.096,.018,.093,.018,.089,.018,.085,.018,.082,.018,.078,.018,.075,.018,.071,.018,.068,.018,.064,.018,.061,.018,.057,.018,.053,.018,.05,.018,.046,.018,.043,.018,.039,.018,.036,.018,.032,.018,.025,.018,.021,.018,.018,.018,.014,.018,.011,.018,.007,.018,.004,.008,0,.007,0,.008,.014,.007,.014,.008,.057,.007,.057,.008,.071,.007,.071,.008,.128,.007,.128,.008,.004,.008,.007,.008,.011,.008,.018,.008,.021,.008,.025,.008,.028,.008,.032,.008,.036,.008,.039,.008,.043,.008,.046,.008,.05,.008,.053,.008,.061,.008,.064,.008,.068,.008,.075,.008,.078,.008,.082,.008,.085,.008,.089,.008,.093,.008,.096,.008,.1,.008,.103,.008,.107,.008,.11,.008,.114,.008,.117,.008,.121,.008,.125,.007,.125,.007,.121,.007,.117,.007,.114,.007,.11,.007,.107,.007,.103,.007,.1,.007,.096,.007,.093,.007,.089,.007,.085,.007,.082,.007,.078,.007,.075,.007,.068,.007,.064,.007,.061,.007,.053,.007,.05,.007,.046,.007,.043,.007,.039,.007,.036,.007,.032,.007,.028,.007,.025,.007,.021,.007,.018,.007,.011,.007,.007,.007,.004,.004,0,.003,0,.004,.052,.003,.052,.004,.103,.003,.103,.004,.003,.004,.006,.004,.01,.004,.013,.004,.016,.004,.019,.004,.023,.004,.026,.004,.029,.004,.032,.004,.035,.004,.039,.004,.042,.004,.045,.004,.048,.004,.055,.004,.058,.004,.061,.004,.064,.004,.068,.004,.071,.004,.074,.004,.077,.004,.081,.004,.084,.004,.087,.004,.09,.004,.093,.004,.097,.004,.1,.003,.1,.003,.097,.003,.093,.003,.09,.003,.087,.003,.084,.003,.081,.003,.077,.003,.074,.003,.071,.003,.068,.003,.064,.003,.061,.003,.058,.003,.055,.003,.048,.003,.045,.003,.042,.003,.039,.003,.035,.003,.032,.003,.029,.003,.026,.003,.023,.003,.019,.003,.016,.003,.013,.003,.01,.003,.006,.003,.003,.007,0,.006,0,.007,.014,.006,.014,.007,.057,.006,.057,.007,.071,.006,.071,.007,.128,.006,.128,.007,.004,.007,.007,.007,.011,.007,.018,.007,.021,.007,.025,.007,.028,.007,.032,.007,.036,.007,.039,.007,.043,.007,.046,.007,.05,.007,.053,.007,.061,.007,.064,.007,.068,.007,.075,.007,.078,.007,.082,.007,.085,.007,.089,.007,.093,.007,.096,.007,.1,.007,.103,.007,.107,.007,.11,.007,.114,.007,.117,.007,.121,.007,.125,.006,.125,.006,.121,.006,.117,.006,.114,.006,.11,.006,.107,.006,.103,.006,.1,.006,.096,.006,.093,.006,.089,.006,.085,.006,.082,.006,.078,.006,.075,.006,.068,.006,.064,.006,.061,.006,.053,.006,.05,.006,.046,.006,.043,.006,.039,.006,.036,.006,.032,.006,.028,.006,.025,.006,.021,.006,.018,.006,.011,.006,.007,.006,.004,.003,0,.002,0,.003,.101,.002,.101,.003,.003,.003,.006,.003,.009,.003,.013,.003,.016,.003,.019,.003,.022,.003,.025,.003,.028,.003,.031,.003,.035,.003,.038,.003,.041,.003,.044,.003,.047,.003,.05,.003,.053,.003,.057,.003,.06,.003,.063,.003,.066,.003,.069,.003,.072,.003,.075,.003,.079,.003,.082,.003,.085,.003,.088,.003,.091,.003,.094,.003,.097,.002,.097,.002,.094,.002,.091,.002,.088,.002,.085,.002,.082,.002,.079,.002,.075,.002,.072,.002,.069,.002,.066,.002,.063,.002,.06,.002,.057,.002,.053,.002,.05,.002,.047,.002,.044,.002,.041,.002,.038,.002,.035,.002,.031,.002,.028,.002,.025,.002,.022,.002,.019,.002,.016,.002,.013,.002,.009,.002,.006,.002,.003,.01,0,.009,0,.01,.014,.009,.014,.01,.057,.009,.057,.01,.071,.009,.071,.01,.128,.009,.128,.01,.004,.01,.007,.01,.011,.01,.018,.01,.021,.01,.025,.01,.028,.01,.032,.01,.036,.01,.039,.01,.043,.01,.046,.01,.05,.01,.053,.01,.061,.01,.064,.01,.068,.01,.075,.01,.078,.01,.082,.01,.085,.01,.089,.01,.093,.01,.096,.01,.1,.01,.103,.01,.107,.01,.11,.01,.114,.01,.117,.01,.121,.01,.125,.009,.125,.009,.121,.009,.117,.009,.114,.009,.11,.009,.107,.009,.103,.009,.1,.009,.096,.009,.093,.009,.089,.009,.085,.009,.082,.009,.078,.009,.075,.009,.068,.009,.064,.009,.061,.009,.053,.009,.05,.009,.046,.009,.043,.009,.039,.009,.036,.009,.032,.009,.028,.009,.025,.009,.021,.009,.018,.009,.011,.009,.007,.009,.004,.006,0,.005,0,.006,.052,.005,.052,.006,.103,.005,.103,.006,.003,.006,.006,.006,.01,.006,.013,.006,.016,.006,.019,.006,.023,.006,.026,.006,.029,.006,.032,.006,.035,.006,.039,.006,.042,.006,.045,.006,.048,.006,.055,.006,.058,.006,.061,.006,.064,.006,.068,.006,.071,.006,.074,.006,.077,.006,.081,.006,.084,.006,.087,.006,.09,.006,.093,.006,.097,.006,.1,.005,.1,.005,.097,.005,.093,.005,.09,.005,.087,.005,.084,.005,.081,.005,.077,.005,.074,.005,.071,.005,.068,.005,.064,.005,.061,.005,.058,.005,.055,.005,.048,.005,.045,.005,.042,.005,.039,.005,.035,.005,.032,.005,.029,.005,.026,.005,.023,.005,.019,.005,.016,.005,.013,.005,.01,.005,.006,.005,.003,.009,0,.008,0,.009,.014,.008,.014,.009,.057,.008,.057,.009,.071,.008,.071,.009,.128,.008,.128,.009,.004,.009,.007,.009,.011,.009,.018,.009,.021,.009,.025,.009,.028,.009,.032,.009,.036,.009,.039,.009,.043,.009,.046,.009,.05,.009,.053,.009,.061,.009,.064,.009,.068,.009,.075,.009,.078,.009,.082,.009,.085,.009,.089,.009,.093,.009,.096,.009,.1,.009,.103,.009,.107,.009,.11,.009,.114,.009,.117,.009,.121,.009,.125,.008,.125,.008,.121,.008,.117,.008,.114,.008,.11,.008,.107,.008,.103,.008,.1,.008,.096,.008,.093,.008,.089,.008,.085,.008,.082,.008,.078,.008,.075,.008,.068,.008,.064,.008,.061,.008,.053,.008,.05,.008,.046,.008,.043,.008,.039,.008,.036,.008,.032,.008,.028,.008,.025,.008,.021,.008,.018,.008,.011,.008,.007,.008,.004,.002,0,.002,0,.002,.101,.002,.101,.002,.003,.002,.006,.002,.009,.002,.013,.002,.016,.002,.019,.002,.022,.002,.025,.002,.028,.002,.031,.002,.035,.002,.038,.002,.041,.002,.044,.002,.047,.002,.05,.002,.053,.002,.057,.002,.06,.002,.063,.002,.066,.002,.069,.002,.072,.002,.075,.002,.079,.002,.082,.002,.085,.002,.088,.002,.091,.002,.094,.002,.097,.002,.097,.002,.094,.002,.091,.002,.088,.002,.085,.002,.082,.002,.079,.002,.075,.002,.072,.002,.069,.002,.066,.002,.063,.002,.06,.002,.057,.002,.053,.002,.05,.002,.047,.002,.044,.002,.041,.002,.038,.002,.035,.002,.031,.002,.028,.002,.025,.002,.022,.002,.019,.002,.016,.002,.013,.002,.009,.002,.006,.002,.003,.018,0,.017,0,.018,.014,.017,.014,.018,.057,.017,.057,.018,.071,.017,.071,.018,.128,.017,.128,.018,.004,.018,.007,.018,.011,.018,.018,.018,.021,.018,.025,.018,.028,.018,.032,.018,.036,.018,.039,.018,.043,.018,.046,.018,.05,.018,.053,.018,.061,.018,.064,.018,.068,.018,.075,.018,.078,.018,.082,.018,.085,.018,.089,.018,.093,.018,.096,.018,.1,.018,.103,.018,.107,.018,.11,.018,.114,.018,.117,.018,.121,.018,.125,.017,.125,.017,.121,.017,.117,.017,.114,.017,.11,.017,.107,.017,.103,.017,.1,.017,.096,.017,.093,.017,.089,.017,.085,.017,.082,.017,.078,.017,.075,.017,.068,.017,.064,.017,.061,.017,.053,.017,.05,.017,.046,.017,.043,.017,.039,.017,.036,.017,.032,.017,.028,.017,.025,.017,.021,.017,.018,.017,.011,.017,.007,.017,.004,.015,0,.014,0,.015,.052,.014,.052,.015,.103,.014,.103,.015,.003,.015,.006,.015,.01,.015,.013,.015,.016,.015,.019,.015,.023,.015,.026,.015,.029,.015,.032,.015,.035,.015,.039,.015,.042,.015,.045,.015,.048,.015,.055,.015,.058,.015,.061,.015,.064,.015,.068,.015,.071,.015,.074,.015,.077,.015,.081,.015,.084,.015,.087,.015,.09,.015,.093,.015,.097,.015,.1,.014,.1,.014,.097,.014,.093,.014,.09,.014,.087,.014,.084,.014,.081,.014,.077,.014,.074,.014,.071,.014,.068,.014,.064,.014,.061,.014,.058,.014,.055,.014,.048,.014,.045,.014,.042,.014,.039,.014,.035,.014,.032,.014,.029,.014,.026,.014,.023,.014,.019,.014,.016,.014,.013,.014,.01,.014,.006,.014,.003,.017,0,.016,0,.017,.014,.016,.014,.017,.057,.016,.057,.017,.071,.016,.071,.017,.128,.016,.128,.017,.004,.017,.007,.017,.011,.017,.018,.017,.021,.017,.025,.017,.028,.017,.032,.017,.036,.017,.039,.017,.043,.017,.046,.017,.05,.017,.053,.017,.061,.017,.064,.017,.068,.017,.075,.017,.078,.017,.082,.017,.085,.017,.089,.017,.093,.017,.096,.017,.1,.017,.103,.017,.107,.017,.11,.017,.114,.017,.117,.017,.121,.017,.125,.016,.125,.016,.121,.016,.117,.016,.114,.016,.11,.016,.107,.016,.103,.016,.1,.016,.096,.016,.093,.016,.089,.016,.085,.016,.082,.016,.078,.016,.075,.016,.068,.016,.064,.016,.061,.016,.053,.016,.05,.016,.046,.016,.043,.016,.039,.016,.036,.016,.032,.016,.028,.016,.025,.016,.021,.016,.018,.016,.011,.016,.007,.016,.004]}},index:{type:"Uint16Array",array:[180,179,177,183,182,175,178,177,182,182,174,175,176,182,177,174,182,176,194,193,186,181,175,193,197,196,184,192,186,196,196,172,184,185,196,186,172,196,185,193,185,186,174,193,175,185,193,174,185,171,172,173,185,174,171,185,173,203,202,200,195,184,202,206,205,198,201,200,205,205,189,198,199,205,200,189,205,199,202,199,200,172,202,184,199,202,172,215,214,209,204,198,214,218,217,207,213,209,217,217,187,207,208,217,209,187,217,208,214,208,209,189,214,198,208,214,189,208,170,187,188,208,189,170,208,188,199,188,189,171,199,172,188,199,171,188,41,170,65,188,171,41,188,65,224,223,221,216,207,223,227,226,219,222,221,226,226,212,219,220,226,221,212,226,220,223,220,221,187,223,207,220,223,187,236,235,230,225,219,235,239,238,228,234,230,238,238,210,228,229,238,230,210,238,229,235,229,230,212,235,219,229,235,212,229,191,210,211,229,212,191,229,211,220,211,212,170,220,187,211,220,170,245,244,242,237,228,244,248,247,240,243,242,247,247,233,240,241,247,242,233,247,241,244,241,242,210,244,228,241,244,210,253,252,250,246,240,252,251,250,254,250,322,324,322,249,323,252,322,250,322,233,249,233,252,240,252,233,322,331,325,327,233,331,249,325,331,233,249,331,333,331,327,332,327,334,336,334,326,335,334,232,326,325,334,327,232,334,325,241,325,233,325,191,232,191,241,210,241,191,325,337,328,330,191,337,232,328,337,191,340,337,339,232,340,326,337,340,232,326,340,342,340,339,341,339,343,345,343,338,344,343,330,338,337,343,339,330,343,337,351,346,348,330,351,338,346,351,330,338,351,353,351,348,352,348,354,356,354,347,355,354,329,347,346,354,348,329,354,346,346,43,329,328,346,330,43,346,328,211,328,191,328,41,43,41,211,170,211,41,328,349,63,45,63,41,42,41,349,43,349,41,63,357,349,350,43,357,329,349,357,43,360,357,359,329,360,347,357,360,329,347,360,362,360,359,361,359,363,365,363,358,364,363,350,358,357,363,359,350,363,357,369,366,368,350,369,358,366,369,350,358,369,371,369,368,370,368,372,374,372,367,373,372,47,367,366,372,368,47,372,366,366,45,47,349,366,350,45,366,349,375,60,49,60,45,46,45,375,47,375,45,60,377,375,376,47,377,367,375,377,47,367,377,379,377,376,378,376,380,382,380,51,381,380,49,51,375,380,376,49,380,375,383,57,52,57,49,50,49,383,51,383,49,57,51,383,384,383,52,54,52,53,55,50,56,58,57,58,53,71,46,59,60,71,61,46,71,60,68,60,61,49,68,50,60,68,49,61,67,69,68,69,56,59,70,72,71,72,67,83,42,62,63,83,64,42,83,63,74,63,64,45,74,46,63,74,45,80,64,73,74,80,75,64,80,74,77,74,75,46,77,59,74,77,46,75,76,78,77,78,70,73,79,81,80,81,76,92,62,82,83,92,84,62,92,83,89,83,84,64,89,73,83,89,64,84,88,90,89,90,79,82,91,93,92,93,88,86,65,66,41,86,42,65,86,41,104,66,85,86,104,87,66,104,86,95,86,87,42,95,62,86,95,42,101,87,94,95,101,96,87,101,95,98,95,96,62,98,82,95,98,62,96,97,99,98,99,91,94,100,102,101,102,97,112,85,103,104,112,105,85,112,104,109,104,105,87,109,94,104,109,87,105,108,110,109,110,100,103,111,113,112,113,108,115,106,107,66,115,85,106,115,66,121,107,114,115,121,116,107,121,115,118,115,116,85,118,103,115,118,85,116,117,119,118,119,111,114,120,122,121,122,117,126,123,124,107,126,114,123,126,107,124,125,127,126,127,120,128,129,125,4,0,321,55,321,320,54,319,318,54,317,316,317,54,318,319,55,320,384,315,314,381,48,313,48,381,314,382,312,311,378,310,309,310,378,311,312,382,313,315,384,316,379,308,307,373,306,44,306,379,307,374,305,304,370,303,302,303,374,304,305,373,44,370,301,300,371,299,298,299,371,300,364,297,296,365,295,294,295,365,296,297,364,298,301,370,302,308,378,309,319,54,55,4,55,5,5,53,6,54,316,384,384,314,381,313,382,381,56,8,7,9,69,67,69,9,8,56,7,58,69,8,56,308,379,378,378,382,311,379,306,373,361,293,292,292,291,361,290,289,362,362,291,290,305,374,373,374,303,370,371,298,364,370,300,371,365,294,361,291,362,361,364,296,365,355,362,289,321,55,4,355,40,288,356,287,286,287,356,288,352,285,284,353,283,282,283,352,284,285,352,286,344,281,280,345,279,278,279,344,280,341,277,276,341,275,274,275,341,276,277,345,278,281,353,282,342,273,272,335,190,271,190,335,272,336,270,269,332,268,267,268,332,269,270,336,271,333,266,265,323,264,231,264,333,265,324,263,262,254,261,260,261,324,262,263,323,231,266,332,267,273,342,274,356,286,352,353,281,344,352,283,353,277,341,345,345,344,279,341,274,342,272,335,342,355,288,356,335,271,336,332,266,333,336,269,332,323,263,324,260,259,254,324,261,254,333,264,323,258,254,259,255,258,257,256,255,257,254,258,255,255,169,168,169,256,1,255,256,169,167,253,251,253,167,166,248,164,243,246,165,248,165,246,166,355,289,40,72,11,10,11,72,70,13,78,14,12,70,13,15,81,16,17,79,90,79,17,16,14,76,15,19,88,93,21,91,22,20,93,91,23,97,24,100,26,25,102,25,24,22,99,23,18,90,88,110,27,26,102,100,25,108,28,27,28,108,113,30,111,31,29,113,111,31,119,32,33,122,34,32,117,33,35,120,127,37,125,129,36,127,125,35,34,120,2,38,129,106,66,65,107,106,123,132,106,65,128,2,129,123,128,124,106,131,130,128,123,130,131,106,132,130,123,106,128,130,2,133,132,65,162,245,163,237,161,160,245,162,237,234,159,158,239,160,159,236,158,157,225,156,227,227,155,222,224,153,216,222,154,224,218,152,151,215,150,149,213,151,150,216,39,152,204,148,206,156,225,157,204,149,148,201,146,203,173,65,171,206,147,201,195,144,143,192,142,141,197,143,142,203,145,195,134,173,135,133,173,134,174,176,173,176,135,173,176,177,179,179,135,176,179,3,135,194,141,140,138,183,139,181,140,139,183,138,178,178,137,180,180,136,3,3,179,180,65,173,133,562,560,559,565,563,557,560,565,564,564,557,556,558,559,564,556,558,564,575,573,568,563,575,574,578,576,566,573,578,577,577,566,554,567,568,577,554,567,577,574,568,567,556,557,574,567,556,574,567,554,553,555,556,567,553,555,567,584,582,581,576,584,583,587,585,579,582,587,586,586,579,571,580,581,586,571,580,586,583,581,580,554,566,583,580,554,583,596,594,590,585,596,595,599,597,588,594,599,598,598,588,569,589,590,598,569,589,598,595,590,589,571,579,595,589,571,595,589,569,552,570,571,589,552,570,589,580,571,570,553,554,580,570,553,580,570,552,425,447,553,570,425,447,570,605,603,602,597,605,604,608,606,600,603,608,607,607,600,593,601,602,607,593,601,607,604,602,601,569,588,604,601,569,604,616,614,611,606,616,615,619,617,609,614,619,618,618,609,591,610,611,618,591,610,618,615,611,610,593,600,615,610,593,615,610,591,572,592,593,610,572,592,610,601,593,592,552,569,601,592,552,601,625,623,622,617,625,624,628,626,620,623,628,627,627,620,613,621,622,627,613,621,627,624,622,621,591,609,624,621,591,624,633,631,630,626,633,632,631,635,634,632,630,629,613,620,632,629,613,632,621,613,612,572,591,621,612,572,621,592,572,427,425,552,592,427,425,592,445,426,425,427,428,445,425,427,445,442,429,428,430,431,442,428,430,442,439,432,431,433,434,439,431,433,439,434,436,437,432,439,440,439,434,435,453,441,429,442,443,453,429,442,453,450,443,442,431,432,450,442,431,450,443,450,451,450,432,438,441,453,454,453,443,449,465,444,426,445,446,465,426,445,465,456,446,445,428,429,456,445,428,456,462,455,446,456,457,462,446,456,462,459,457,456,429,441,459,456,429,459,457,459,460,459,441,452,455,462,463,462,457,458,474,464,444,465,466,474,444,465,474,471,466,465,446,455,471,465,446,471,466,471,472,471,455,461,464,474,475,474,466,470,468,448,447,425,426,468,447,425,468,486,467,448,468,469,486,448,468,486,477,469,468,426,444,477,468,426,477,483,476,469,477,478,483,469,477,483,480,478,477,444,464,480,477,444,480,478,480,481,480,464,473,476,483,484,483,478,479,494,485,467,486,487,494,467,486,494,491,487,486,469,476,491,486,469,491,487,491,492,491,476,482,485,494,495,494,487,490,497,489,488,448,467,497,488,448,497,503,496,489,497,498,503,489,497,503,500,498,497,467,485,500,497,467,500,498,500,501,500,485,493,496,503,504,503,498,499,508,506,505,489,496,508,505,489,508,506,508,509,508,496,502,510,506,507,437,385,389,435,437,390,390,391,435,436,385,437,393,438,392,394,451,393,392,440,391,394,395,449,433,436,434,430,640,641,436,433,641,433,430,641,385,436,641,392,438,440,393,451,438,431,430,433,430,639,640,454,449,395,396,397,452,398,399,460,399,400,458,397,398,452,461,401,402,402,403,472,404,405,475,405,406,473,403,404,470,400,401,463,406,407,473,428,427,430,638,612,637,634,636,629,636,637,612,634,386,636,427,612,638,613,629,612,636,612,629,635,631,550,629,630,634,427,638,639,635,386,634,386,635,551,631,633,549,549,633,548,626,628,547,628,623,546,626,547,548,633,626,548,625,617,544,617,619,542,623,625,545,614,616,540,616,606,539,608,603,537,603,605,536,606,608,538,619,614,541,606,538,539,605,597,535,427,572,612,427,639,430,407,408,481,484,409,410,482,410,411,408,409,479,412,413,490,414,415,493,415,416,493,413,414,495,411,412,492,410,482,484,488,447,448,416,417,501,417,418,499,418,419,504,509,502,420,422,423,511,421,422,507,387,511,423,419,420,502,505,488,489,505,506,510,510,511,387,512,505,510,512,513,488,513,514,488,510,387,512,512,488,505,447,488,514,515,447,514,597,599,534,594,596,532,596,585,531,599,594,533,587,582,529,584,576,527,576,578,525,582,584,528,585,587,530,530,531,585,524,525,578,558,556,555,573,575,523,575,563,522,516,517,555,555,517,558,559,558,561,517,561,558,561,517,388,515,516,555,555,553,447,563,565,521,521,522,563,519,520,560,560,562,519,562,388,518,388,562,561,555,447,515,819,817,816,822,820,814,817,822,821,821,814,813,815,816,821,813,815,821,832,830,825,820,832,831,835,833,823,830,835,834,834,823,811,824,825,834,811,824,834,831,825,824,813,814,831,824,813,831,824,811,810,812,813,824,810,812,824,841,839,838,833,841,840,844,842,836,839,844,843,843,836,828,837,838,843,828,837,843,840,838,837,811,823,840,837,811,840,853,851,847,842,853,852,856,854,845,851,856,855,855,845,826,846,847,855,826,846,855,852,847,846,828,836,852,846,828,852,846,826,809,827,828,846,809,827,846,837,828,827,810,811,837,827,810,837,827,809,682,704,810,827,682,704,827,862,860,859,854,862,861,865,863,857,860,865,864,864,857,850,858,859,864,850,858,864,861,859,858,826,845,861,858,826,861,873,871,868,863,873,872,876,874,866,871,876,875,875,866,848,867,868,875,848,867,875,872,868,867,850,857,872,867,850,872,867,848,829,849,850,867,829,849,867,858,850,849,809,826,858,849,809,858,882,880,879,874,882,881,885,883,877,880,885,884,884,877,870,878,879,884,870,878,884,881,879,878,848,866,881,878,848,881,890,888,887,883,890,889,888,892,891,889,887,886,870,877,889,886,870,889,878,870,869,829,848,878,869,829,878,849,829,684,682,809,849,684,682,849,702,683,682,684,685,702,682,684,702,699,686,685,687,688,699,685,687,699,696,689,688,690,691,696,688,690,696,691,693,694,689,696,697,696,691,692,710,698,686,699,700,710,686,699,710,707,700,699,688,689,707,699,688,707,700,707,708,707,689,695,698,710,711,710,700,706,722,701,683,702,703,722,683,702,722,713,703,702,685,686,713,702,685,713,719,712,703,713,714,719,703,713,719,716,714,713,686,698,716,713,686,716,714,716,717,716,698,709,712,719,720,719,714,715,731,721,701,722,723,731,701,722,731,728,723,722,703,712,728,722,703,728,723,728,729,728,712,718,721,731,732,731,723,727,725,705,704,682,683,725,704,682,725,743,724,705,725,726,743,705,725,743,734,726,725,683,701,734,725,683,734,740,733,726,734,735,740,726,734,740,737,735,734,701,721,737,734,701,737,735,737,738,737,721,730,733,740,741,740,735,736,751,742,724,743,744,751,724,743,751,748,744,743,726,733,748,743,726,748,744,748,749,748,733,739,742,751,752,751,744,747,754,746,745,705,724,754,745,705,754,760,753,746,754,755,760,746,754,760,757,755,754,724,742,757,754,724,757,755,757,758,757,742,750,753,760,761,760,755,756,765,763,762,746,753,765,762,746,765,763,765,766,765,753,759,767,763,764,694,642,646,692,694,647,647,648,692,693,642,694,650,695,649,651,708,650,649,697,648,651,652,706,690,693,691,687,897,898,693,690,898,690,687,898,642,693,898,649,695,697,650,708,695,688,687,690,687,896,897,711,706,652,653,654,709,655,656,717,656,657,715,654,655,709,718,658,659,659,660,729,661,662,732,662,663,730,660,661,727,657,658,720,663,664,730,685,684,687,895,869,894,891,893,886,893,894,869,891,643,893,684,869,895,870,886,869,893,869,886,892,888,807,886,887,891,684,895,896,892,643,891,643,892,808,888,890,806,806,890,805,883,885,804,885,880,803,883,804,805,890,883,805,882,874,801,874,876,799,880,882,802,871,873,797,873,863,796,865,860,794,860,862,793,863,865,795,876,871,798,863,795,796,862,854,792,684,829,869,684,896,687,664,665,738,741,666,667,739,667,668,665,666,736,669,670,747,671,672,750,672,673,750,670,671,752,668,669,749,667,739,741,745,704,705,673,674,758,674,675,756,675,676,761,766,759,677,679,680,768,678,679,764,644,768,680,676,677,759,762,745,746,762,763,767,767,768,644,769,762,767,769,770,745,770,771,745,767,644,769,769,745,762,704,745,771,772,704,771,854,856,791,851,853,789,853,842,788,856,851,790,844,839,786,841,833,784,833,835,782,839,841,785,842,844,787,787,788,842,781,782,835,815,813,812,830,832,780,832,820,779,773,774,812,812,774,815,816,815,818,774,818,815,818,774,645,772,773,812,812,810,704,820,822,778,778,779,820,776,777,817,817,819,776,819,645,775,645,819,818,812,704,772,1076,1075,1073,1079,1078,1071,1074,1073,1078,1078,1070,1071,1072,1078,1073,1070,1078,1072,1089,1088,1082,1077,1071,1088,1092,1091,1080,1087,1082,1091,1091,1068,1080,1081,1091,1082,1068,1091,1081,1088,1081,1082,1070,1088,1071,1081,1088,1070,1081,1067,1068,1069,1081,1070,1067,1081,1069,1098,1097,1095,1090,1080,1097,1101,1100,1093,1096,1095,1100,1100,1085,1093,1094,1100,1095,1085,1100,1094,1097,1094,1095,1068,1097,1080,1094,1097,1068,1110,1109,1104,1099,1093,1109,1113,1112,1102,1108,1104,1112,1112,1083,1102,1103,1112,1104,1083,1112,1103,1109,1103,1104,1085,1109,1093,1103,1109,1085,1103,1066,1083,1084,1103,1085,1066,1103,1084,1094,1084,1085,1067,1094,1068,1084,1094,1067,1084,939,1066,961,1084,1067,939,1084,961,1119,1118,1116,1111,1102,1118,1122,1121,1114,1117,1116,1121,1121,1107,1114,1115,1121,1116,1107,1121,1115,1118,1115,1116,1083,1118,1102,1115,1118,1083,1130,1129,1125,1120,1114,1129,1133,1132,1123,1128,1125,1132,1132,1105,1123,1124,1132,1125,1105,1132,1124,1129,1124,1125,1107,1129,1114,1124,1129,1107,1124,1086,1105,1106,1124,1107,1086,1124,1106,1115,1106,1107,1066,1115,1083,1106,1115,1066,1139,1138,1136,1131,1123,1138,1142,1141,1134,1137,1136,1141,1141,1127,1134,1135,1141,1136,1127,1141,1135,1138,1135,1136,1105,1138,1123,1135,1138,1105,1147,1146,1144,1140,1134,1146,1145,1144,1148,1146,1143,1144,1127,1146,1134,1143,1146,1127,1135,1126,1127,1086,1135,1105,1126,1135,1086,1106,941,1086,939,1106,1066,941,1106,939,959,939,940,941,959,942,939,959,941,956,942,943,944,956,945,942,956,944,953,945,946,947,953,948,945,953,947,948,949,951,946,952,954,953,954,949,967,943,955,956,967,957,943,967,956,964,956,957,945,964,946,956,964,945,957,963,965,964,965,952,955,966,968,967,968,963,979,940,958,959,979,960,940,979,959,970,959,960,942,970,943,959,970,942,976,960,969,970,976,971,960,976,970,973,970,971,943,973,955,970,973,943,971,972,974,973,974,966,969,975,977,976,977,972,988,958,978,979,988,980,958,988,979,985,979,980,960,985,969,979,985,960,980,984,986,985,986,975,978,987,989,988,989,984,982,961,962,939,982,940,961,982,939,1e3,962,981,982,1e3,983,962,1e3,982,991,982,983,940,991,958,982,991,940,997,983,990,991,997,992,983,997,991,994,991,992,958,994,978,991,994,958,992,993,995,994,995,987,990,996,998,997,998,993,1008,981,999,1e3,1008,1001,981,1008,1e3,1005,1e3,1001,983,1005,990,1ee3,2001,2003,2001,2e3,1842,1990,2003,2e3,1842,2003,2001,2003,2004,2003,1990,1996,2e3,1849,1850,1843,1842,2e3,1850,1843,2ee3,3e3,3127,3129,2999,3129,3124,2999,3e3,3129,2998,2999,3126,3126,3118,2998,3135,3127,3e3,2997,2998,3120,2997,3120,3115,2996,3117,3109,2995,3111,3106,2996,3109,3111,2997,3115,3117,2994,3108,3100,2994,3100,3102,2993,3097,3099,2992,3091,3093,2992,3099,3091,2993,3102,3097,2995,3106,3108,2996,2997,3117,2995,2996,3111,2993,2994,3102,2991,2992,3093,2993,3099,2992,2995,3108,2994,2990,2991,3090,2990,3082,3084,2990,3090,3082,2989,2990,3084,2989,3079,3081,2989,3084,3079,2751,2989,3081,3088,2991,3093,2817,2907,2909,2744,2817,2909,2817,2818,2912,2818,2918,2910,2910,2912,2818,2918,2818,2819,2916,2918,2819,2819,2820,2921,2821,2822,2930,2823,2824,2939,2822,2823,2936,2820,2821,2927,2824,2825,2945,2820,2919,2921,2821,2925,2927,2822,2928,2930,2823,2934,2936,2825,2948,2943,2943,2945,2825,2937,2939,2824,2948,2825,2826,2826,2827,2954,2827,2828,2957,2952,2954,2827,2957,2828,2955,2948,2826,2946,2966,2961,2829,2830,2966,2829,2955,2828,2963,2831,2794,2973,2829,2961,2963,2830,2831,2971,2829,2963,2828,2830,2964,2966,2788,2967,2789,2791,2790,2797,2790,2789,2796,2972,2973,2794,2967,2968,2972,2796,2967,2795,2972,2795,2967,2967,2796,2789,2972,2794,2795,2969,2971,2831,2751,3073,3075,2988,3075,3070,2987,3072,3064,2986,3066,3061,2987,3064,3066,2988,3070,3072,2985,3063,3055,2985,3055,3057,2984,3052,3054,2983,3046,3048,2983,3054,3046,2984,3057,3052,2986,3061,3063,2988,2751,3075,2987,2988,3072,2985,2986,3063,2983,2984,3054,2985,3057,2984,2987,3066,2986,2982,3043,3045,2981,3045,3037,2981,2982,3045,2980,2981,3039,3034,2980,3039,3048,2982,2983,2982,3048,3043,3081,3073,2751,2979,2980,3036,2979,3028,3030,2978,3025,3027,2978,3030,3025,2979,3036,3028,2792,2799,3005,2798,2799,2792,2793,2792,3005,3008,3006,3005,2801,3008,2800,3005,2800,3008,2800,3005,2799,2977,3019,3021,2976,3021,3016,2978,2979,3030,3021,2976,2977,2978,3027,2977,2976,3016,3018,2977,3027,3019,2975,3018,3010,2974,3012,3007,2975,3010,3012,2974,2975,3012,2801,2974,3009,3008,2801,3009,2976,3018,2975,3291,3154,3284,3285,3291,3286,3154,3291,3285,3286,3287,3289,3284,3290,3292,3291,3292,3287,3595,3594,3592,3588,3582,3594,3593,3592,3596,3594,3591,3592,3159,3594,3582,3591,3594,3159,3300,3160,3293,3294,3300,3295,3160,3300,3294,3297,3294,3295,3154,3297,3284,3294,3297,3154,3295,3296,3298,3297,3298,3290,3293,3299,3301,3300,3301,3296,3294,3161,3160,3155,3294,3154,3161,3294,3155,3162,3161,3155,3163,3162,3156,3164,3163,3157,3583,3158,3159,3164,3583,3165,3158,3583,3164,3587,3586,3584,3579,3573,3586,3590,3589,3582,3585,3584,3589,3589,3159,3582,3583,3589,3584,3159,3589,3583,3586,3583,3584,3165,3586,3573,3583,3586,3165,3309,3166,3302,3303,3309,3304,3166,3309,3303,3306,3303,3304,3160,3306,3293,3303,3306,3160,3304,3305,3307,3306,3307,3299,3302,3308,3310,3309,3310,3305,3303,3167,3166,3161,3303,3160,3167,3303,3161,3168,3167,3161,3169,3168,3162,3170,3169,3163,3574,3164,3165,3170,3574,3171,3164,3574,3170,3578,3577,3575,3570,3564,3577,3581,3580,3573,3576,3575,3580,3580,3165,3573,3574,3580,3575,3165,3580,3574,3577,3574,3575,3171,3577,3564,3574,3577,3171,3318,3172,3311,3312,3318,3313,3172,3318,3312,3315,3312,3313,3166,3315,3302,3312,3315,3166,3313,3314,3316,3315,3316,3308,3311,3317,3319,3318,3319,3314,3312,3173,3172,3167,3312,3166,3173,3312,3167,3174,3173,3167,3175,3174,3168,3176,3175,3169,3565,3170,3171,3176,3565,3177,3170,3565,3176,3569,3568,3566,3561,3555,3568,3572,3571,3564,3567,3566,3571,3571,3171,3564,3565,3571,3566,3171,3571,3565,3568,3565,3566,3177,3568,3555,3565,3568,3177,3327,3178,3320,3321,3327,3322,3178,3327,3321,3324,3321,3322,3172,3324,3311,3321,3324,3172,3322,3323,3325,3324,3325,3317,3320,3326,3328,3327,3328,3323,3321,3179,3178,3173,3321,3172,3179,3321,3173,3180,3179,3173,3181,3180,3174,3182,3181,3175,3556,3176,3177,3182,3556,3183,3176,3556,3182,3560,3559,3557,3552,3546,3559,3563,3562,3555,3558,3557,3562,3562,3177,3555,3556,3562,3557,3177,3562,3556,3559,3556,3557,3183,3559,3546,3556,3559,3183,3336,3184,3329,3330,3336,3331,3184,3336,3330,3333,3330,3331,3178,3333,3320,3330,3333,3178,3331,3332,3334,3333,3334,3326,3329,3335,3337,3336,3337,3332,3330,3185,3184,3179,3330,3178,3185,3330,3179,3186,3185,3179,3187,3186,3180,3188,3187,3181,3547,3182,3183,3188,3547,3189,3182,3547,3188,3551,3550,3548,3543,3537,3550,3554,3553,3546,3549,3548,3553,3553,3183,3546,3547,3553,3548,3183,3553,3547,3550,3547,3548,3189,3550,3537,3547,3550,3189,3345,3190,3338,3339,3345,3340,3190,3345,3339,3342,3339,3340,3184,3342,3329,3339,3342,3184,3340,3341,3343,3342,3343,3335,3338,3344,3346,3345,3346,3341,3339,3191,3190,3185,3339,3184,3191,3339,3185,3192,3191,3185,3193,3192,3186,3194,3193,3187,3538,3188,3189,3194,3538,3195,3188,3538,3194,3542,3541,3539,3534,3528,3541,3545,3544,3537,3540,3539,3544,3544,3189,3537,3538,3544,3539,3189,3544,3538,3541,3538,3539,3195,3541,3528,3538,3541,3195,3354,3197,3347,3348,3354,3349,3197,3354,3348,3351,3348,3349,3190,3351,3338,3348,3351,3190,3349,3350,3352,3351,3352,3344,3347,3353,3355,3354,3355,3350,3348,3198,3197,3191,3348,3190,3198,3348,3191,3199,3198,3191,3200,3199,3192,3201,3200,3193,3529,3194,3195,3201,3529,3202,3194,3529,3201,3533,3532,3530,3525,3519,3532,3536,3535,3528,3531,3530,3535,3535,3195,3528,3529,3535,3530,3195,3535,3529,3532,3529,3530,3202,3532,3519,3529,3532,3202,3363,3204,3356,3357,3363,3358,3204,3363,3357,3360,3357,3358,3197,3360,3347,3357,3360,3197,3358,3359,3361,3360,3361,3353,3356,3362,3364,3363,3364,3359,3357,3205,3204,3198,3357,3197,3205,3357,3198,3206,3205,3198,3207,3206,3199,3208,3207,3200,3520,3201,3202,3208,3520,3209,3201,3520,3208,3524,3523,3521,3516,3510,3523,3527,3526,3519,3522,3521,3526,3526,3202,3519,3520,3526,3521,3202,3526,3520,3523,3520,3521,3209,3523,3510,3520,3523,3209,3372,3210,3365,3366,3372,3367,3210,3372,3366,3369,3366,3367,3204,3369,3356,3366,3369,3204,3367,3368,3370,3369,3370,3362,3365,3371,3373,3372,3373,3368,3366,3211,3210,3205,3366,3204,3211,3366,3205,3212,3211,3205,3213,3212,3206,3214,3213,3207,3511,3208,3209,3214,3511,3215,3208,3511,3214,3515,3514,3512,3507,3501,3514,3518,3517,3510,3513,3512,3517,3517,3209,3510,3511,3517,3512,3209,3517,3511,3514,3511,3512,3215,3514,3501,3511,3514,3215,3381,3216,3374,3375,3381,3376,3216,3381,3375,3378,3375,3376,3210,3378,3365,3375,3378,3210,3376,3377,3379,3378,3379,3371,3374,3380,3382,3381,3382,3377,3375,3217,3216,3211,3375,3210,3217,3375,3211,3218,3217,3211,3219,3218,3212,3220,3219,3213,3502,3214,3215,3220,3502,3221,3214,3502,3220,3506,3505,3503,3498,3492,3505,3509,3508,3501,3504,3503,3508,3508,3215,3501,3502,3508,3503,3215,3508,3502,3505,3502,3503,3221,3505,3492,3502,3505,3221,3390,3222,3383,3384,3390,3385,3222,3390,3384,3387,3384,3385,3216,3387,3374,3384,3387,3216,3385,3386,3388,3387,3388,3380,3383,3389,3391,3390,3391,3386,3384,3223,3222,3217,3384,3216,3223,3384,3217,3224,3223,3217,3225,3224,3218,3226,3225,3219,3493,3220,3221,3226,3493,3227,3220,3493,3226,3497,3496,3494,3489,3483,3496,3500,3499,3492,3495,3494,3499,3499,3221,3492,3493,3499,3494,3221,3499,3493,3496,3493,3494,3227,3496,3483,3493,3496,3227,3399,3228,3392,3393,3399,3394,3228,3399,3393,3396,3393,3394,3222,3396,3383,3393,3396,3222,3394,3395,3397,3396,3397,3389,3392,3398,3400,3399,3400,3395,3393,3229,3228,3223,3393,3222,3229,3393,3223,3230,3229,3223,3231,3230,3224,3232,3231,3225,3484,3226,3227,3232,3484,3233,3226,3484,3232,3488,3487,3485,3480,3474,3487,3491,3490,3483,3486,3485,3490,3490,3227,3483,3484,3490,3485,3227,3490,3484,3487,3484,3485,3233,3487,3474,3484,3487,3233,3408,3234,3401,3402,3408,3403,3234,3408,3402,3405,3402,3403,3228,3405,3392,3402,3405,3228,3403,3404,3406,3405,3406,3398,3401,3407,3409,3408,3409,3404,3402,3235,3234,3229,3402,3228,3235,3402,3229,3236,3235,3229,3237,3236,3230,3238,3237,3231,3475,3232,3233,3238,3475,3239,3232,3475,3238,3479,3478,3476,3471,3465,3478,3482,3481,3474,3477,3476,3481,3481,3233,3474,3475,3481,3476,3233,3481,3475,3478,3475,3476,3239,3478,3465,3475,3478,3239,3417,3240,3410,3411,3417,3412,3240,3417,3411,3414,3411,3412,3234,3414,3401,3411,3414,3234,3412,3413,3415,3414,3415,3407,3410,3416,3418,3417,3418,3413,3411,3241,3240,3235,3411,3234,3241,3411,3235,3242,3241,3235,3243,3242,3236,3244,3243,3237,3466,3238,3239,3244,3466,3245,3238,3466,3244,3470,3469,3467,3462,3456,3469,3473,3472,3465,3468,3467,3472,3472,3239,3465,3466,3472,3467,3239,3472,3466,3469,3466,3467,3245,3469,3456,3466,3469,3245,3422,3419,3420,3240,3422,3410,3419,3422,3240,3420,3421,3423,3422,3423,3416,3424,3425,3421,3461,3460,3458,3464,3463,3456,3459,3458,3463,3463,3245,3456,3457,3463,3458,3245,3463,3457,3289,3254,3146,3254,3287,3292,3254,3289,3287,3255,3292,3290,3290,3298,3255,3288,3289,3146,3256,3296,3301,3299,3257,3301,3296,3256,3298,3258,3305,3310,3257,3299,3307,3255,3298,3256,3288,3147,3285,3146,3147,3288,3286,3288,3285,3149,3156,3155,3155,3154,3285,3285,3147,3148,3258,3307,3305,3259,3308,3316,3308,3259,3310,3316,3260,3259,3260,3314,3319,3261,3317,3325,3317,3261,3319,3323,3262,3325,3316,3314,3260,3262,3323,3328,3263,3326,3334,3265,3335,3343,3267,3344,3352,3266,3341,3346,3264,3332,3337,3268,3350,3355,3263,3328,3326,3264,3334,3332,3265,3337,3335,3266,3343,3341,3267,3346,3344,3268,3352,3350,3196,3355,3353,3353,3361,3196,3151,3591,3158,3591,3151,3152,3153,3596,3152,3596,3592,3591,3591,3152,3596,3151,3158,3157,3597,3596,3153,3455,3595,3593,3454,3588,3595,3156,3149,3150,3455,3593,3597,3453,3585,3590,3453,3587,3585,3455,3597,3153,3453,3590,3454,3455,3454,3595,3453,3452,3587,3452,3581,3579,3451,3576,3581,3451,3581,3452,3450,3578,3451,3578,3450,3570,3587,3452,3579,3449,3572,3450,3449,3567,3572,3448,3561,3569,3447,3558,3563,3448,3563,3561,3449,3569,3567,3446,3552,3560,3446,3554,3552,3445,3551,3549,3444,3545,3543,3444,3543,3551,3445,3549,3554,3447,3560,3558,3448,3569,3449,3447,3563,3448,3445,3554,3446,3443,3545,3444,3445,3444,3551,3447,3446,3560,3442,3542,3443,3442,3536,3534,3442,3534,3542,3441,3536,3442,3441,3533,3531,3441,3531,3536,3203,3533,3441,3540,3545,3443,3269,3361,3359,3196,3361,3269,3269,3359,3364,3270,3362,3370,3362,3270,3364,3370,3271,3270,3368,3271,3370,3271,3368,3373,3273,3377,3382,3275,3386,3391,3274,3380,3388,3272,3371,3379,3276,3389,3397,3272,3373,3371,3273,3379,3377,3274,3382,3380,3275,3388,3386,3277,3395,3400,3395,3277,3397,3389,3276,3391,3400,3278,3277,3278,3398,3406,3279,3404,3409,3404,3279,3406,3409,3407,3280,3400,3398,3278,3418,3281,3413,3282,3281,3418,3407,3415,3280,3283,3421,3425,3281,3415,3413,3282,3416,3423,3281,3280,3415,3282,3418,3416,3240,3241,3419,3243,3250,3249,3242,3249,3248,3424,3246,3425,3419,3424,3420,3248,3247,3419,3424,3419,3247,3419,3241,3248,3424,3247,3246,3421,3283,3423,3203,3527,3525,3440,3522,3527,3439,3516,3524,3438,3513,3518,3439,3518,3516,3440,3524,3522,3437,3507,3515,3437,3509,3507,3436,3506,3504,3435,3500,3498,3435,3498,3506,3436,3504,3509,3438,3515,3513,3440,3527,3203,3439,3524,3440,3437,3515,3438,3435,3506,3436,3437,3436,3509,3439,3438,3518,3434,3497,3495,3433,3489,3497,3433,3497,3434,3432,3491,3433,3486,3491,3432,3500,3435,3434,3434,3495,3500,3533,3203,3525,3431,3488,3432,3431,3482,3480,3430,3479,3477,3430,3477,3482,3431,3480,3488,3244,3457,3251,3250,3243,3244,3245,3457,3244,3460,3457,3458,3253,3252,3460,3457,3460,3252,3252,3251,3457,3429,3473,3471,3428,3468,3473,3430,3482,3431,3473,3429,3428,3430,3429,3479,3428,3470,3468,3429,3471,3479,3427,3462,3470,3426,3459,3464,3427,3464,3462,3426,3464,3427,3253,3461,3426,3460,3461,3253,3428,3427,3470,3743,3606,3736,3737,3743,3738,3606,3743,3737,3738,3739,3741,3736,3742,3744,3743,3744,3739,4047,4046,4044,4040,4034,4046,4045,4044,4048,4046,4043,4044,3611,4046,4034,4043,4046,3611,3752,3612,3745,3746,3752,3747,3612,3752,3746,3749,3746,3747,3606,3749,3736,3746,3749,3606,3747,3748,3750,3749,3750,3742,3745,3751,3753,3752,3753,3748,3746,3613,3612,3607,3746,3606,3613,3746,3607,3614,3613,3607,3615,3614,3608,3616,3615,3609,4035,3610,3611,3616,4035,3617,3610,4035,3616,4039,4038,4036,4031,4025,4038,4042,4041,4034,4037,4036,4041,4041,3611,4034,4035,4041,4036,3611,4041,4035,4038,4035,4036,3617,4038,4025,4035,4038,3617,3761,3618,3754,3755,3761,3756,3618,3761,3755,3758,3755,3756,3612,3758,3745,3755,3758,3612,3756,3757,3759,3758,3759,3751,3754,3760,3762,3761,3762,3757,3755,3619,3618,3613,3755,3612,3619,3755,3613,3620,3619,3613,3621,3620,3614,3622,3621,3615,4026,3616,3617,3622,4026,3623,3616,4026,3622,4030,4029,4027,4022,4016,4029,4033,4032,4025,4028,4027,4032,4032,3617,4025,4026,4032,4027,3617,4032,4026,4029,4026,4027,3623,4029,4016,4026,4029,3623,3770,3624,3763,3764,3770,3765,3624,3770,3764,3767,3764,3765,3618,3767,3754,3764,3767,3618,3765,3766,3768,3767,3768,3760,3763,3769,3771,3770,3771,3766,3764,3625,3624,3619,3764,3618,3625,3764,3619,3626,3625,3619,3627,3626,3620,3628,3627,3621,4017,3622,3623,3628,4017,3629,3622,4017,3628,4021,4020,4018,4013,4007,4020,4024,4023,4016,4019,4018,4023,4023,3623,4016,4017,4023,4018,3623,4023,4017,4020,4017,4018,3629,4020,4007,4017,4020,3629,3779,3630,3772,3773,3779,3774,3630,3779,3773,3776,3773,3774,3624,3776,3763,3773,3776,3624,3774,3775,3777,3776,3777,3769,3772,3778,3780,3779,3780,3775,3773,3631,3630,3625,3773,3624,3631,3773,3625,3632,3631,3625,3633,3632,3626,3634,3633,3627,4008,3628,3629,3634,4008,3635,3628,4008,3634,4012,4011,4009,4004,3998,4011,4015,4014,4007,4010,4009,4014,4014,3629,4007,4008,4014,4009,3629,4014,4008,4011,4008,4009,3635,4011,3998,4008,4011,3635,3788,3636,3781,3782,3788,3783,3636,3788,3782,3785,3782,3783,3630,3785,3772,3782,3785,3630,3783,3784,3786,3785,3786,3778,3781,3787,3789,3788,3789,3784,3782,3637,3636,3631,3782,3630,3637,3782,3631,3638,3637,3631,3639,3638,3632,3640,3639,3633,3999,3634,3635,3640,3999,3641,3634,3999,3640,4003,4002,4e3,3995,3989,4002,4006,4005,3998,4001,4e3,4005,4005,3635,3998,3999,4005,4e3,3635,4005,3999,4002,3999,4ee3,5001,4996,5003,5004,5003,4998,4999,5017,5005,4993,5006,5007,5017,4993,5006,5017,5014,5007,5006,4995,4996,5014,5006,4995,5014,5007,5014,5015,5014,4996,5002,5005,5017,5018,5017,5007,5013,5029,5008,4990,5009,5010,5029,4990,5009,5029,5020,5010,5009,4992,4993,5020,5009,4992,5020,5026,5019,5010,5020,5021,5026,5010,5020,5026,5023,5021,5020,4993,5005,5023,5020,4993,5023,5021,5023,5024,5023,5005,5016,5019,5026,5027,5026,5021,5022,5038,5028,5008,5029,5030,5038,5008,5029,5038,5035,5030,5029,5010,5019,5035,5029,5010,5035,5030,5035,5036,5035,5019,5025,5028,5038,5039,5038,5030,5034,5032,5012,5011,4989,4990,5032,5011,4989,5032,5050,5031,5012,5032,5033,5050,5012,5032,5050,5041,5033,5032,4990,5008,5041,5032,4990,5041,5047,5040,5033,5041,5042,5047,5033,5041,5047,5044,5042,5041,5008,5028,5044,5041,5008,5044,5042,5044,5045,5044,5028,5037,5040,5047,5048,5047,5042,5043,5058,5049,5031,5050,5051,5058,5031,5050,5058,5055,5051,5050,5033,5040,5055,5050,5033,5055,5051,5055,5056,5055,5040,5046,5049,5058,5059,5058,5051,5054,5061,5053,5052,5012,5031,5061,5052,5012,5061,5067,5060,5053,5061,5062,5067,5053,5061,5067,5064,5062,5061,5031,5049,5064,5061,5031,5064,5062,5064,5065,5064,5049,5057,5060,5067,5068,5067,5062,5063,5072,5070,5069,5053,5060,5072,5069,5053,5072,5070,5072,5073,5072,5060,5066,5074,5070,5071,5001,4949,4953,4999,5001,4954,4954,4955,4999,5e3,4949,5001,5004,4955,4956,4956,4957,5002,5004,4956,5002,4958,5015,4957,4997,5205,5e3,5205,4994,5204,5204,4994,5203,5e3,4998,4997,4949,5e3,5205,4957,5015,5002,5013,5015,4958,4994,4997,4995,5205,4997,4994,4994,4991,5203,4959,4960,5018,4961,4962,5016,4962,4963,5024,4960,4961,5016,4964,4965,5027,5025,4965,4966,4967,4968,5034,4968,4969,5039,4966,4967,5036,4963,4964,5022,5037,5039,4969,4992,4991,4994,5201,5176,5200,5198,4950,5200,5200,5193,5198,5199,4950,5198,5176,5201,5202,5177,5193,5176,5200,5176,5193,5195,5197,5113,5198,5193,5194,5176,5202,4991,5199,5195,5114,5115,4950,5199,5112,5113,5197,5190,5192,5111,5192,5187,5110,5187,5189,5109,5112,5190,5111,5112,5197,5190,5189,5181,5108,5181,5183,5106,4991,5136,5176,5178,5180,5104,5180,5170,5103,5172,5167,5101,5167,5169,5100,5170,5172,5102,5183,5178,5105,5103,5170,5102,4988,5099,5161,4991,5202,5203,5045,5037,4971,4972,4973,5043,5048,4973,4974,4971,4972,5045,5056,4975,4976,4977,4978,5059,4978,4979,5057,4976,4977,5054,5046,4974,4975,5046,5048,4974,5056,5046,4975,5065,5057,4980,4980,4981,5065,4981,4982,5063,4982,4983,5068,5073,5066,4984,4986,4987,5075,4985,4986,5071,4951,5075,4987,4983,4984,5066,5069,5052,5053,5069,5070,5074,5074,5075,4951,5076,5069,5074,5076,5077,5052,5077,5078,5052,5074,4951,5076,5076,5052,5069,5011,5012,5052,5078,5011,5052,5163,5158,5097,5160,5149,5095,5149,5151,5094,5158,5160,5096,5148,5140,5091,5140,5142,5089,5119,5117,5011,5146,5148,5092,5161,5163,5098,5151,5146,5093,5094,5095,5149,5088,5089,5142,5122,5120,5119,5137,5139,5087,5139,5127,5086,5080,5081,5119,5119,5081,5122,5123,5122,5125,5081,5125,5122,5125,5081,4952,5079,5080,5119,5079,5119,5011,5127,5129,5085,5085,5086,5127,5083,5084,5124,5124,5126,5083,5126,4952,5082,4952,5126,5125,5079,5011,5078,5384,5383,5381,5387,5386,5379,5382,5381,5386,5386,5378,5379,5380,5386,5381,5378,5386,5380,5398,5397,5390,5385,5379,5397,5401,5400,5388,5396,5390,5400,5400,5376,5388,5389,5400,5390,5376,5400,5389,5397,5389,5390,5378,5397,5379,5389,5397,5378,5389,5375,5376,5377,5389,5378,5375,5389,5377,5407,5406,5404,5399,5388,5406,5410,5409,5402,5405,5404,5409,5409,5393,5402,5403,5409,5404,5393,5409,5403,5406,5403,5404,5376,5406,5388,5403,5406,5376,5419,5418,5413,5408,5402,5418,5422,5421,5411,5417,5413,5421,5421,5391,5411,5412,5421,5413,5391,5421,5412,5418,5412,5413,5393,5418,5402,5412,5418,5393,5412,5374,5391,5392,5412,5393,5374,5412,5392,5403,5392,5393,5375,5403,5376,5392,5403,5375,5392,5247,5374,5269,5392,5375,5247,5392,5269,5428,5427,5425,5420,5411,5427,5431,5430,5423,5426,5425,5430,5430,5416,5423,5424,5430,5425,5416,5430,5424,5427,5424,5425,5391,5427,5411,5424,5427,5391,5440,5439,5434,5429,5423,5439,5443,5442,5432,5438,5434,5442,5442,5414,5432,5433,5442,5434,5414,5442,5433,5439,5433,5434,5416,5439,5423,5433,5439,5416,5433,5395,5414,5415,5433,5416,5395,5433,5415,5424,5415,5416,5374,5424,5391,5415,5424,5374,5449,5448,5446,5441,5432,5448,5452,5451,5444,5447,5446,5451,5451,5437,5444,5445,5451,5446,5437,5451,5445,5448,5445,5446,5414,5448,5432,5445,5448,5414,5457,5456,5454,5450,5444,5456,5455,5454,5458,5454,5528,5530,5528,5453,5529,5456,5528,5454,5528,5437,5453,5437,5456,5444,5456,5437,5528,5537,5531,5533,5437,5537,5453,5531,5537,5437,5453,5537,5539,5537,5533,5538,5533,5540,5542,5540,5532,5541,5540,5436,5532,5531,5540,5533,5436,5540,5531,5445,5531,5437,5531,5395,5436,5395,5445,5414,5445,5395,5531,5543,5534,5536,5395,5543,5436,5534,5543,5395,5546,5543,5545,5436,5546,5532,5543,5546,5436,5532,5546,5548,5546,5545,5547,5545,5549,5551,5549,5544,5550,5549,5536,5544,5543,5549,5545,5536,5549,5543,5557,5552,5554,5536,5557,5544,5552,5557,5536,5544,5557,5559,5557,5554,5558,5554,5560,5562,5560,5553,5561,5560,5535,5553,5552,5560,5554,5535,5560,5552,5552,5249,5535,5534,5552,5536,5249,5552,5534,5415,5534,5395,5534,5247,5249,5247,5415,5374,5415,5247,5534,5555,5267,5250,5267,5247,5248,5247,5555,5249,5555,5247,5267,5563,5555,5556,5249,5563,5535,5555,5563,5249,5566,5563,5565,5535,5566,5553,5563,5566,5535,5553,5566,5561,5566,5565,5567,5565,5569,5571,5569,5564,5570,5569,5556,5564,5563,5569,5565,5556,5569,5563,5575,5572,5574,5556,5575,5564,5572,5575,5556,5564,5575,5577,5575,5574,5576,5574,5578,5580,5578,5573,5579,5578,5252,5573,5572,5578,5574,5252,5578,5572,5572,5250,5252,5555,5572,5556,5250,5572,5555,5581,5264,5253,5264,5250,5251,5250,5581,5252,5581,5250,5264,5583,5581,5582,5252,5583,5573,5581,5583,5252,5573,5583,5585,5583,5582,5584,5582,5586,5588,5586,5255,5587,5586,5253,5255,5581,5586,5582,5253,5586,5581,5589,5261,5256,5261,5253,5254,5253,5589,5255,5589,5253,5261,5255,5589,5590,5589,5256,5258,5256,5257,5259,5254,5260,5262,5261,5262,5257,5275,5251,5263,5264,5275,5265,5251,5275,5264,5272,5264,5265,5253,5272,5254,5264,5272,5253,5265,5271,5273,5272,5273,5260,5263,5274,5276,5275,5276,5271,5287,5248,5266,5267,5287,5268,5248,5287,5267,5278,5267,5268,5250,5278,5251,5267,5278,5250,5284,5268,5277,5278,5284,5279,5268,5284,5278,5281,5278,5279,5251,5281,5263,5278,5281,5251,5279,5280,5282,5281,5282,5274,5277,5283,5285,5284,5285,5280,5296,5266,5286,5287,5296,5288,5266,5296,5287,5293,5287,5288,5268,5293,5277,5287,5293,5268,5288,5292,5294,5293,5294,5283,5286,5295,5297,5296,5297,5292,5290,5269,5270,5247,5290,5248,5269,5290,5247,5308,5270,5289,5290,5308,5291,5270,5308,5290,5299,5290,5291,5248,5299,5266,5290,5299,5248,5305,5291,5298,5299,5305,5300,5291,5305,5299,5302,5299,5300,5266,5302,5286,5299,5302,5266,5300,5301,5303,5302,5303,5295,5298,5304,5306,5305,5306,5301,5316,5289,5307,5308,5316,5309,5289,5316,5308,5313,5308,5309,5291,5313,5298,5308,5313,5291,5309,5312,5314,5313,5314,5304,5307,5315,5317,5316,5317,5312,5319,5310,5311,5270,5319,5289,5310,5319,5270,5325,5311,5318,5319,5325,5320,5311,5325,5319,5322,5319,5320,5289,5322,5307,5319,5322,5289,5320,5321,5323,5322,5323,5315,5318,5324,5326,5325,5326,5321,5330,5327,5328,5311,5330,5318,5327,5330,5311,5328,5329,5331,5330,5331,5324,5332,5333,5329,5210,5206,5527,5259,5527,5526,5258,5525,5524,5258,5523,5522,5523,5258,5524,5525,5259,5526,5590,5521,5520,5587,5519,5518,5519,5587,5520,5588,5517,5516,5584,5515,5514,5515,5584,5516,5517,5588,5518,5521,5590,5522,5585,5513,5512,5579,5511,5510,5511,5585,5512,5580,5509,5508,5576,5507,5506,5507,5580,5508,5509,5579,5510,5576,5505,5504,5577,5503,5502,5503,5577,5504,5570,5501,5500,5571,5499,5498,5499,5571,5500,5501,5570,5502,5505,5576,5506,5513,5584,5514,5525,5258,5259,5210,5259,5211,5211,5257,5212,5258,5522,5590,5518,5588,5587,5590,5520,5587,5516,5584,5588,5262,5213,5212,5273,5215,5214,5260,5214,5213,5213,5262,5260,5271,5216,5215,5273,5214,5260,5497,5496,5567,5585,5511,5579,5513,5585,5584,5567,5496,5495,5495,5494,5568,5246,5561,5493,5568,5494,5493,5580,5579,5509,5580,5507,5576,5577,5502,5570,5576,5504,5577,5571,5498,5567,5495,5568,5567,5570,5500,5571,5568,5493,5561,5527,5259,5210,5562,5492,5491,5558,5490,5489,5490,5562,5491,5558,5488,5487,5559,5486,5485,5486,5559,5487,5488,5558,5489,5550,5484,5483,5551,5482,5481,5482,5551,5483,5547,5480,5479,5548,5478,5477,5478,5547,5479,5480,5547,5481,5484,5550,5485,5541,5476,5394,5542,5475,5474,5475,5541,5394,5538,5473,5472,5538,5471,5470,5471,5538,5472,5473,5542,5474,5539,5469,5468,5529,5435,5467,5435,5529,5468,5530,5466,5465,5458,5464,5463,5464,5458,5465,5466,5530,5467,5469,5539,5470,5476,5548,5477,5562,5490,5558,5559,5485,5550,5558,5487,5559,5481,5547,5551,5551,5550,5483,5547,5478,5548,5476,5541,5548,5561,5492,5562,5541,5475,5542,5538,5470,5539,5542,5473,5538,5529,5467,5530,5463,5462,5458,5530,5465,5458,5539,5468,5529,5459,5458,5462,5459,5461,5460,5373,5459,5460,5459,5462,5461,5459,5373,5372,5460,5207,5373,5371,5457,5455,5457,5371,5370,5452,5368,5447,5450,5369,5452,5450,5370,5369,5447,5367,5449,5561,5246,5492,5216,5271,5276,5218,5274,5219,5217,5276,5274,5220,5280,5221,5283,5223,5222,5221,5285,5222,5219,5282,5220,5224,5294,5292,5226,5297,5295,5225,5292,5297,5228,5303,5229,5306,5231,5230,5229,5301,5230,5227,5295,5228,5223,5283,5294,5314,5233,5232,5306,5304,5231,5304,5232,5231,5233,5314,5312,5235,5317,5315,5234,5312,5317,5323,5237,5315,5237,5323,5238,5239,5326,5240,5238,5321,5239,5241,5324,5331,5243,5329,5333,5242,5331,5329,5241,5240,5324,5208,5244,5333,5310,5327,5311,5310,5270,5269,5332,5208,5333,5327,5332,5328,5310,5335,5334,5332,5327,5334,5335,5310,5336,5334,5327,5310,5332,5334,5208,5310,5269,5336,5449,5366,5441,5441,5365,5364,5438,5363,5362,5443,5364,5363,5440,5362,5361,5429,5360,5431,5431,5359,5426,5428,5357,5420,5426,5358,5428,5422,5356,5355,5419,5354,5353,5417,5355,5354,5420,5245,5356,5408,5352,5410,5429,5361,5360,5352,5408,5353,5410,5351,5405,5405,5350,5407,5399,5348,5347,5396,5346,5345,5401,5347,5346,5377,5269,5375,5407,5349,5399,5338,5337,5377,5269,5377,5337,5377,5339,5338,5380,5339,5377,5377,5378,5380,5380,5381,5383,5383,5339,5380,5383,5209,5339,5337,5336,5269,5398,5345,5344,5344,5343,5385,5342,5387,5343,5387,5342,5382,5382,5341,5384,5384,5340,5209,5209,5383,5384,5768,5766,5765,5771,5769,5763,5766,5771,5770,5770,5763,5762,5764,5765,5770,5762,5764,5770,5781,5779,5774,5769,5781,5780,5784,5782,5772,5779,5784,5783,5783,5772,5760,5773,5774,5783,5760,5773,5783,5780,5774,5773,5762,5763,5780,5773,5762,5780,5773,5760,5759,5761,5762,5773,5759,5761,5773,5790,5788,5787,5782,5790,5789,5793,5791,5785,5788,5793,5792,5792,5785,5777,5786,5787,5792,5777,5786,5792,5789,5787,5786,5760,5772,5789,5786,5760,5789,5802,5800,5796,5791,5802,5801,5805,5803,5794,5800,5805,5804,5804,5794,5775,5795,5796,5804,5775,5795,5804,5801,5796,5795,5777,5785,5801,5795,5777,5801,5795,5775,5758,5776,5777,5795,5758,5776,5795,5786,5777,5776,5759,5760,5786,5776,5759,5786,5776,5758,5631,5653,5759,5776,5631,5653,5776,5811,5809,5808,5803,5811,5810,5814,5812,5806,5809,5814,5813,5813,5806,5799,5807,5808,5813,5799,5807,5813,5810,5808,5807,5775,5794,5810,5807,5775,5810,5822,5820,5817,5812,5822,5821,5825,5823,5815,5820,5825,5824,5824,5815,5797,5816,5817,5824,5797,5816,5824,5821,5817,5816,5799,5806,5821,5816,5799,5821,5816,5797,5778,5798,5799,5816,5778,5798,5816,5807,5799,5798,5758,5775,5807,5798,5758,5807,5831,5829,5828,5823,5831,5830,5834,5832,5826,5829,5834,5833,5833,5826,5819,5827,5828,5833,5819,5827,5833,5830,5828,5827,5797,5815,5830,5827,5797,5830,5839,5837,5836,5832,5839,5838,5837,5841,5840,5838,5836,5835,5819,5826,5838,5835,5819,5838,5827,5819,5818,5778,5797,5827,5818,5778,5827,5798,5778,5633,5631,5758,5798,5633,5631,5798,5651,5632,5631,5633,5634,5651,5631,5633,5651,5648,5635,5634,5636,5637,5648,5634,5636,5648,5645,5638,5637,5639,5640,5645,5637,5639,5645,5640,5642,5643,5638,5645,5646,5645,5640,5641,5659,5647,5635,5648,5649,5659,5635,5648,5659,5656,5649,5648,5637,5638,5656,5648,5637,5656,5649,5656,5657,5656,5638,5644,5647,5659,5660,5659,5649,5655,5671,5650,5632,5651,5652,5671,5632,5651,5671,5662,5652,5651,5634,5635,5662,5651,5634,5662,5668,5661,5652,5662,5663,5668,5652,5662,5668,5665,5663,5662,5635,5647,5665,5662,5635,5665,5663,5665,5666,5665,5647,5658,5661,5668,5669,5668,5663,5664,5680,5670,5650,5671,5672,5680,5650,5671,5680,5677,5672,5671,5652,5661,5677,5671,5652,5677,5672,5677,5678,5677,5661,5667,5670,5680,5681,5680,5672,5676,5674,5654,5653,5631,5632,5674,5653,5631,5674,5692,5673,5654,5674,5675,5692,5654,5674,5692,5683,5675,5674,5632,5650,5683,5674,5632,5683,5689,5682,5675,5683,5684,5689,5675,5683,5689,5686,5684,5683,5650,5670,5686,5683,5650,5686,5684,5686,5687,5686,5670,5679,5682,5689,5690,5689,5684,5685,5700,5691,5673,5692,5693,5700,5673,5692,5700,5697,5693,5692,5675,5682,5697,5692,5675,5697,5693,5697,5698,5697,5682,5688,5691,5700,5701,5700,5693,5696,5703,5695,5694,5654,5673,5703,5694,5654,5703,5709,5702,5695,5703,5704,5709,5695,5703,5709,5706,5704,5703,5673,5691,5706,5703,5673,5706,5704,5706,5707,5706,5691,5699,5702,5709,5710,5709,5704,5705,5714,5712,5711,5695,5702,5714,5711,5695,5714,5712,5714,5715,5714,5702,5708,5716,5712,5713,5643,5591,5595,5641,5643,5596,5596,5597,5641,5642,5591,5643,5646,5597,5598,5598,5599,5644,5646,5598,5644,5600,5657,5599,5639,5847,5642,5847,5636,5846,5846,5636,5845,5642,5640,5639,5591,5642,5847,5599,5657,5644,5655,5657,5600,5636,5639,5637,5847,5639,5636,5636,5633,5845,5601,5602,5660,5603,5604,5658,5604,5605,5666,5602,5603,5658,5606,5607,5669,5667,5607,5608,5609,5610,5676,5610,5611,5681,5608,5609,5678,5605,5606,5664,5679,5681,5611,5634,5633,5636,5843,5818,5842,5840,5592,5842,5842,5835,5840,5841,5592,5840,5818,5843,5844,5819,5835,5818,5842,5818,5835,5837,5839,5755,5840,5835,5836,5818,5844,5633,5841,5837,5756,5757,5592,5841,5754,5755,5839,5832,5834,5753,5834,5829,5752,5829,5831,5751,5754,5832,5753,5754,5839,5832,5831,5823,5750,5823,5825,5748,5633,5778,5818,5820,5822,5746,5822,5812,5745,5814,5809,5743,5809,5811,5742,5812,5814,5744,5825,5820,5747,5745,5812,5744,5630,5741,5803,5633,5844,5845,5687,5679,5613,5614,5615,5685,5690,5615,5616,5613,5614,5687,5698,5617,5618,5619,5620,5701,5620,5621,5699,5618,5619,5696,5688,5616,5617,5688,5690,5616,5698,5688,5617,5707,5699,5622,5622,5623,5707,5623,5624,5705,5624,5625,5710,5715,5708,5626,5628,5629,5717,5627,5628,5713,5593,5717,5629,5625,5626,5708,5711,5694,5695,5711,5712,5716,5716,5717,5593,5718,5711,5716,5718,5719,5694,5719,5720,5694,5716,5593,5718,5718,5694,5711,5653,5654,5694,5720,5653,5694,5805,5800,5739,5802,5791,5737,5791,5793,5736,5800,5802,5738,5790,5782,5733,5782,5784,5731,5761,5759,5653,5788,5790,5734,5803,5805,5740,5793,5788,5735,5736,5737,5791,5730,5731,5784,5764,5762,5761,5779,5781,5729,5781,5769,5728,5722,5723,5761,5761,5723,5764,5765,5764,5767,5723,5767,5764,5767,5723,5594,5721,5722,5761,5721,5761,5653,5769,5771,5727,5727,5728,5769,5725,5726,5766,5766,5768,5725,5768,5594,5724,5594,5768,5767,5721,5653,5720,5993,5856,5986,5987,5993,5988,5856,5993,5987,5988,5989,5991,5986,5992,5994,5993,5994,5989,6293,6292,6290,6286,6280,6292,6291,6290,6294,6292,6289,6290,5861,6292,6280,6289,6292,5861,6002,5862,5995,5996,6002,5997,5862,6002,5996,5999,5996,5997,5856,5999,5986,5996,5999,5856,5997,5998,6e3,5999,6e3,5992,5995,6001,6003,6002,6003,5998,5996,5863,5862,5857,5996,5856,5863,5996,5857,5864,5863,5857,5865,5864,5858,5866,5865,5859,6281,5860,5861,5866,6281,5867,5860,6281,5866,6285,6284,6282,6277,6271,6284,6288,6287,6280,6283,6282,6287,6287,5861,6280,6281,6287,6282,5861,6287,6281,6284,6281,6282,5867,6284,6271,6281,6284,5867,6011,5868,6004,6005,6011,6006,5868,6011,6005,6008,6005,6006,5862,6008,5995,6005,6008,5862,6006,6007,6009,6008,6009,6001,6004,6010,6012,6011,6012,6007,6005,5869,5868,5863,6005,5862,5869,6005,5863,5870,5869,5863,5871,5870,5864,5872,5871,5865,6272,5866,5867,5872,6272,5873,5866,6272,5872,6276,6275,6273,6268,6262,6275,6279,6278,6271,6274,6273,6278,6278,5867,6271,6272,6278,6273,5867,6278,6272,6275,6272,6273,5873,6275,6262,6272,6275,5873,6020,5874,6013,6014,6020,6015,5874,6020,6014,6017,6014,6015,5868,6017,6004,6014,6017,5868,6015,6016,6018,6017,6018,6010,6013,6019,6021,6020,6021,6016,6014,5875,5874,5869,6014,5868,5875,6014,5869,5876,5875,5869,5877,5876,5870,5878,5877,5871,6263,5872,5873,5878,6263,5879,5872,6263,5878,6267,6266,6264,6259,6253,6266,6270,6269,6262,6265,6264,6269,6269,5873,6262,6263,6269,6264,5873,6269,6263,6266,6263,6264,5879,6266,6253,6263,6266,5879,6029,5880,6022,6023,6029,6024,5880,6029,6023,6026,6023,6024,5874,6026,6013,6023,6026,5874,6024,6025,6027,6026,6027,6019,6022,6028,6030,6029,6030,6025,6023,5881,5880,5875,6023,5874,5881,6023,5875,5882,5881,5875,5883,5882,5876,5884,5883,5877,6254,5878,5879,5884,6254,5885,5878,6254,5884,6258,6257,6255,6250,6244,6257,6261,6260,6253,6256,6255,6260,6260,5879,6253,6254,6260,6255,5879,6260,6254,6257,6254,6255,5885,6257,6244,6254,6257,5885,6038,5886,6031,6032,6038,6033,5886,6038,6032,6035,6032,6033,5880,6035,6022,6032,6035,5880,6033,6034,6036,6035,6036,6028,6031,6037,6039,6038,6039,6034,6032,5887,5886,5881,6032,5880,5887,6032,5881,5888,5887,5881,5889,5888,5882,5890,5889,5883,6245,5884,5885,5890,6245,5891,5884,6245,5890,6249,6248,6246,6241,6235,6248,6252,6251,6244,6247,6246,6251,6251,5885,6244,6245,6251,6246,5885,6251,6245,6248,6245,6246,5891,6248,6235,6245,6248,5891,6047,5892,6040,6041,6047,6042,5892,6047,6041,6044,6041,6042,5886,6044,6031,6041,6044,5886,6042,6043,6045,6044,6045,6037,6040,6046,6048,6047,6048,6043,6041,5893,5892,5887,6041,5886,5893,6041,5887,5894,5893,5887,5895,5894,5888,5896,5895,5889,6236,5890,5891,5896,6236,5897,5890,6236,5896,6240,6239,6237,6232,6228,6239,6243,6242,6235,6238,6237,6242,6242,5891,6235,6236,6242,6237,5891,6242,6236,6239,6236,6237,5897,6239,6228,6236,6239,5897,5899,6049,6051,6053,6050,6051,5892,6053,6040,6050,6053,5892,6051,6052,6054,6053,6054,6046,6050,5900,5899,5893,6050,5892,5900,6050,5893,5901,5900,5893,5902,5901,5894,5903,5902,5895,6229,5896,5897,5903,6229,5904,5896,6229,5903,6234,6233,6228,6231,6230,6233,6233,5897,6228,6229,6233,6230,5897,6233,6229,6219,5904,6229,6063,5906,6055,6056,6063,6057,5906,6063,6056,6059,6056,6057,5899,6059,6049,6056,6059,5899,6057,6058,6061,6059,6061,6060,6055,6062,6064,6063,6064,6058,6056,5907,5906,5900,6056,5899,5907,6056,5900,5908,5907,5900,5909,5908,5901,5910,5909,5902,6220,5903,5904,5910,6220,5911,5903,6220,5910,6224,6223,6221,6216,6210,6223,6227,6226,6219,6222,6221,6226,6226,5904,6219,6220,6226,6221,5904,6226,6220,6223,6220,6221,5911,6223,6210,6220,6223,5911,6072,5912,6065,6066,6072,6067,5912,6072,6066,6069,6066,6067,5906,6069,6055,6066,6069,5906,6067,6068,6070,6069,6070,6062,6065,6071,6073,6072,6073,6068,6066,5913,5912,5907,6066,5906,5913,6066,5907,5914,5913,5907,5915,5914,5908,5916,5915,5909,6211,5910,5911,5916,6211,5917,5910,6211,5916,6215,6214,6212,6207,6201,6214,6218,6217,6210,6213,6212,6217,6217,5911,6210,6211,6217,6212,5911,6217,6211,6214,6211,6212,5917,6214,6201,6211,6214,5917,6081,5918,6074,6075,6081,6076,5918,6081,6075,6078,6075,6076,5912,6078,6065,6075,6078,5912,6076,6077,6079,6078,6079,6071,6074,6080,6082,6081,6082,6077,6075,5919,5918,5913,6075,5912,5919,6075,5913,5920,5919,5913,5921,5920,5914,5922,5921,5915,6202,5916,5917,5922,6202,5923,5916,6202,5922,6206,6205,6203,6198,6192,6205,6209,6208,6201,6204,6203,6208,6208,5917,6201,6202,6208,6203,5917,6208,6202,6205,6202,6203,5923,6205,6192,6202,6205,5923,6090,5924,6083,6084,6090,6085,5924,6090,6084,6087,6084,6085,5918,6087,6074,6084,6087,5918,6085,6086,6088,6087,6088,6080,6083,6089,6091,6090,6091,6086,6084,5925,5924,5919,6084,5918,5925,6084,5919,5926,5925,5919,5927,5926,5920,5928,5927,5921,6193,5922,5923,5928,6193,5929,5922,6193,5928,6197,6196,6194,6189,6183,6196,6200,6199,6192,6195,6194,6199,6199,5923,6192,6193,6199,6194,5923,6199,6193,6196,6193,6194,5929,6196,6183,6193,6196,5929,6099,5930,6092,6093,6099,6094,5930,6099,6093,6096,6093,6094,5924,6096,6083,6093,6096,5924,6094,6095,6097,6096,6097,6089,6092,6098,6100,6099,6100,6095,6093,5931,5930,5925,6093,5924,5931,6093,5925,5932,5931,5925,5933,5932,5926,5934,5933,5927,6184,5928,5929,5934,6184,5935,5928,6184,5934,6188,6187,6185,6180,6174,6187,6191,6190,6183,6186,6185,6190,6190,5929,6183,6184,6190,6185,5929,6190,6184,6187,6184,6185,5935,6187,6174,6184,6187,5935,6108,5936,6101,6102,6108,6103,5936,6108,6102,6105,6102,6103,5930,6105,6092,6102,6105,5930,6103,6104,6106,6105,6106,6098,6101,6107,6109,6108,6109,6104,6102,5937,5936,5931,6102,5930,5937,6102,5931,5938,5937,5931,5939,5938,5932,5940,5939,5933,6175,5934,5935,5940,6175,5941,5934,6175,5940,6179,6178,6176,6171,6165,6178,6182,6181,6174,6177,6176,6181,6181,5935,6174,6175,6181,6176,5935,6181,6175,6178,6175,6176,5941,6178,6165,6175,6178,5941,6117,5942,6110,6111,6117,6112,5942,6117,6111,6114,6111,6112,5936,6114,6101,6111,6114,5936,6112,6113,6115,6114,6115,6107,6110,6116,6118,6117,6118,6113,6111,5943,5942,5937,6111,5936,5943,6111,5937,5944,5943,5937,5945,5944,5938,5946,5945,5939,6166,5940,5941,5946,6166,5947,5940,6166,5946,6170,6169,6167,6162,6156,6169,6173,6172,6165,6168,6167,6172,6172,5941,6165,6166,6172,6167,5941,6172,6166,6169,6166,6167,5947,6169,6156,6166,6169,5947,6122,6119,6120,5942,6122,6110,6119,6122,5942,6120,6121,6123,6122,6123,6116,6124,6125,6121,6161,6160,6158,6164,6163,6156,6159,6158,6163,6163,5947,6156,6157,6163,6158,5947,6163,6157,5991,5956,5848,5956,5989,5994,5956,5991,5989,5957,5994,5992,5992,6e3,5957,5990,5991,5848,6003,5958,5998,5959,5958,6003,5998,5958,6e3,5960,6007,6012,5959,6001,6009,5961,6010,6018,5957,6ee3,7002,7001,7002,6994,6997,7003,7005,7004,7005,7e3,6998,6833,6832,6827,6998,6826,6833,6998,6827,6834,6833,6827,6835,6834,6828,6836,6835,6829,7071,6830,6831,6836,7071,6837,6830,7071,6836,7075,7074,7072,7067,7061,7074,7078,7077,7070,7073,7072,7077,7077,6831,7070,7071,7077,7072,6831,7077,7071,7074,7071,7072,6837,7074,7061,7071,7074,6837,7013,6838,7006,7007,7013,7008,6838,7013,7007,7010,7007,7008,6832,7010,6997,7007,7010,6832,7008,7009,7011,7010,7011,7003,7006,7012,7014,7013,7014,7009,7007,6839,6838,6833,7007,6832,6839,7007,6833,6840,6839,6833,6841,6840,6834,6842,6841,6835,7062,6836,6837,6842,7062,6843,6836,7062,6842,7066,7065,7063,7058,7052,7065,7069,7068,7061,7064,7063,7068,7068,6837,7061,7062,7068,7063,6837,7068,7062,7065,7062,7063,6843,7065,7052,7062,7065,6843,7018,7015,7016,6838,7018,7006,7015,7018,6838,7016,7017,7019,7018,7019,7012,7020,7021,7017,7057,7056,7054,7060,7059,7052,7055,7054,7059,7059,6843,7052,7053,7059,7054,6843,7059,7053,6887,6852,6744,6852,6885,6890,6852,6887,6885,6853,6890,6888,6888,6896,6853,6886,6887,6744,6899,6854,6894,6855,6854,6899,6894,6854,6896,6856,6903,6908,6855,6897,6905,6857,6906,6914,6853,6896,6854,6886,6745,6883,6744,6745,6886,6884,6886,6883,6753,6883,6746,6883,6753,6752,6753,6746,6747,6855,6899,6897,6906,6857,6908,6903,6856,6905,6914,6912,6858,6917,6858,6912,6859,6858,6917,6859,6915,6923,6859,6917,6915,6860,6923,6921,6926,6860,6921,6861,6860,6926,6861,6924,6932,6863,6933,6941,6865,6942,6950,6864,6939,6944,6862,6930,6935,6866,6948,6794,6861,6926,6924,6933,6863,6935,6930,6862,6932,6942,6865,6944,6947,6945,6956,6948,6866,6950,6939,6864,6941,6956,6957,6794,6749,6756,6755,6749,6750,7185,7190,6750,6751,7185,6750,7190,7185,7190,7186,7191,7190,6751,6748,6755,6754,6756,7185,6757,7051,7189,7187,7051,7187,7191,7050,7184,7182,7049,7179,7184,7051,7191,6751,7184,7050,7049,7051,7050,7189,7049,7181,7179,7050,7182,7189,7048,7173,7181,7047,7170,7175,7048,7175,7173,7047,7175,7048,7046,7172,7047,7172,7046,7164,7049,7048,7181,7045,7166,7046,7045,7161,7166,7044,7155,7163,7043,7152,7157,7044,7157,7155,7045,7163,7161,7042,7146,7154,7041,7143,7148,7040,7137,7145,7041,7145,7143,7042,7148,7146,7043,7154,7152,7045,7044,7163,7040,7139,7137,7044,7043,7157,7042,7154,7043,7040,7145,7041,7042,7041,7148,7040,7039,7139,7039,7136,7134,7038,7130,7128,7038,7128,7136,7038,7136,7039,6801,7121,7127,7130,7038,7037,7130,7037,7127,7139,7039,7134,7127,7121,7115,6867,6957,6954,6794,6957,6867,6867,6954,6960,6868,6958,6966,6958,6868,6960,6966,6869,6868,6964,6869,6966,6869,6964,6969,6871,6973,6978,6873,6982,6987,6872,6976,6984,6870,6967,6975,6874,6985,6993,6870,6969,6967,6871,6975,6973,6872,6978,6976,6873,6984,6982,6875,6991,6996,6991,6875,6993,6985,6874,6987,6996,6876,6875,6876,6994,7002,6877,7e3,7005,7ee3,7713,7712,7718,7719,8e3,7712,7718,8e3,8004,8002,8001,7996,8004,8003,8007,8005,7999,8002,8007,8006,8006,7999,7713,8e3,8001,8006,7713,8e3,8006,8003,8001,8e3,7719,7990,8003,8ee3,9035,9016,9017,9036,9160,9159,9035,9161,9160,9018,9158,9157,9039,9156,9155,9040,9155,9020,9038,9157,9156,9037,9159,9158,9041,9154,9153,9044,9043,9152,9043,9042,9153,9046,9045,9150,9047,9148,9147,9049,9048,9147,9046,9149,9148,9045,9044,9151,9019,9020,9154,9051,9050,9145,9053,9052,9143,9052,9051,9144,9055,9054,9141,9056,9139,9138,9057,9138,9137,9055,9140,9139,9054,9053,9142,9021,9059,9136,9061,9060,9135,9060,9021,9022,9023,9062,9133,9063,9132,9131,9065,9064,9131,9023,9024,9132,9062,9061,9134,9059,9058,9137,9050,9049,9146,9025,9065,9130,9067,9066,9129,9027,9068,9127,9068,9067,9128,9070,9069,9126,9072,9071,9124,9073,9072,9123,9071,9070,9125,9069,9027,9028,9074,9121,9120,9076,9119,9118,9076,9075,9120,9079,9078,9117,9080,9029,9030,9081,9080,9115,9029,9079,9116,9077,9118,9117,9073,9122,9121,9083,9082,9113,9084,9111,9110,9083,9112,9111,9086,9109,9108,9088,9107,9106,9089,9106,9105,9087,9108,9107,9085,9110,9109,9031,9104,9103,9092,9102,9101,9091,9103,9102,9032,9100,9099,9095,9098,9097,9096,9097,9034,9094,9099,9098,9093,9101,9100,9090,9105,9104,9082,9081,9114,9066,9025,9026,9172,9162,9163,9174,9173,9234,9173,9172,9235,9175,9164,9165,9177,9176,9231,9178,9177,9230,9176,9175,9232,9164,9174,9233,9180,9179,9228,9182,9181,9226,9181,9180,9227,9184,9183,9224,9166,9185,9222,9186,9166,9167,9185,9184,9223,9183,9182,9225,9179,9178,9229,9187,9186,9221,9168,9188,9219,9189,9218,9217,9168,9169,9218,9191,9216,9215,9193,9214,9213,9194,9213,9212,9192,9215,9214,9190,9217,9216,9196,9211,9210,9198,9209,9208,9197,9210,9209,9200,9207,9206,9202,9205,9204,9203,9204,9171,9201,9206,9205,9199,9208,9207,9195,9212,9211,9188,9187,9220,9242,9236,9301,9243,9300,9244,9242,9301,9243,9246,9245,9298,9248,9247,9296,9247,9246,9297,9245,9244,9298,9250,9249,9293,9252,9251,9292,9251,9250,9292,9254,9253,9290,9256,9255,9288,9255,9254,9289,9253,9252,9291,9249,9248,9295,9238,9256,9239,9258,9257,9285,9259,9284,9283,9259,9258,9284,9261,9282,9281,9264,9263,9280,9263,9262,9281,9260,9283,9282,9266,9265,9277,9268,9267,9275,9267,9266,9276,9270,9269,9273,9271,9272,9240,9270,9273,9272,9269,9268,9275,9265,9264,9278,9257,9238,9239,9312,9375,9303,9314,9373,9374,9313,9374,9375,9315,9372,9305,9317,9370,9371,9318,9369,9370,9316,9371,9372,9304,9305,9373,9320,9367,9368,9322,9365,9366,9321,9366,9367,9324,9363,9364,9306,9307,9362,9326,9361,9307,9325,9362,9363,9323,9364,9365,9319,9368,9369,9327,9360,9361,9308,9309,9359,9329,9330,9357,9308,9329,9358,9331,9332,9355,9333,9334,9353,9334,9335,9352,9332,9333,9354,9330,9331,9356,9336,9337,9350,9338,9339,9348,9337,9338,9349,9340,9341,9346,9342,9343,9344,9343,9310,9311,9341,9342,9345,9339,9340,9347,9335,9336,9351,9328,9359,9360,9380,9441,9377,9382,9439,9381,9381,9440,9441,9384,9437,9438,9385,9386,9436,9385,9436,9437,9383,9438,9382,9387,9388,9433,9389,9390,9431,9389,9432,9388,9392,9429,9430,9393,9394,9427,9392,9393,9429,9390,9391,9431,9386,9387,9435,9426,9427,9394,9396,9397,9425,9399,9422,9398,9397,9398,9423,9401,9420,9421,9403,9418,9419,9402,9419,9420,9400,9421,9422,9404,9405,9416,9406,9407,9414,9405,9406,9415,9409,9412,9413,9410,9378,9379,9409,9410,9411,9408,9413,9414,9403,9404,9417,9396,9425,9426,9452,9442,9443,9454,9453,9514,9453,9452,9515,9455,9444,9445,9457,9456,9511,9458,9457,9510,9456,9455,9512,9444,9454,9513,9460,9459,9508,9462,9461,9506,9461,9460,9507,9464,9463,9504,9446,9465,9502,9466,9446,9447,9465,9464,9503,9463,9462,9505,9459,9458,9509,9467,9466,9501,9448,9468,9499,9469,9498,9497,9448,9449,9498,9471,9496,9495,9473,9494,9493,9474,9493,9492,9472,9495,9494,9470,9497,9496,9476,9491,9490,9478,9489,9488,9477,9490,9489,9480,9487,9486,9482,9485,9484,9483,9484,9451,9481,9486,9485,9479,9488,9487,9475,9492,9491,9468,9467,9500,9522,9516,9581,9523,9580,9524,9523,9522,9581,9526,9525,9577,9528,9527,9576,9527,9526,9577,9524,9579,9578,9530,9529,9574,9532,9531,9572,9531,9530,9573,9534,9533,9569,9535,9568,9567,9535,9534,9568,9533,9532,9570,9529,9528,9575,9519,9518,9536,9537,9566,9538,9540,9539,9564,9538,9565,9539,9541,9562,9561,9543,9560,9559,9542,9561,9560,9540,9563,9541,9545,9558,9557,9548,9547,9556,9546,9557,9547,9550,9549,9554,9551,9552,9520,9550,9553,9552,9549,9548,9555,9544,9559,9558,9537,9518,9519,9592,9655,9583,9594,9653,9654,9593,9654,9655,9595,9652,9585,9597,9650,9651,9598,9649,9650,9596,9651,9652,9584,9585,9653,9600,9647,9648,9602,9645,9646,9601,9646,9647,9604,9643,9644,9586,9587,9642,9606,9641,9587,9605,9642,9643,9603,9644,9645,9599,9648,9649,9607,9640,9641,9588,9589,9639,9609,9610,9637,9588,9609,9638,9611,9612,9635,9613,9614,9633,9614,9615,9632,9612,9613,9634,9610,9611,9636,9616,9617,9630,9618,9619,9628,9617,9618,9629,9620,9621,9626,9622,9623,9624,9623,9590,9591,9621,9622,9625,9619,9620,9627,9615,9616,9631,9608,9639,9640,9660,9721,9657,9662,9719,9720,9661,9720,9721,9664,9717,9663,9665,9666,9716,9665,9716,9717,9663,9718,9662,9667,9668,9713,9669,9670,9711,9669,9712,9668,9671,9672,9709,9673,9674,9708,9672,9673,9709,9670,9671,9710,9666,9667,9714,9674,9675,9707,9676,9677,9704,9679,9702,9703,9677,9678,9703,9680,9681,9700,9682,9683,9699,9681,9682,9700,9680,9701,9679,9684,9685,9696,9687,9694,9686,9686,9695,9685,9688,9689,9693,9658,9659,9691,9689,9690,9691,9688,9693,9694,9683,9684,9698,9676,9705,9675,9732,9722,9723,9734,9733,9794,9733,9732,9795,9735,9724,9725,9737,9736,9791,9738,9737,9790,9736,9735,9792,9724,9734,9793,9740,9739,9788,9742,9741,9786,9741,9740,9787,9744,9743,9784,9726,9745,9782,9746,9726,9727,9745,9744,9783,9743,9742,9785,9739,9738,9789,9747,9746,9781,9728,9748,9779,9749,9778,9777,9728,9729,9778,9751,9776,9775,9753,9774,9773,9754,9773,9772,9752,9775,9774,9750,9777,9776,9756,9771,9770,9758,9769,9768,9757,9770,9769,9760,9767,9766,9762,9765,9764,9763,9764,9731,9761,9766,9765,9759,9768,9767,9755,9772,9771,9748,9747,9780,9802,9796,9861,9803,9860,9804,9803,9802,9861,9806,9805,9858,9807,9856,9808,9806,9857,9807,9804,9859,9858,9810,9809,9854,9811,9852,9812,9811,9810,9852,9814,9813,9849,9816,9815,9848,9815,9814,9849,9812,9851,9813,9809,9808,9855,9798,9816,9847,9817,9846,9845,9819,9844,9820,9818,9845,9844,9821,9842,9841,9823,9840,9839,9822,9841,9823,9820,9843,9842,9825,9838,9837,9828,9827,9835,9826,9837,9836,9830,9829,9833,9831,9832,9800,9830,9833,9832,9829,9828,9835,9824,9839,9838,9817,9798,9846,9872,9935,9863,9874,9933,9934,9873,9934,9935,9875,9932,9865,9877,9930,9931,9878,9929,9930,9876,9931,9932,9864,9865,9933,9880,9927,9928,9882,9925,9926,9881,9926,9927,9884,9923,9924,9866,9867,9922,9886,9921,9867,9885,9922,9923,9883,9924,9925,9879,9928,9929,9887,9920,9921,9868,9869,9919,9889,9890,9917,9868,9889,9918,9891,9892,9915,9893,9894,9913,9894,9895,9912,9892,9893,9914,9890,9891,9916,9896,9897,9910,9898,9899,9908,9897,9898,9909,9900,9901,9906,9902,9903,9904,9903,9870,9871,9901,9902,9905,9899,9900,9907,9895,9896,9911,9888,9919,9920,180,177,178,183,175,181,178,182,183,194,186,192,181,193,194,197,184,195,192,196,197,203,200,201,195,202,203,206,198,204,201,205,206,215,209,213,204,214,215,218,207,216,213,217,218,224,221,222,216,223,224,227,219,225,222,226,227,236,230,234,225,235,236,239,228,237,234,238,239,245,242,243,237,244,245,248,240,246,243,247,248,253,250,251,246,252,253,251,254,255,250,324,254,322,323,324,249,333,323,331,332,333,327,336,332,334,335,336,326,342,335,340,341,342,339,345,341,343,344,345,338,353,344,351,352,353,348,356,352,354,355,356,347,362,355,360,361,362,359,365,361,363,364,365,358,371,364,369,370,371,368,374,370,372,373,374,367,379,373,377,378,379,376,382,378,380,381,382,51,384,381,383,54,384,52,55,54,50,58,57,57,53,52,61,69,68,68,56,50,59,72,71,71,67,61,75,78,77,77,70,59,73,81,80,80,76,75,84,90,89,89,79,73,82,93,92,92,88,84,96,99,98,98,91,82,94,102,101,101,97,96,105,110,109,109,100,94,103,113,112,112,108,105,116,119,118,118,111,103,114,122,121,121,117,116,124,127,126,126,120,114,128,125,124,55,53,5,53,58,6,9,67,10,7,6,58,294,293,361,255,168,251,167,251,168,253,166,246,164,163,243,165,164,248,72,10,67,11,70,12,78,76,14,70,78,13,81,79,16,17,90,18,76,81,15,19,93,20,91,99,22,20,91,21,97,102,24,99,97,23,18,88,19,110,26,100,108,27,110,28,113,29,111,119,31,29,111,30,119,117,32,122,120,34,117,122,33,35,127,36,37,129,38,36,125,37,245,243,163,237,160,239,162,161,237,234,158,236,239,159,234,236,157,225,156,155,227,155,154,222,153,39,216,154,153,224,218,151,213,215,149,204,213,150,215,216,152,218,148,147,206,146,145,203,147,146,201,195,143,197,192,141,194,197,142,192,145,144,195,194,140,181,183,181,139,138,137,178,137,136,180,562,559,561,565,557,564,560,564,559,575,568,574,563,574,557,578,566,577,573,577,568,584,581,583,576,583,566,587,579,586,582,586,581,596,590,595,585,595,579,599,588,598,594,598,590,605,602,604,597,604,588,608,600,607,603,607,602,616,611,615,606,615,600,619,609,618,614,618,611,625,622,624,617,624,609,628,620,627,623,627,622,633,630,632,626,632,620,631,634,630,434,437,435,432,440,438,439,435,440,443,451,449,450,438,451,441,454,452,453,449,454,457,460,458,459,452,460,455,463,461,462,458,463,466,472,470,471,461,472,464,475,473,474,470,475,478,481,479,480,473,481,476,484,482,483,479,484,487,492,490,491,482,492,485,495,493,494,490,495,498,501,499,500,493,501,496,504,502,503,499,504,506,509,507,508,502,509,510,507,511,437,389,390,391,440,435,394,449,451,454,395,396,396,452,454,399,458,460,400,463,458,398,460,452,402,472,461,404,475,470,405,473,475,403,470,472,401,461,463,407,481,473,635,550,551,631,549,550,628,546,547,623,545,546,617,543,544,617,542,543,625,544,545,614,540,541,616,539,540,603,536,537,605,535,536,608,537,538,619,541,542,597,424,535,408,479,481,409,484,479,412,490,492,414,493,495,416,501,493,413,495,490,411,492,482,417,499,501,418,504,499,419,502,504,509,420,421,422,511,507,421,507,509,597,534,424,594,532,533,596,531,532,599,533,534,582,528,529,576,526,527,576,525,526,584,527,528,587,529,530,524,578,573,573,523,524,575,522,523,565,520,521,520,565,560,562,518,519,819,816,818,822,814,821,817,821,816,832,825,831,820,831,814,835,823,834,830,834,825,841,838,840,833,840,823,844,836,843,839,843,838,853,847,852,842,852,836,856,845,855,851,855,847,862,859,861,854,861,845,865,857,864,860,864,859,873,868,872,863,872,857,876,866,875,871,875,868,882,879,881,874,881,866,885,877,884,880,884,879,890,887,889,883,889,877,888,891,887,691,694,692,689,697,695,696,692,697,700,708,706,707,695,708,698,711,709,710,706,711,714,717,715,716,709,717,712,720,718,719,715,720,723,729,727,728,718,729,721,732,730,731,727,732,735,738,736,737,730,738,733,741,739,740,736,741,744,749,747,748,739,749,742,752,750,751,747,752,755,758,756,757,750,758,753,761,759,760,756,761,763,766,764,765,759,766,767,764,768,694,646,647,648,697,692,651,706,708,711,652,653,653,709,711,656,715,717,657,720,715,655,717,709,659,729,718,661,732,727,662,730,732,660,727,729,658,718,720,664,738,730,892,807,808,888,806,807,885,803,804,880,802,803,874,800,801,874,799,800,882,801,802,871,797,798,873,796,797,860,793,794,862,792,793,865,794,795,876,798,799,854,681,792,665,736,738,666,741,736,669,747,749,671,750,752,673,758,750,670,752,747,668,749,739,674,756,758,675,761,756,676,759,761,766,677,678,679,768,764,678,764,766,854,791,681,851,789,790,853,788,789,856,790,791,839,785,786,833,783,784,833,782,783,841,784,785,844,786,787,781,835,830,830,780,781,832,779,780,822,777,778,777,822,817,819,775,776,1076,1073,1074,1079,1071,1077,1074,1078,1079,1089,1082,1087,1077,1088,1089,1092,1080,1090,1087,1091,1092,1098,1095,1096,1090,1097,1098,1101,1093,1099,1096,1100,1101,1110,1104,1108,1099,1109,1110,1113,1102,1111,1108,1112,1113,1119,1116,1117,1111,1118,1119,1122,1114,1120,1117,1121,1122,1130,1125,1128,1120,1129,1130,1133,1123,1131,1128,1132,1133,1139,1136,1137,1131,1138,1139,1142,1134,1140,1137,1141,1142,1147,1144,1145,1140,1146,1147,1145,1148,1149,948,951,950,946,954,953,953,949,948,957,965,964,964,952,946,955,968,967,967,963,957,971,974,973,973,966,955,969,977,976,976,972,971,980,986,985,985,975,969,978,989,988,988,984,980,992,995,994,994,987,978,990,998,997,997,993,992,1001,1006,1005,1005,996,990,999,1009,1008,1008,1004,1001,1012,1015,1014,1014,1007,999,1010,1018,1017,1017,1013,1012,1020,1023,1022,1022,1016,1010,1024,1021,1020,904,903,951,949,954,905,908,963,909,968,909,963,910,966,911,974,972,913,972,977,914,966,974,912,916,986,917,918,989,919,919,987,920,917,984,918,977,975,915,987,995,921,1149,1064,1145,1145,1063,1147,1061,1060,1142,1060,1059,1137,1058,1057,1131,1131,1056,1133,1059,1058,1139,1128,1054,1130,1130,1053,1120,1051,1050,1117,1050,1049,1119,1052,1051,1122,1133,1055,1128,1049,938,1111,995,993,922,993,998,923,926,1004,927,928,1007,929,1007,1015,930,927,1009,928,925,1006,926,1015,1013,931,1013,1018,932,1018,1016,933,1023,934,1016,936,1025,937,935,1021,936,1111,1048,1113,1108,1046,1110,1110,1045,1099,1113,1047,1108,1043,1042,1096,1041,1040,1090,1090,1039,1092,1042,1041,1098,1044,1043,1101,1038,1092,1039,1087,1037,1089,1089,1036,1077,1035,1034,1079,1074,1079,1034,1033,1032,1076,1336,1333,1335,1339,1331,1338,1334,1338,1333,1350,1342,1349,1337,1349,1331,1353,1340,1352,1348,1352,1342,1359,1356,1358,1351,1358,1340,1362,1354,1361,1357,1361,1356,1371,1365,1370,1360,1370,1354,1374,1363,1373,1369,1373,1365,1380,1377,1379,1372,1379,1363,1383,1375,1382,1378,1382,1377,1392,1386,1391,1381,1391,1375,1395,1384,1394,1390,1394,1386,1401,1398,1400,1393,1400,1384,1404,1396,1403,1399,1403,1398,1409,1406,1408,1402,1408,1396,1407,1410,1406,1406,1480,1478,1478,1479,1405,1405,1489,1487,1487,1488,1483,1483,1492,1490,1490,1491,1482,1482,1498,1496,1496,1497,1495,1495,1501,1499,1499,1500,1494,1494,1509,1507,1507,1508,1504,1504,1512,1510,1510,1511,1503,1503,1518,1516,1516,1517,1515,1515,1521,1519,1519,1520,1514,1514,1527,1525,1525,1526,1524,1524,1530,1528,1528,1529,1523,1523,1535,1533,1533,1534,1532,1532,1538,1536,1536,1537,1207,1207,1540,1539,1539,1210,1208,1208,1211,1209,1206,1214,1212,1213,1209,1214,1217,1225,1223,1224,1212,1225,1215,1228,1226,1227,1223,1228,1231,1234,1232,1233,1226,1234,1229,1237,1235,1236,1232,1237,1240,1246,1244,1245,1235,1246,1238,1249,1247,1248,1244,1249,1252,1255,1253,1254,1247,1255,1250,1258,1256,1257,1253,1258,1261,1266,1264,1265,1256,1266,1259,1269,1267,1268,1264,1269,1272,1275,1273,1274,1267,1275,1270,1278,1276,1277,1273,1278,1280,1283,1281,1282,1276,1283,1284,1281,1285,1161,1209,1211,1162,1214,1209,1165,1223,1225,1214,1162,1163,1517,1449,1450,1411,1324,1325,1323,1407,1409,1409,1322,1323,1399,1319,1320,1404,1320,1321,1228,1166,1167,1167,1226,1228,1170,1232,1234,1169,1234,1226,1172,1235,1237,1173,1246,1235,1171,1237,1232,1175,1249,1244,1178,1255,1247,1176,1247,1249,1180,1258,1253,1179,1253,1255,1174,1244,1246,1266,1182,1183,1264,1183,1184,1184,1269,1264,1187,1275,1267,1185,1267,1269,1188,1273,1275,1190,1276,1278,1189,1278,1273,1191,1283,1276,1193,1285,1281,1192,1281,1283,1319,1399,1401,1393,1316,1317,1393,1317,1318,1390,1314,1315,1395,1315,1316,1392,1313,1314,1383,1311,1312,1378,1310,1311,1372,1195,1309,1380,1309,1310,1374,1307,1308,1371,1305,1306,1369,1306,1307,1372,1308,1195,1362,1303,1304,1359,1301,1302,1357,1302,1303,1351,1299,1300,1348,1297,1298,1353,1298,1299,1351,1300,1301,1350,1296,1297,1295,1337,1339,1334,1293,1294,1336,1292,1293,1718,1715,1716,1721,1713,1719,1716,1720,1721,1731,1724,1729,1719,1730,1731,1734,1722,1732,1729,1733,1734,1740,1737,1738,1732,1739,1740,1743,1735,1741,1738,1742,1743,1752,1746,1750,1741,1751,1752,1755,1744,1753,1750,1754,1755,1761,1758,1759,1753,1760,1761,1764,1756,1762,1759,1763,1764,1772,1767,1770,1762,1771,1772,1775,1765,1773,1770,1774,1775,1781,1778,1779,1773,1780,1781,1784,1776,1782,1779,1783,1784,1789,1786,1787,1782,1788,1789,1787,1790,1791,1590,1593,1592,1588,1596,1595,1595,1591,1590,1599,1607,1606,1606,1594,1588,1597,1610,1609,1609,1605,1599,1613,1616,1615,1615,1608,1597,1611,1619,1618,1618,1614,1613,1622,1628,1627,1627,1617,1611,1620,1631,1630,1630,1626,1622,1634,1637,1636,1636,1629,1620,1632,1640,1639,1639,1635,1634,1643,1648,1647,1647,1638,1632,1641,1651,1650,1650,1646,1643,1654,1657,1656,1656,1649,1641,1652,1660,1659,1659,1655,1654,1662,1665,1664,1664,1658,1652,1666,1663,1662,1546,1545,1593,1591,1596,1547,1550,1605,1551,1610,1551,1605,1552,1608,1553,1616,1614,1555,1614,1619,1556,1608,1616,1554,1558,1628,1559,1560,1631,1561,1561,1629,1562,1559,1626,1560,1619,1617,1557,1629,1637,1563,1791,1706,1787,1787,1705,1789,1703,1702,1784,1702,1701,1779,1700,1699,1773,1773,1698,1775,1701,1700,1781,1770,1696,1772,1772,1695,1762,1693,1692,1759,1692,1691,1761,1694,1693,1764,1775,1697,1770,1691,1580,1753,1637,1635,1564,1635,1640,1565,1568,1646,1569,1570,1649,1571,1649,1657,1572,1569,1651,1570,1567,1648,1568,1657,1655,1573,1655,1660,1574,1660,1658,1575,1665,1576,1658,1578,1667,1579,1577,1663,1578,1753,1690,1755,1750,1688,1752,1752,1687,1741,1755,1689,1750,1685,1684,1738,1683,1682,1732,1732,1681,1734,1684,1683,1740,1686,1685,1743,1680,1734,1681,1729,1679,1731,1731,1678,1719,1677,1676,1721,1716,1721,1676,1675,1674,1718,1938,1941,1939,1936,1944,1942,1943,1939,1944,2243,2240,2242,2236,2242,2230,2241,2244,2240,1947,1950,1948,1949,1942,1950,1945,1953,1951,1952,1948,1953,1814,1807,1813,1815,1808,1814,1816,1809,1815,2235,2232,2234,2227,2234,2221,2238,2230,2237,2233,2237,2232,1956,1959,1957,1958,1951,1959,1954,1962,1960,1961,1957,1962,1820,1813,1819,1821,1814,1820,1822,1815,1821,2226,2223,2225,2218,2225,2212,2229,2221,2228,2224,2228,2223,1965,1968,1966,1967,1960,1968,1963,1971,1969,1970,1966,1971,1826,1819,1825,1827,1820,1826,1828,1821,1827,2217,2214,2216,2209,2216,2203,2220,2212,2219,2215,2219,2214,1974,1977,1975,1976,1969,1977,1972,1980,1978,1979,1975,1980,1832,1825,1831,1833,1826,1832,1834,1827,1833,2208,2205,2207,2200,2207,2194,2211,2203,2210,2206,2210,2205,1983,1986,1984,1985,1978,1986,1981,1989,1987,1988,1984,1989,1838,1831,1837,1839,1832,1838,1840,1833,1839,2199,2196,2198,2191,2198,2185,2202,2194,2201,2197,2201,2196,1992,1995,1993,1994,1987,1995,1990,1998,1996,1997,1993,1998,1844,1837,1843,1845,1838,1844,1846,1839,1845,2190,2187,2189,2182,2189,2178,2193,2185,2192,2188,2192,2187,1849,2001,1999,2001,2004,2002,2003,1996,2004,1851,1843,1850,1852,1844,1851,1853,1845,1852,2184,2178,2183,2181,2183,2180,2169,2179,1854,2007,2011,2008,2009,2010,2011,2005,2014,2012,2013,2008,2014,1858,1850,1857,1859,1851,1858,1860,1852,1859,2174,2171,2173,2166,2173,2160,2177,2169,2176,2172,2176,2171,2017,2020,2018,2019,2012,2020,2015,2023,2021,2022,2018,2023,1864,1857,1863,1865,1858,1864,1866,1859,1865,2165,2162,2164,2157,2164,2151,2168,2160,2167,2163,2167,2162,2026,2029,2027,2028,2021,2029,2024,2032,2030,2031,2027,2032,1870,1863,1869,1871,1864,1870,1872,1865,1871,2156,2153,2155,2148,2155,2142,2159,2151,2158,2154,2158,2153,2035,2038,2036,2037,2030,2038,2033,2041,2039,2040,2036,2041,1876,1869,1875,1877,1870,1876,1878,1871,1877,2147,2144,2146,2139,2146,2133,2150,2142,2149,2145,2149,2144,2044,2047,2045,2046,2039,2047,2042,2050,2048,2049,2045,2050,1882,1875,1881,1883,1876,1882,1884,1877,1883,2138,2135,2137,2130,2137,2124,2141,2133,2140,2136,2140,2135,2053,2056,2054,2055,2048,2056,2051,2059,2057,2058,2054,2059,1888,1881,1887,1889,1882,1888,1890,1883,1889,2129,2126,2128,2121,2128,2115,2132,2124,2131,2127,2131,2126,2062,2065,2063,2064,2057,2065,2060,2068,2066,2067,2063,2068,1894,1887,1893,1895,1888,1894,1896,1889,1895,2120,2117,2119,2112,2119,2106,2123,2115,2122,2118,2122,2117,2070,2073,2071,2072,2066,2073,2074,2071,2075,2111,2108,2110,2114,2106,2113,2109,2113,2108,1906,1944,1939,1910,1962,1957,1909,1959,1951,1911,1968,1960,1937,1940,1938,1807,1801,1800,1913,1977,1969,1915,1986,1978,1917,1995,1987,1919,2004,1996,1918,1998,1993,1916,1989,1984,1848,2010,2002,2001,2010,1999,1803,1809,1810,2239,2240,2244,1802,1808,1809,2101,2224,2226,2100,2218,2220,1855,2181,2175,2181,2169,2175,1921,2014,2008,1923,2023,2018,1925,2032,2027,1927,2041,2036,1926,2038,2030,1924,2029,2021,1928,2047,2039,1930,2056,2048,1931,2059,2054,1935,2075,2071,1934,2073,2066,1895,1901,1902,1894,1900,1901,2083,2139,2141,2085,2148,2150,2082,2136,2138,1902,1896,1895,2076,2109,2111,2386,2389,2387,2384,2392,2390,2391,2387,2392,2691,2688,2690,2684,2690,2678,2689,2692,2688,2395,2398,2396,2397,2390,2398,2393,2401,2399,2400,2396,2401,2262,2255,2261,2263,2256,2262,2264,2257,2263,2683,2680,2682,2675,2682,2669,2686,2678,2685,2681,2685,2680,2404,2407,2405,2406,2399,2407,2402,2410,2408,2409,2405,2410,2268,2261,2267,2269,2262,2268,2270,2263,2269,2674,2671,2673,2666,2673,2660,2677,2669,2676,2672,2676,2671,2413,2416,2414,2415,2408,2416,2411,2419,2417,2418,2414,2419,2274,2267,2273,2275,2268,2274,2276,2269,2275,2665,2662,2664,2657,2664,2651,2668,2660,2667,2663,2667,2662,2422,2425,2423,2424,2417,2425,2420,2428,2426,2427,2423,2428,2280,2273,2279,2281,2274,2280,2282,2275,2281,2656,2653,2655,2648,2655,2642,2659,2651,2658,2654,2658,2653,2431,2434,2432,2433,2426,2434,2429,2437,2435,2436,2432,2437,2286,2279,2285,2287,2280,2286,2288,2281,2287,2647,2644,2646,2639,2646,2633,2650,2642,2649,2645,2649,2644,2440,2443,2441,2442,2435,2443,2438,2446,2444,2445,2441,2446,2292,2285,2291,2293,2286,2292,2294,2287,2293,2638,2635,2637,2630,2637,2626,2641,2633,2640,2636,2640,2635,2297,2449,2447,2449,2452,2450,2451,2444,2452,2299,2291,2298,2300,2292,2299,2301,2293,2300,2632,2626,2631,2629,2631,2628,2617,2627,2302,2455,2459,2456,2457,2458,2459,2453,2462,2460,2461,2456,2462,2306,2298,2305,2307,2299,2306,2308,2300,2307,2622,2619,2621,2614,2621,2608,2625,2617,2624,2620,2624,2619,2465,2468,2466,2467,2460,2468,2463,2471,2469,2470,2466,2471,2312,2305,2311,2313,2306,2312,2314,2307,2313,2613,2610,2612,2605,2612,2599,2616,2608,2615,2611,2615,2610,2474,2477,2475,2476,2469,2477,2472,2480,2478,2479,2475,2480,2318,2311,2317,2319,2312,2318,2320,2313,2319,2604,2601,2603,2596,2603,2590,2607,2599,2606,2602,2606,2601,2483,2486,2484,2485,2478,2486,2481,2489,2487,2488,2484,2489,2324,2317,2323,2325,2318,2324,2326,2319,2325,2595,2592,2594,2587,2594,2581,2598,2590,2597,2593,2597,2592,2492,2495,2493,2494,2487,2495,2490,2498,2496,2497,2493,2498,2330,2323,2329,2331,2324,2330,2332,2325,2331,2586,2583,2585,2578,2585,2572,2589,2581,2588,2584,2588,2583,2501,2504,2502,2503,2496,2504,2499,2507,2505,2506,2502,2507,2336,2329,2335,2337,2330,2336,2338,2331,2337,2577,2574,2576,2569,2576,2563,2580,2572,2579,2575,2579,2574,2510,2513,2511,2512,2505,2513,2508,2516,2514,2515,2511,2516,2342,2335,2341,2343,2336,2342,2344,2337,2343,2568,2565,2567,2560,2567,2554,2571,2563,2570,2566,2570,2565,2518,2521,2519,2520,2514,2521,2522,2519,2523,2559,2556,2558,2562,2554,2561,2557,2561,2556,2354,2392,2387,2358,2410,2405,2357,2407,2399,2359,2416,2408,2385,2388,2386,2255,2249,2248,2361,2425,2417,2363,2434,2426,2365,2443,2435,2367,2452,2444,2366,2446,2441,2364,2437,2432,2296,2458,2450,2449,2458,2447,2251,2257,2258,2687,2688,2692,2250,2256,2257,2549,2672,2674,2548,2666,2668,2303,2629,2623,2629,2617,2623,2369,2462,2456,2371,2471,2466,2373,2480,2475,2375,2489,2484,2374,2486,2478,2372,2477,2469,2376,2495,2487,2378,2504,2496,2379,2507,2502,2383,2523,2519,2382,2521,2514,2343,2349,2350,2342,2348,2349,2531,2587,2589,2533,2596,2598,2530,2584,2586,2350,2344,2343,2524,2557,2559,2834,2837,2835,2832,2840,2838,2839,2835,2840,3143,3140,3142,3136,3142,3130,3141,3144,3140,2843,2846,2844,2845,2838,2846,2841,2849,2847,2848,2844,2849,2710,2703,2709,2711,2704,2710,2712,2705,2711,3135,3132,3134,3127,3134,3121,3138,3130,3137,3133,3137,3132,2852,2855,2853,2854,2847,2855,2850,2858,2856,2857,2853,2858,2716,2709,2715,2717,2710,2716,2718,2711,2717,3126,3123,3125,3118,3125,3112,3129,3121,3128,3124,3128,3123,2861,2864,2862,2863,2856,2864,2859,2867,2865,2866,2862,2867,2722,2715,2721,2723,2716,2722,2724,2717,2723,3117,3114,3116,3109,3116,3103,3120,3112,3119,3115,3119,3114,2870,2873,2871,2872,2865,2873,2868,2876,2874,2875,2871,2876,2728,2721,2727,2729,2722,2728,2730,2723,2729,3108,3105,3107,3100,3107,3094,3111,3103,3110,3106,3110,3105,2879,2882,2880,2881,2874,2882,2877,2885,2883,2884,2880,2885,2734,2727,2733,2735,2728,2734,2736,2729,2735,3099,3096,3098,3091,3098,3085,3102,3094,3101,3097,3101,3096,2888,2891,2889,2890,2883,2891,2886,2894,2892,2893,2889,2894,2740,2733,2739,2741,2734,2740,2742,2735,2741,3090,3087,3089,3082,3089,3076,3093,3085,3092,3088,3092,3087,2897,2900,2898,2899,2892,2900,2895,2903,2901,2902,2898,2903,2747,2739,2746,2748,2740,2747,2749,2741,2748,3081,3078,3080,3073,3080,3067,3084,3076,3083,3079,3083,3078,2906,2909,2907,2908,2901,2909,2904,2912,2910,2911,2907,2912,2754,2746,2753,2755,2747,2754,2756,2748,2755,3072,3069,3071,3064,3071,3058,3075,3067,3074,3070,3074,3069,2915,2918,2916,2917,2910,2918,2913,2921,2919,2920,2916,2921,2760,2753,2759,2761,2754,2760,2762,2755,2761,3063,3060,3062,3055,3062,3049,3066,3058,3065,3061,3065,3060,2924,2927,2925,2926,2919,2927,2922,2930,2928,2929,2925,2930,2766,2759,2765,2767,2760,2766,2768,2761,2767,3054,3051,3053,3046,3053,3040,3057,3049,3056,3052,3056,3051,2933,2936,2934,2935,2928,2936,2931,2939,2937,2938,2934,2939,2772,2765,2771,2773,2766,2772,2774,2767,2773,3045,3042,3044,3037,3044,3031,3048,3040,3047,3043,3047,3042,2942,2945,2943,2944,2937,2945,2940,2948,2946,2947,2943,2948,2778,2771,2777,2779,2772,2778,2780,2773,2779,3036,3033,3035,3028,3035,3022,3039,3031,3038,3034,3038,3033,2951,2954,2952,2953,2946,2954,2949,2957,2955,2956,2952,2957,2784,2777,2783,2785,2778,2784,2786,2779,2785,3027,3024,3026,3019,3026,3013,3030,3022,3029,3025,3029,3024,2960,2963,2961,2962,2955,2963,2958,2966,2964,2965,2961,2966,2790,2783,2789,2791,2784,2790,2792,2785,2791,3018,3015,3017,3010,3017,3004,3021,3013,3020,3016,3020,3015,2968,2971,2969,2970,2964,2971,2972,2969,2973,3009,3006,3008,3012,3004,3011,3007,3011,3006,2802,2840,2835,2804,2849,2844,2806,2858,2853,2805,2855,2847,2833,2836,2834,2697,2703,2704,2808,2867,2862,2809,2873,2865,2810,2876,2871,2811,2882,2874,2813,2891,2883,2815,2900,2892,2814,2894,2889,2812,2885,2880,2816,2903,2898,2699,2705,2706,2704,2698,2697,3002,3136,3138,2999,3124,3126,2998,3118,3120,2991,3088,3090,2817,2912,2907,2819,2921,2916,2821,2930,2925,2823,2939,2934,2822,2936,2928,2820,2927,2919,2824,2945,2937,2826,2954,2946,2827,2957,2952,2831,2973,2969,2830,2971,2964,2791,2797,2798,2790,2796,2797,2981,3037,3039,2980,3034,3036,2798,2792,2791,2974,3007,3009,3286,3289,3288,3284,3292,3291,3291,3287,3286,3595,3592,3593,3588,3594,3595,3593,3596,3597,3295,3298,3297,3297,3290,3284,3293,3301,3300,3300,3296,3295,3162,3155,3156,3163,3156,3157,3164,3157,3158,3587,3584,3585,3579,3586,3587,3590,3582,3588,3585,3589,3590,3304,3307,3306,3306,3299,3293,3302,3310,3309,3309,3305,3304,3168,3161,3162,3169,3162,3163,3170,3163,3164,3578,3575,3576,3570,3577,3578,3581,3573,3579,3576,3580,3581,3313,3316,3315,3315,3308,3302,3311,3319,3318,3318,3314,3313,3174,3167,3168,3175,3168,3169,3176,3169,3170,3569,3566,3567,3561,3568,3569,3572,3564,3570,3567,3571,3572,3322,3325,3324,3324,3317,3311,3320,3328,3327,3327,3323,3322,3180,3173,3174,3181,3174,3175,3182,3175,3176,3560,3557,3558,3552,3559,3560,3563,3555,3561,3558,3562,3563,3331,3334,3333,3333,3326,3320,3329,3337,3336,3336,3332,3331,3186,3179,3180,3187,3180,3181,3188,3181,3182,3551,3548,3549,3543,3550,3551,3554,3546,3552,3549,3553,3554,3340,3343,3342,3342,3335,3329,3338,3346,3345,3345,3341,3340,3192,3185,3186,3193,3186,3187,3194,3187,3188,3542,3539,3540,3534,3541,3542,3545,3537,3543,3540,3544,3545,3349,3352,3351,3351,3344,3338,3347,3355,3354,3354,3350,3349,3199,3191,3192,3200,3192,3193,3201,3193,3194,3533,3530,3531,3525,3532,3533,3536,3528,3534,3531,3535,3536,3358,3361,3360,3360,3353,3347,3356,3364,3363,3363,3359,3358,3206,3198,3199,3207,3199,3200,3208,3200,3201,3524,3521,3522,3516,3523,3524,3527,3519,3525,3522,3526,3527,3367,3370,3369,3369,3362,3356,3365,3373,3372,3372,3368,3367,3212,3205,3206,3213,3206,3207,3214,3207,3208,3515,3512,3513,3507,3514,3515,3518,3510,3516,3513,3517,3518,3376,3379,3378,3378,3371,3365,3374,3382,3381,3381,3377,3376,3218,3211,3212,3219,3212,3213,3220,3213,3214,3506,3503,3504,3498,3505,3506,3509,3501,3507,3504,3508,3509,3385,3388,3387,3387,3380,3374,3383,3391,3390,3390,3386,3385,3224,3217,3218,3225,3218,3219,3226,3219,3220,3497,3494,3495,3489,3496,3497,3500,3492,3498,3495,3499,3500,3394,3397,3396,3396,3389,3383,3392,3400,3399,3399,3395,3394,3230,3223,3224,3231,3224,3225,3232,3225,3226,3488,3485,3486,3480,3487,3488,3491,3483,3489,3486,3490,3491,3403,3406,3405,3405,3398,3392,3401,3409,3408,3408,3404,3403,3236,3229,3230,3237,3230,3231,3238,3231,3232,3479,3476,3477,3471,3478,3479,3482,3474,3480,3477,3481,3482,3412,3415,3414,3414,3407,3401,3410,3418,3417,3417,3413,3412,3242,3235,3236,3243,3236,3237,3244,3237,3238,3470,3467,3468,3462,3469,3470,3473,3465,3471,3468,3472,3473,3420,3423,3422,3422,3416,3410,3424,3421,3420,3461,3458,3459,3464,3456,3462,3459,3463,3464,3254,3292,3255,3256,3301,3257,3258,3310,3259,3257,3307,3258,3149,3155,3148,3155,3285,3148,3260,3319,3261,3261,3325,3262,3262,3328,3263,3263,3334,3264,3265,3343,3266,3267,3352,3268,3266,3346,3267,3264,3337,3265,3268,3355,3196,3591,3159,3158,3151,3157,3150,3156,3150,3157,3590,3588,3454,3578,3576,3451,3572,3570,3450,3542,3540,3443,3269,3364,3270,3271,3373,3272,3273,3382,3274,3275,3391,3276,3274,3388,3275,3272,3379,3273,3276,3397,3277,3278,3406,3279,3279,3409,3280,3283,3425,3246,3282,3423,3283,3243,3249,3242,3242,3248,3241,3491,3489,3433,3488,3486,3432,3250,3244,3251,3461,3459,3426,3738,3741,3740,3736,3744,3743,3743,3739,3738,4047,4044,4045,4040,4046,4047,4045,4048,4049,3747,3750,3749,3749,3742,3736,3745,3753,3752,3752,3748,3747,3614,3607,3608,3615,3608,3609,3616,3609,3610,4039,4036,4037,4031,4038,4039,4042,4034,4040,4037,4041,4042,3756,3759,3758,3758,3751,3745,3754,3762,3761,3761,3757,3756,3620,3613,3614,3621,3614,3615,3622,3615,3616,4030,4027,4028,4022,4029,4030,4033,4025,4031,4028,4032,4033,3765,3768,3767,3767,3760,3754,3763,3771,3770,3770,3766,3765,3626,3619,3620,3627,3620,3621,3628,3621,3622,4021,4018,4019,4013,4020,4021,4024,4016,4022,4019,4023,4024,3774,3777,3776,3776,3769,3763,3772,3780,3779,3779,3775,3774,3632,3625,3626,3633,3626,3627,3634,3627,3628,4012,4009,4010,4004,4011,4012,4015,4007,4013,4010,4014,4015,3783,3786,3785,3785,3778,3772,3781,3789,3788,3788,3784,3783,3638,3631,3632,3639,3632,3633,3640,3633,3634,4003,4e3,4001,3995,4002,4003,4006,3998,4004,4001,4005,4006,3792,3795,3794,3794,3787,3781,3790,3798,3797,3797,3793,3792,3644,3637,3638,3645,3638,3639,3646,3639,3640,3994,3991,3992,3986,3993,3994,3997,3989,3995,3992,3996,3997,3801,3804,3803,3803,3796,3790,3799,3807,3806,3806,3802,3801,3651,3643,3644,3652,3644,3645,3653,3645,3646,3985,3982,3983,3977,3984,3985,3988,3980,3986,3983,3987,3988,3810,3813,3812,3812,3805,3799,3808,3816,3815,3815,3811,3810,3658,3650,3651,3659,3651,3652,3660,3652,3653,3976,3973,3974,3968,3975,3976,3979,3971,3977,3974,3978,3979,3819,3822,3821,3821,3814,3808,3817,3825,3824,3824,3820,3819,3664,3657,3658,3665,3658,3659,3666,3659,3660,3967,3964,3965,3959,3966,3967,3970,3962,3968,3965,3969,3970,3828,3831,3830,3830,3823,3817,3826,3834,3833,3833,3829,3828,3670,3663,3664,3671,3664,3665,3672,3665,3666,3958,3955,3956,3950,3957,3958,3961,3953,3959,3956,3960,3961,3837,3840,3839,3839,3832,3826,3835,3843,3842,3842,3838,3837,3676,3669,3670,3677,3670,3671,3678,3671,3672,3949,3946,3947,3941,3948,3949,3952,3944,3950,3947,3951,3952,3846,3849,3848,3848,3841,3835,3844,3852,3851,3851,3847,3846,3682,3675,3676,3683,3676,3677,3684,3677,3678,3940,3937,3938,3932,3939,3940,3943,3935,3941,3938,3942,3943,3855,3858,3857,3857,3850,3844,3853,3861,3860,3860,3856,3855,3688,3681,3682,3689,3682,3683,3690,3683,3684,3931,3928,3929,3923,3930,3931,3934,3926,3932,3929,3933,3934,3864,3867,3866,3866,3859,3853,3862,3870,3869,3869,3865,3864,3694,3687,3688,3695,3688,3689,3696,3689,3690,3922,3919,3920,3914,3921,3922,3925,3917,3923,3920,3924,3925,3872,3875,3874,3874,3868,3862,3876,3873,3872,3913,3910,3911,3916,3908,3914,3911,3915,3916,3706,3744,3707,3708,3753,3709,3710,3762,3711,3709,3759,3710,3601,3607,3600,3607,3737,3600,3712,3771,3713,3713,3777,3714,3714,3780,3715,3715,3786,3716,3717,3795,3718,3719,3804,3720,3718,3798,3719,3716,3789,3717,3720,3807,3648,4043,3611,3610,3603,3609,3602,3608,3602,3609,4042,4040,3906,4030,4028,3903,4024,4022,3902,3994,3992,3895,3721,3816,3722,3723,3825,3724,3725,3834,3726,3727,3843,3728,3726,3840,3727,3724,3831,3725,3728,3849,3729,3730,3858,3731,3731,3861,3732,3735,3877,3698,3734,3875,3735,3695,3701,3694,3694,3700,3693,3943,3941,3885,3940,3938,3884,3702,3696,3703,3913,3911,3878,4228,4225,4227,4231,4223,4230,4226,4230,4225,4242,4234,4241,4229,4241,4223,4245,4232,4244,4240,4244,4234,4251,4248,4250,4243,4250,4232,4254,4246,4253,4249,4253,4248,4263,4257,4262,4252,4262,4246,4266,4255,4265,4261,4265,4257,4272,4269,4271,4264,4271,4255,4275,4267,4274,4270,4274,4269,4284,4278,4283,4273,4283,4267,4287,4276,4286,4282,4286,4278,4293,4290,4292,4285,4292,4276,4296,4288,4295,4291,4295,4290,4301,4298,4300,4294,4300,4288,4299,4302,4298,4298,4374,4372,4372,4373,4297,4297,4383,4381,4381,4382,4377,4377,4386,4384,4384,4385,4376,4376,4392,4390,4390,4391,4389,4389,4395,4393,4393,4394,4388,4388,4403,4401,4401,4402,4398,4398,4406,4404,4404,4405,4397,4405,4412,4410,4410,4411,4409,4409,4415,4413,4413,4414,4408,4408,4421,4419,4419,4420,4418,4418,4424,4422,4422,4423,4417,4417,4429,4427,4427,4428,4426,4426,4432,4430,4430,4431,4099,4099,4434,4433,4433,4102,4100,4100,4103,4101,4098,4106,4104,4105,4101,4106,4109,4117,4115,4116,4104,4117,4107,4120,4118,4119,4115,4120,4123,4126,4124,4125,4118,4126,4121,4129,4127,4128,4124,4129,4132,4138,4136,4137,4127,4138,4130,4141,4139,4140,4136,4141,4144,4147,4145,4146,4139,4147,4142,4150,4148,4149,4145,4150,4153,4158,4156,4157,4148,4158,4151,4161,4159,4160,4156,4161,4164,4167,4165,4166,4159,4167,4162,4170,4168,4169,4165,4170,4172,4175,4173,4174,4168,4175,4176,4173,4177,4055,4101,4103,4056,4106,4101,4115,4059,4060,4411,4341,4342,4303,4216,4217,4215,4299,4301,4301,4214,4215,4291,4211,4212,4296,4212,4213,4293,4210,4211,4060,4120,4115,4063,4126,4118,4061,4118,4120,4065,4129,4124,4066,4127,4129,4064,4124,4126,4068,4136,4138,4070,4139,4141,4069,4141,4136,4073,4145,4147,4074,4150,4145,4072,4147,4139,4067,4138,4127,4158,4076,4077,4077,4156,4158,4079,4159,4161,4078,4161,4156,4159,4080,4081,4082,4165,4167,4084,4168,4170,4083,4170,4165,4085,4175,4168,4087,4177,4173,4086,4173,4175,4285,4209,4210,4285,4208,4209,4282,4206,4207,4287,4207,4208,4284,4205,4206,4275,4203,4204,4270,4202,4203,4264,4089,4201,4272,4201,4202,4266,4199,4200,4263,4197,4198,4261,4198,4199,4264,4200,4089,4254,4195,4196,4249,4194,4195,4251,4193,4194,4243,4191,4192,4240,4189,4190,4245,4190,4191,4243,4192,4193,4242,4188,4189,4187,4229,4231,4226,4185,4186,4228,4184,4185,4612,4609,4610,4615,4607,4613,4610,4614,4615,4625,4618,4623,4613,4624,4625,4628,4616,4626,4623,4627,4628,4634,4631,4632,4626,4633,4634,4637,4629,4635,4632,4636,4637,4646,4640,4644,4635,4645,4646,4649,4638,4647,4644,4648,4649,4655,4652,4653,4647,4654,4655,4658,4650,4656,4653,4657,4658,4666,4661,4664,4656,4665,4666,4669,4659,4667,4664,4668,4669,4675,4672,4673,4667,4674,4675,4678,4670,4676,4673,4677,4678,4683,4680,4681,4676,4682,4683,4681,4684,4685,4484,4487,4486,4482,4490,4489,4489,4485,4484,4493,4501,4500,4500,4488,4482,4491,4504,4503,4503,4499,4493,4507,4510,4509,4509,4502,4491,4505,4513,4512,4512,4508,4507,4516,4522,4521,4521,4511,4505,4514,4525,4524,4524,4520,4516,4528,4531,4530,4530,4523,4514,4526,4534,4533,4533,4529,4528,4537,4542,4541,4541,4532,4526,4535,4545,4544,4544,4540,4537,4548,4551,4550,4550,4543,4535,4546,4554,4553,4553,4549,4548,4556,4559,4558,4558,4552,4546,4560,4557,4556,4440,4439,4487,4485,4490,4441,4499,4444,4501,4445,4504,4446,4502,4510,4448,4510,4508,4449,4446,4502,4447,4513,4511,4451,4453,4520,4454,4454,4525,4455,4452,4522,4453,4508,4513,4450,4523,4455,4525,4681,4599,4683,4685,4600,4681,4597,4596,4678,4596,4595,4673,4595,4594,4675,4594,4593,4667,4667,4592,4669,4664,4590,4666,4666,4589,4656,4587,4586,4653,4586,4585,4655,4588,4587,4658,4669,4591,4664,4647,4655,4585,4457,4456,4523,4529,4534,4459,4531,4529,4458,4463,4545,4464,4464,4543,4465,4462,4540,4463,4466,4465,4543,4551,4549,4467,4549,4554,4468,4554,4552,4469,4559,4470,4552,4472,4561,4473,4471,4557,4472,4649,4583,4644,4646,4581,4635,4580,4579,4637,4644,4582,4646,4577,4576,4626,4626,4575,4628,4578,4577,4634,4647,4584,4649,4579,4578,4632,4574,4628,4575,4623,4573,4625,4625,4572,4613,4571,4570,4615,4610,4615,4570,4569,4568,4612,4869,4866,4867,4872,4864,4870,4867,4871,4872,4882,4875,4880,4870,4881,4882,4885,4873,4883,4880,4884,4885,4891,4888,4889,4883,4890,4891,4894,4886,4892,4889,4893,4894,4903,4897,4901,4892,4902,4903,4906,4895,4904,4901,4905,4906,4912,4909,4910,4904,4911,4912,4915,4907,4913,4910,4914,4915,4923,4918,4921,4913,4922,4923,4926,4916,4924,4921,4925,4926,4932,4929,4930,4924,4931,4932,4935,4927,4933,4930,4934,4935,4940,4937,4938,4933,4939,4940,4938,4941,4942,4741,4744,4743,4739,4747,4746,4746,4742,4741,4750,4758,4757,4757,4745,4739,4748,4761,4760,4760,4756,4750,4764,4767,4766,4766,4759,4748,4762,4770,4769,4769,4765,4764,4773,4779,4778,4778,4768,4762,4771,4782,4781,4781,4777,4773,4785,4788,4787,4787,4780,4771,4783,4791,4790,4790,4786,4785,4794,4799,4798,4798,4789,4783,4792,4802,4801,4801,4797,4794,4805,4808,4807,4807,4800,4792,4803,4811,4810,4810,4806,4805,4813,4816,4815,4815,4809,4803,4817,4814,4813,4697,4696,4744,4742,4747,4698,4756,4701,4758,4702,4761,4703,4759,4767,4705,4767,4765,4706,4703,4759,4704,4770,4768,4708,4710,4777,4711,4711,4782,4712,4709,4779,4710,4765,4770,4707,4780,4712,4782,4938,4856,4940,4942,4857,4938,4854,4853,4935,4853,4852,4930,4852,4851,4932,4851,4850,4924,4924,4849,4926,4921,4847,4923,4923,4846,4913,4844,4843,4910,4843,4842,4912,4845,4844,4915,4926,4848,4921,4904,4912,4842,4714,4713,4780,4786,4791,4716,4788,4786,4715,4720,4802,4721,4721,4800,4722,4719,4797,4720,4723,4722,4800,4808,4806,4724,4806,4811,4725,4811,4809,4726,4816,4727,4809,4729,4818,4730,4728,4814,4729,4906,4840,4901,4903,4838,4892,4837,4836,4894,4901,4839,4903,4834,4833,4883,4883,4832,4885,4835,4834,4891,4904,4841,4906,4836,4835,4889,4831,4885,4832,4880,4830,4882,4882,4829,4870,4828,4827,4872,4867,4872,4827,4826,4825,4869,5126,5123,5125,5129,5121,5128,5124,5128,5123,5139,5132,5138,5127,5138,5121,5142,5130,5141,5137,5141,5132,5148,5145,5147,5140,5147,5130,5151,5143,5150,5146,5150,5145,5160,5154,5159,5149,5159,5143,5163,5152,5162,5158,5162,5154,5169,5166,5168,5161,5168,5152,5172,5164,5171,5167,5171,5166,5180,5175,5179,5170,5179,5164,5183,5173,5182,5178,5182,5175,5189,5186,5188,5181,5188,5173,5192,5184,5191,5187,5191,5186,5197,5194,5196,5190,5196,5184,5195,5198,5194,4998,5001,4999,4996,5004,5002,5003,4999,5004,5007,5015,5013,5014,5002,5015,5005,5018,5016,5017,5013,5018,5021,5024,5022,5023,5016,5024,5019,5027,5025,5026,5022,5027,5030,5036,5034,5035,5025,5036,5028,5039,5037,5038,5034,5039,5042,5045,5043,5044,5037,5045,5040,5048,5046,5047,5043,5048,5051,5056,5054,5055,5046,5056,5049,5059,5057,5058,5054,5059,5062,5065,5063,5064,5057,5065,5060,5068,5066,5067,5063,5068,5070,5073,5071,5072,5066,5073,5074,5071,5075,5001,4953,4954,4955,5004,4999,5013,4958,4959,4959,5018,5013,4962,5024,5016,4963,5022,5024,4960,5016,5018,4965,5025,5027,4967,5034,5036,4968,5039,5034,4966,5036,5025,4964,5027,5022,5037,4969,4970,5195,5113,5114,5199,5114,5115,5192,5110,5111,5187,5109,5110,5189,5108,5109,5181,5107,5108,5181,5106,5107,5178,5104,5105,5180,5103,5104,5167,5100,5101,5169,5099,5100,5172,5101,5102,5183,5105,5106,5099,5169,5161,5037,4970,4971,4973,5048,5043,4972,5043,5045,4977,5059,5054,4978,5057,5059,4976,5054,5056,5057,4979,4980,4981,5063,5065,4982,5068,5063,4983,5066,5068,5073,4984,4985,4986,5075,5071,4985,5071,5073,5163,5097,5098,5160,5095,5096,5151,5093,5094,5158,5096,5097,5140,5090,5091,5140,5089,5090,5148,5091,5092,5161,5098,4988,5146,5092,5093,5088,5142,5137,5137,5087,5088,5139,5086,5087,5129,5084,5085,5084,5129,5124,5126,5082,5083,5384,5381,5382,5387,5379,5385,5382,5386,5387,5398,5390,5396,5385,5397,5398,5401,5388,5399,5396,5400,5401,5407,5404,5405,5399,5406,5407,5410,5402,5408,5405,5409,5410,5419,5413,5417,5408,5418,5419,5422,5411,5420,5417,5421,5422,5428,5425,5426,5420,5427,5428,5431,5423,5429,5426,5430,5431,5440,5434,5438,5429,5439,5440,5443,5432,5441,5438,5442,5443,5449,5446,5447,5441,5448,5449,5452,5444,5450,5447,5451,5452,5457,5454,5455,5450,5456,5457,5455,5458,5459,5454,5530,5458,5528,5529,5530,5453,5539,5529,5537,5538,5539,5533,5542,5538,5540,5541,5542,5532,5548,5541,5546,5547,5548,5545,5551,5547,5549,5550,5551,5544,5559,5550,5557,5558,5559,5554,5562,5558,5560,5561,5562,5566,5568,5561,5566,5567,5568,5565,5571,5567,5569,5570,5571,5564,5577,5570,5575,5576,5577,5574,5580,5576,5578,5579,5580,5573,5585,5579,5583,5584,5585,5582,5588,5584,5586,5587,5588,5255,5590,5587,5589,5258,5590,5256,5259,5258,5254,5262,5261,5261,5257,5256,5265,5273,5272,5272,5260,5254,5263,5276,5275,5275,5271,5265,5279,5282,5281,5281,5274,5263,5277,5285,5284,5284,5280,5279,5288,5294,5293,5293,5283,5277,5286,5297,5296,5296,5292,5288,5300,5303,5302,5302,5295,5286,5298,5306,5305,5305,5301,5300,5309,5314,5313,5313,5304,5298,5307,5317,5316,5316,5312,5309,5320,5323,5322,5322,5315,5307,5318,5326,5325,5325,5321,5320,5328,5331,5330,5330,5324,5318,5332,5329,5328,5259,5257,5211,5257,5262,5212,5271,5215,5273,5498,5497,5567,5459,5372,5455,5371,5455,5372,5457,5370,5450,5368,5367,5447,5369,5368,5452,5367,5366,5449,5216,5276,5217,5274,5282,5219,5217,5274,5218,5280,5285,5221,5285,5283,5222,5282,5280,5220,5224,5292,5225,5226,5295,5227,5225,5297,5226,5303,5301,5229,5301,5306,5230,5295,5303,5228,5223,5294,5224,5314,5232,5304,5233,5312,5234,5235,5315,5236,5234,5317,5235,5237,5236,5315,5323,5321,5238,5326,5324,5240,5321,5326,5239,5241,5331,5242,5243,5333,5244,5242,5329,5243,5366,5365,5441,5441,5364,5443,5438,5362,5440,5443,5363,5438,5440,5361,5429,5360,5359,5431,5359,5358,5426,5357,5245,5420,5358,5357,5428,5422,5355,5417,5419,5353,5408,5417,5354,5419,5420,5356,5422,5352,5351,5410,5351,5350,5405,5350,5349,5407,5399,5347,5401,5396,5345,5398,5401,5346,5396,5349,5348,5399,5398,5344,5385,5387,5385,5343,5342,5341,5382,5341,5340,5384,5768,5765,5767,5771,5763,5770,5766,5770,5765,5781,5774,5780,5769,5780,5763,5784,5772,5783,5779,5783,5774,5790,5787,5789,5782,5789,5772,5793,5785,5792,5788,5792,5787,5802,5796,5801,5791,5801,5785,5805,5794,5804,5800,5804,5796,5811,5808,5810,5803,5810,5794,5814,5806,5813,5809,5813,5808,5822,5817,5821,5812,5821,5806,5825,5815,5824,5820,5824,5817,5831,5828,5830,5823,5830,5815,5834,5826,5833,5829,5833,5828,5839,5836,5838,5832,5838,5826,5837,5840,5836,5640,5643,5641,5638,5646,5644,5645,5641,5646,5649,5657,5655,5656,5644,5657,5647,5660,5658,5659,5655,5660,5663,5666,5664,5665,5658,5666,5661,5669,5667,5668,5664,5669,5672,5678,5676,5677,5667,5678,5670,5681,5679,5680,5676,5681,5684,5687,5685,5686,5679,5687,5682,5690,5688,5689,5685,5690,5693,5698,5696,5697,5688,5698,5691,5701,5699,5700,5696,5701,5704,5707,5705,5706,5699,5707,5702,5710,5708,5709,5705,5710,5712,5715,5713,5714,5708,5715,5716,5713,5717,5643,5595,5596,5597,5646,5641,5655,5600,5601,5601,5660,5655,5604,5666,5658,5605,5664,5666,5602,5658,5660,5607,5667,5669,5609,5676,5678,5610,5681,5676,5608,5678,5667,5606,5669,5664,5679,5611,5612,5837,5755,5756,5841,5756,5757,5834,5752,5753,5829,5751,5752,5831,5750,5751,5823,5749,5750,5823,5748,5749,5820,5746,5747,5822,5745,5746,5809,5742,5743,5811,5741,5742,5814,5743,5744,5825,5747,5748,5741,5811,5803,5679,5612,5613,5615,5690,5685,5614,5685,5687,5619,5701,5696,5620,5699,5701,5618,5696,5698,5699,5621,5622,5623,5705,5707,5624,5710,5705,5625,5708,5710,5715,5626,5627,5628,5717,5713,5627,5713,5715,5805,5739,5740,5802,5737,5738,5793,5735,5736,5800,5738,5739,5782,5732,5733,5782,5731,5732,5790,5733,5734,5803,5740,5630,5788,5734,5735,5730,5784,5779,5779,5729,5730,5781,5728,5729,5771,5726,5727,5726,5771,5766,5768,5724,5725,5988,5991,5990,5986,5994,5993,5993,5989,5988,6293,6290,6291,6286,6292,6293,6291,6294,6295,5997,6e3,5999,5999,5992,5986,5995,6003,6002,6002,5998,5997,5864,5857,5858,5865,5858,5859,5866,5859,5860,6285,6282,6283,6277,6284,6285,6288,6280,6286,6283,6287,6288,6006,6009,6008,6008,6001,5995,6004,6012,6011,6011,6007,6006,5870,5863,5864,5871,5864,5865,5872,5865,5866,6276,6273,6274,6268,6275,6276,6279,6271,6277,6274,6278,6279,6015,6018,6017,6017,6010,6004,6013,6021,6020,6020,6016,6015,5876,5869,5870,5877,5870,5871,5878,5871,5872,6267,6264,6265,6259,6266,6267,6270,6262,6268,6265,6269,6270,6024,6027,6026,6026,6019,6013,6022,6030,6029,6029,6025,6024,5882,5875,5876,5883,5876,5877,5884,5877,5878,6258,6255,6256,6250,6257,6258,6261,6253,6259,6256,6260,6261,6033,6036,6035,6035,6028,6022,6031,6039,6038,6038,6034,6033,5888,5881,5882,5889,5882,5883,5890,5883,5884,6249,6246,6247,6241,6248,6249,6252,6244,6250,6247,6251,6252,6042,6045,6044,6044,6037,6031,6040,6048,6047,6047,6043,6042,5894,5887,5888,5895,5888,5889,5896,5889,5890,6240,6237,6238,6232,6239,6240,6243,6235,6241,6238,6242,6243,5899,6051,6050,6051,6054,6053,6053,6046,6040,5901,5893,5894,5902,5894,5895,5903,5895,5896,6234,6228,6232,6231,6233,6234,6219,6229,6230,6057,6061,6059,6059,6060,6049,6055,6064,6063,6063,6058,6057,5908,5900,5901,5909,5901,5902,5910,5902,5903,6224,6221,6222,6216,6223,6224,6227,6219,6225,6222,6226,6227,6067,6070,6069,6069,6062,6055,6065,6073,6072,6072,6068,6067,5914,5907,5908,5915,5908,5909,5916,5909,5910,6215,6212,6213,6207,6214,6215,6218,6210,6216,6213,6217,6218,6076,6079,6078,6078,6071,6065,6074,6082,6081,6081,6077,6076,5920,5913,5914,5921,5914,5915,5922,5915,5916,6206,6203,6204,6198,6205,6206,6209,6201,6207,6204,6208,6209,6085,6088,6087,6087,6080,6074,6083,6091,6090,6090,6086,6085,5926,5919,5920,5927,5920,5921,5928,5921,5922,6197,6194,6195,6189,6196,6197,6200,6192,6198,6195,6199,6200,6094,6097,6096,6096,6089,6083,6092,6100,6099,6099,6095,6094,5932,5925,5926,5933,5926,5927,5934,5927,5928,6188,6185,6186,6180,6187,6188,6191,6183,6189,6186,6190,6191,6103,6106,6105,6105,6098,6092,6101,6109,6108,6108,6104,6103,5938,5931,5932,5939,5932,5933,5940,5933,5934,6179,6176,6177,6171,6178,6179,6182,6174,6180,6177,6181,6182,6112,6115,6114,6114,6107,6101,6110,6118,6117,6117,6113,6112,5944,5937,5938,5945,5938,5939,5946,5939,5940,6170,6167,6168,6162,6169,6170,6173,6165,6171,6168,6172,6173,6120,6123,6122,6122,6116,6110,6124,6121,6120,6161,6158,6159,6164,6156,6162,6159,6163,6164,5956,5994,5957,5960,6012,5961,5959,6009,5960,5961,6018,5962,5857,5851,5858,5963,6027,5964,5965,6036,5966,5967,6045,5968,5969,6054,5970,5968,6048,5969,5966,6039,5967,6052,6060,5898,6051,6060,6052,5853,5859,5852,5852,5858,5851,6276,6274,6151,6270,6268,6150,5905,6231,6141,6231,6219,6230,5971,6064,5972,5973,6073,5974,5975,6082,5976,5977,6091,5978,5976,6088,5977,5974,6079,5975,5978,6097,5979,5980,6106,5981,5981,6109,5982,5985,6125,5948,5984,6123,5985,5945,5951,5944,5944,5950,5943,6191,6189,6133,6200,6198,6135,6188,6186,6132,5952,5946,5953,6161,6159,6126,6436,6439,6438,6434,6442,6441,6441,6437,6436,6741,6738,6739,6734,6740,6741,6739,6742,6743,6445,6448,6447,6447,6440,6434,6443,6451,6450,6450,6446,6445,6312,6305,6306,6313,6306,6307,6314,6307,6308,6733,6730,6731,6725,6732,6733,6736,6728,6734,6731,6735,6736,6454,6457,6456,6456,6449,6443,6452,6460,6459,6459,6455,6454,6318,6311,6312,6319,6312,6313,6320,6313,6314,6724,6721,6722,6716,6723,6724,6727,6719,6725,6722,6726,6727,6463,6466,6465,6465,6458,6452,6461,6469,6468,6468,6464,6463,6324,6317,6318,6325,6318,6319,6326,6319,6320,6715,6712,6713,6707,6714,6715,6718,6710,6716,6713,6717,6718,6472,6475,6474,6474,6467,6461,6470,6478,6477,6477,6473,6472,6330,6323,6324,6331,6324,6325,6332,6325,6326,6706,6703,6704,6698,6705,6706,6709,6701,6707,6704,6708,6709,6481,6484,6483,6483,6476,6470,6479,6487,6486,6486,6482,6481,6336,6329,6330,6337,6330,6331,6338,6331,6332,6697,6694,6695,6689,6696,6697,6700,6692,6698,6695,6699,6700,6490,6493,6492,6492,6485,6479,6488,6496,6495,6495,6491,6490,6342,6335,6336,6343,6336,6337,6344,6337,6338,6688,6685,6686,6680,6687,6688,6691,6683,6689,6686,6690,6691,6347,6499,6498,6499,6502,6501,6501,6494,6488,6349,6341,6342,6350,6342,6343,6351,6343,6344,6682,6676,6680,6679,6681,6682,6667,6677,6678,6505,6509,6507,6507,6508,6497,6503,6512,6511,6511,6506,6505,6356,6348,6349,6357,6349,6350,6358,6350,6351,6672,6669,6670,6664,6671,6672,6675,6667,6673,6670,6674,6675,6515,6518,6517,6517,6510,6503,6513,6521,6520,6520,6516,6515,6362,6355,6356,6363,6356,6357,6364,6357,6358,6663,6660,6661,6655,6662,6663,6666,6658,6664,6661,6665,6666,6524,6527,6526,6526,6519,6513,6522,6530,6529,6529,6525,6524,6368,6361,6362,6369,6362,6363,6370,6363,6364,6654,6651,6652,6646,6653,6654,6657,6649,6655,6652,6656,6657,6533,6536,6535,6535,6528,6522,6531,6539,6538,6538,6534,6533,6374,6367,6368,6375,6368,6369,6376,6369,6370,6645,6642,6643,6637,6644,6645,6648,6640,6646,6643,6647,6648,6542,6545,6544,6544,6537,6531,6540,6548,6547,6547,6543,6542,6380,6373,6374,6381,6374,6375,6382,6375,6376,6636,6633,6634,6628,6635,6636,6639,6631,6637,6634,6638,6639,6551,6554,6553,6553,6546,6540,6549,6557,6556,6556,6552,6551,6386,6379,6380,6387,6380,6381,6388,6381,6382,6627,6624,6625,6619,6626,6627,6630,6622,6628,6625,6629,6630,6560,6563,6562,6562,6555,6549,6558,6566,6565,6565,6561,6560,6392,6385,6386,6393,6386,6387,6394,6387,6388,6618,6615,6616,6610,6617,6618,6621,6613,6619,6616,6620,6621,6568,6571,6570,6570,6564,6558,6572,6569,6568,6609,6606,6607,6612,6604,6610,6607,6611,6612,6404,6442,6405,6408,6460,6409,6407,6457,6408,6409,6466,6410,6435,6438,6297,6305,6299,6306,6411,6475,6412,6413,6484,6414,6415,6493,6416,6417,6502,6418,6416,6496,6417,6414,6487,6415,6500,6508,6346,6499,6508,6500,6301,6307,6300,6742,6738,6737,6300,6306,6299,6724,6722,6599,6718,6716,6598,6353,6679,6589,6679,6667,6678,6419,6512,6420,6421,6521,6422,6423,6530,6424,6425,6539,6426,6424,6536,6425,6422,6527,6423,6426,6545,6427,6428,6554,6429,6429,6557,6430,6433,6573,6396,6432,6571,6433,6393,6399,6392,6392,6398,6391,6639,6637,6581,6648,6646,6583,6636,6634,6580,6400,6394,6401,6609,6607,6574,6884,6887,6886,6882,6890,6889,6889,6885,6884,7189,7186,7187,7182,7188,7189,7187,7190,7191,6893,6896,6895,6895,6888,6882,6891,6899,6898,6898,6894,6893,6760,6753,6754,6761,6754,6755,6762,6755,6756,7181,7178,7179,7173,7180,7181,7184,7176,7182,7179,7183,7184,6902,6905,6904,6904,6897,6891,6900,6908,6907,6907,6903,6902,6766,6759,6760,6767,6760,6761,6768,6761,6762,7172,7169,7170,7164,7171,7172,7175,7167,7173,7170,7174,7175,6911,6914,6913,6913,6906,6900,6909,6917,6916,6916,6912,6911,6772,6765,6766,6773,6766,6767,6774,6767,6768,7163,7160,7161,7155,7162,7163,7166,7158,7164,7161,7165,7166,6920,6923,6922,6922,6915,6909,6918,6926,6925,6925,6921,6920,6778,6771,6772,6779,6772,6773,6780,6773,6774,7154,7151,7152,7146,7153,7154,7157,7149,7155,7152,7156,7157,6929,6932,6931,6931,6924,6918,6927,6935,6934,6934,6930,6929,6784,6777,6778,6785,6778,6779,6786,6779,6780,7145,7142,7143,7137,7144,7145,7148,7140,7146,7143,7147,7148,6938,6941,6940,6940,6933,6927,6936,6944,6943,6943,6939,6938,6790,6783,6784,6791,6784,6785,6792,6785,6786,7136,7133,7134,7128,7135,7136,7139,7131,7137,7134,7138,7139,6795,6947,6946,6947,6950,6949,6949,6942,6936,6797,6789,6790,6798,6790,6791,6799,6791,6792,7130,7124,7128,7127,7129,7130,7115,7125,7126,6953,6957,6955,6955,6956,6945,6951,6960,6959,6959,6954,6953,6804,6796,6797,6805,6797,6798,6806,6798,6799,7120,7117,7118,7112,7119,7120,7123,7115,7121,7118,7122,7123,6963,6966,6965,6965,6958,6951,6961,6969,6968,6968,6964,6963,6810,6803,6804,6811,6804,6805,6812,6805,6806,7111,7108,7109,7103,7110,7111,7114,7106,7112,7109,7113,7114,6972,6975,6974,6974,6967,6961,6970,6978,6977,6977,6973,6972,6816,6809,6810,6817,6810,6811,6818,6811,6812,7102,7099,7100,7094,7101,7102,7105,7097,7103,7100,7104,7105,6981,6984,6983,6983,6976,6970,6979,6987,6986,6986,6982,6981,6822,6815,6816,6823,6816,6817,6824,6817,6818,7093,7090,7091,7085,7092,7093,7096,7088,7094,7091,7095,7096,6990,6993,6992,6992,6985,6979,6988,6996,6995,6995,6991,6990,6828,6821,6822,6829,6822,6823,6830,6823,6824,7084,7081,7082,7076,7083,7084,7087,7079,7085,7082,7086,7087,6999,7002,7001,7001,6994,6988,6997,7005,7004,7004,7e3,6999,6834,6827,6828,6835,6828,6829,6836,6829,6830,7075,7072,7073,7067,7074,7075,7078,7070,7076,7073,7077,7078,7008,7011,7010,7010,7003,6997,7006,7014,7013,7013,7009,7008,6840,6833,6834,6841,6834,6835,6842,6835,6836,7066,7063,7064,7058,7065,7066,7069,7061,7067,7064,7068,7069,7016,7019,7018,7018,7012,7006,7020,7017,7016,7057,7054,7055,7060,7052,7058,7055,7059,7060,6852,6890,6853,6856,6908,6857,6855,6905,6856,6857,6914,6858,6883,6745,6746,6753,6747,6754,6859,6923,6860,6861,6932,6862,6863,6941,6864,6865,6950,6866,6864,6944,6865,6862,6935,6863,6948,6956,6794,6947,6956,6948,6749,6755,6748,6749,7185,6756,6748,6754,6747,7172,7170,7047,7166,7164,7046,6801,7127,7037,7127,7115,7126,6867,6960,6868,6869,6969,6870,6871,6978,6872,6873,6987,6874,6872,6984,6873,6870,6975,6871,6874,6993,6875,6876,7002,6877,6877,7005,6878,6881,7021,6844,6880,7019,6881,6841,6847,6840,6840,6846,6839,7087,7085,7029,7096,7094,7031,7084,7082,7028,7053,6850,6849,6848,6842,6849,7057,7055,7022,7332,7335,7333,7330,7338,7336,7337,7333,7338,7641,7638,7640,7634,7640,7628,7639,7642,7638,7341,7344,7342,7343,7336,7344,7339,7347,7345,7346,7342,7347,7208,7201,7207,7209,7202,7208,7210,7203,7209,7633,7630,7632,7625,7632,7619,7636,7628,7635,7631,7635,7630,7350,7353,7351,7352,7345,7353,7348,7356,7354,7355,7351,7356,7214,7207,7213,7215,7208,7214,7216,7209,7215,7624,7621,7623,7616,7623,7610,7627,7619,7626,7622,7626,7621,7359,7362,7360,7361,7354,7362,7357,7365,7363,7364,7360,7365,7220,7213,7219,7221,7214,7220,7222,7215,7221,7615,7612,7614,7607,7614,7601,7618,7610,7617,7613,7617,7612,7368,7371,7369,7370,7363,7371,7366,7374,7372,7373,7369,7374,7226,7219,7225,7227,7220,7226,7228,7221,7227,7606,7603,7605,7598,7605,7592,7609,7601,7608,7604,7608,7603,7377,7380,7378,7379,7372,7380,7375,7383,7381,7382,7378,7383,7232,7225,7231,7233,7226,7232,7234,7227,7233,7597,7594,7596,7589,7596,7583,7600,7592,7599,7595,7599,7594,7386,7389,7387,7388,7381,7389,7384,7392,7390,7391,7387,7392,7238,7231,7237,7239,7232,7238,7240,7233,7239,7588,7585,7587,7580,7587,7574,7591,7583,7590,7586,7590,7585,7395,7398,7396,7397,7390,7398,7393,7401,7399,7400,7396,7401,7245,7237,7244,7246,7238,7245,7247,7239,7246,7579,7576,7578,7571,7578,7565,7582,7574,7581,7577,7581,7576,7404,7407,7405,7406,7399,7407,7402,7410,7408,7409,7405,7410,7252,7244,7251,7253,7245,7252,7254,7246,7253,7570,7567,7569,7562,7569,7556,7573,7565,7572,7568,7572,7567,7413,7416,7414,7415,7408,7416,7411,7419,7417,7418,7414,7419,7258,7251,7257,7259,7252,7258,7260,7253,7259,7561,7558,7560,7553,7560,7547,7564,7556,7563,7559,7563,7558,7422,7425,7423,7424,7417,7425,7420,7428,7426,7427,7423,7428,7264,7257,7263,7265,7258,7264,7266,7259,7265,7552,7549,7551,7544,7551,7538,7555,7547,7554,7550,7554,7549,7431,7434,7432,7433,7426,7434,7429,7437,7435,7436,7432,7437,7270,7263,7269,7271,7264,7270,7272,7265,7271,7543,7540,7542,7535,7542,7529,7546,7538,7545,7541,7545,7540,7440,7443,7441,7442,7435,7443,7438,7446,7444,7445,7441,7446,7276,7269,7275,7277,7270,7276,7278,7271,7277,7534,7531,7533,7526,7533,7520,7537,7529,7536,7532,7536,7531,7449,7452,7450,7451,7444,7452,7447,7455,7453,7454,7450,7455,7282,7275,7281,7283,7276,7282,7284,7277,7283,7525,7522,7524,7517,7524,7511,7528,7520,7527,7523,7527,7522,7458,7461,7459,7460,7453,7461,7456,7464,7462,7463,7459,7464,7288,7281,7287,7289,7282,7288,7290,7283,7289,7516,7513,7515,7508,7515,7502,7519,7511,7518,7514,7518,7513,7466,7469,7467,7468,7462,7469,7470,7467,7471,7507,7504,7506,7510,7502,7509,7505,7509,7504,7300,7338,7333,7302,7347,7342,7304,7356,7351,7303,7353,7345,7195,7201,7202,7306,7365,7360,7307,7371,7363,7308,7374,7369,7309,7380,7372,7311,7389,7381,7313,7398,7390,7312,7392,7387,7310,7383,7378,7314,7401,7396,7197,7203,7204,7202,7196,7195,7500,7634,7636,7497,7622,7624,7496,7616,7618,7489,7586,7588,7315,7410,7405,7317,7419,7414,7319,7428,7423,7321,7437,7432,7320,7434,7426,7318,7425,7417,7322,7443,7435,7324,7452,7444,7325,7455,7450,7329,7471,7467,7328,7469,7462,7289,7295,7296,7288,7294,7295,7479,7535,7537,7478,7532,7534,7296,7290,7289,7472,7505,7507,7784,7787,7785,7782,7790,7788,7789,7785,7790,8093,8090,8092,8086,8092,8080,8091,8094,8090,7793,7796,7794,7795,7788,7796,7791,7799,7797,7798,7794,7799,7660,7653,7659,7661,7654,7660,7662,7655,7661,8085,8082,8084,8077,8084,8071,8088,8080,8087,8083,8087,8082,7802,7805,7803,7804,7797,7805,7800,7808,7806,7807,7803,7808,7666,7659,7665,7667,7660,7666,7668,7661,7667,8076,8073,8075,8068,8075,8062,8079,8071,8078,8074,8078,8073,7811,7814,7812,7813,7806,7814,7809,7817,7815,7816,7812,7817,7672,7665,7671,7673,7666,7672,7674,7667,7673,8067,8064,8066,8059,8066,8053,8070,8062,8069,8065,8069,8064,7820,7823,7821,7822,7815,7823,7818,7826,7824,7825,7821,7826,7678,7671,7677,7679,7672,7678,7680,7673,7679,8058,8055,8057,8050,8057,8044,8061,8053,8060,8056,8060,8055,7829,7832,7830,7831,7824,7832,7827,7835,7833,7834,7830,7835,7684,7677,7683,7685,7678,7684,7686,7679,7685,8049,8046,8048,8041,8048,8035,8052,8044,8051,8047,8051,8046,7838,7841,7839,7840,7833,7841,7836,7844,7842,7843,7839,7844,7690,7683,7689,7691,7684,7690,7692,7685,7691,8040,8037,8039,8032,8039,8026,8043,8035,8042,8038,8042,8037,7847,7850,7848,7849,7842,7850,7845,7853,7851,7852,7848,7853,7697,7689,7696,7698,7690,7697,7699,7691,7698,8031,8028,8030,8023,8030,8017,8034,8026,8033,8029,8033,8028,7856,7859,7857,7858,7851,7859,7854,7862,7860,7861,7857,7862,7704,7696,7703,7705,7697,7704,7706,7698,7705,8022,8019,8021,8014,8021,8008,8025,8017,8024,8020,8024,8019,7865,7868,7866,7867,7860,7868,7863,7871,7869,7870,7866,7871,7710,7703,7709,7711,7704,7710,7712,7705,7711,8013,8010,8012,8005,8012,7999,8016,8008,8015,8011,8015,8010,7874,7877,7875,7876,7869,7877,7872,7880,7878,7879,7875,7880,7716,7709,7715,7717,7710,7716,7718,7711,7717,8004,8001,8003,7996,8003,7990,8007,7999,8006,8002,8006,8001,7883,7886,7884,7885,7878,7886,7881,7889,7887,7888,7884,7889,7722,7715,7721,7723,7716,7722,7724,7717,7723,7995,7992,7994,7987,7994,7981,7998,7990,7997,7993,7997,7992,7892,7895,7893,7894,7887,7895,7890,7898,7896,7897,7893,7898,7728,7721,7727,7729,7722,7728,7730,7723,7729,7986,7983,7985,7978,7985,7972,7989,7981,7988,7984,7988,7983,7901,7904,7902,7903,7896,7904,7899,7907,7905,7906,7902,7907,7734,7727,7733,7735,7728,7734,7736,7729,7735,7977,7974,7976,7969,7976,7963,7980,7972,7979,7975,7979,7974,7910,7913,7911,7912,7905,7913,7908,7916,7914,7915,7911,7916,7740,7733,7739,7741,7734,7740,7742,7735,7741,7968,7965,7967,7960,7967,7954,7971,7963,7970,7966,7970,7965,7918,7921,7919,7920,7914,7921,7922,7919,7923,7959,7956,7958,7962,7954,7961,7957,7961,7956,7752,7790,7785,7754,7799,7794,7756,7808,7803,7755,7805,7797,7647,7653,7654,7758,7817,7812,7759,7823,7815,7760,7826,7821,7761,7832,7824,7763,7841,7833,7765,7850,7842,7764,7844,7839,7762,7835,7830,7766,7853,7848,7649,7655,7656,7654,7648,7647,7952,8086,8088,7949,8074,8076,7948,8068,8070,7941,8038,8040,7767,7862,7857,7769,7871,7866,7771,7880,7875,7773,7889,7884,7772,7886,7878,7770,7877,7869,7774,7895,7887,7776,7904,7896,7777,7907,7902,7781,7923,7919,7780,7921,7914,7741,7747,7748,7740,7746,7747,7931,7987,7989,7930,7984,7986,7742,7955,7743,7748,7742,7741,7924,7957,7959,8096,8241,8097,8114,8239,8240,8113,8240,8241,8098,8237,8238,8118,8236,8117,8099,8235,8118,8117,8237,8116,8115,8238,8239,8119,8233,8234,8122,8232,8121,8120,8232,8233,8124,8230,8123,8125,8227,8228,8127,8227,8126,8124,8228,8229,8123,8231,8122,8099,8234,8100,8129,8225,8128,8131,8223,8130,8130,8224,8129,8133,8221,8132,8134,8218,8219,8135,8217,8218,8133,8219,8220,8132,8222,8131,8101,8216,8137,8139,8215,8138,8138,8102,8101,8103,8213,8140,8141,8211,8212,8143,8211,8142,8103,8212,8104,8140,8214,8139,8137,8217,8136,8128,8226,8127,8105,8210,8143,8145,8209,8144,8107,8207,8146,8146,8208,8145,8148,8206,8147,8150,8204,8149,8151,8203,8150,8149,8205,8148,8147,8108,8107,8153,8201,8152,8154,8198,8199,8154,8200,8153,8156,8196,8197,8158,8194,8195,8160,8194,8159,8157,8195,8196,8155,8197,8198,8152,8202,8151,8162,8192,8161,8163,8189,8190,8162,8190,8191,8165,8187,8188,8167,8185,8186,8168,8184,8185,8166,8186,8187,8164,8188,8189,8109,8182,8183,8171,8180,8181,8170,8181,8182,8110,8178,8179,8174,8176,8177,8175,8112,8176,8173,8177,8178,8172,8179,8180,8169,8183,8184,8161,8193,8160,8144,8106,8105,8242,8315,8243,8258,8313,8314,8257,8314,8315,8260,8311,8312,8262,8309,8310,8263,8244,8309,8261,8310,8311,8259,8312,8313,8265,8307,8308,8267,8305,8306,8267,8307,8266,8269,8304,8268,8270,8246,8302,8271,8301,8246,8269,8302,8303,8245,8304,8305,8264,8308,8244,8273,8301,8272,8247,8299,8274,8276,8298,8275,8275,8248,8247,8249,8296,8277,8279,8295,8278,8280,8294,8279,8278,8250,8249,8277,8297,8276,8281,8252,8251,8283,8291,8282,8282,8292,8281,8284,8254,8253,8286,8288,8285,8255,8287,8286,8285,8289,8284,8253,8290,8283,8251,8293,8280,8274,8300,8273,8316,8381,8322,8324,8380,8379,8381,8380,8323,8326,8378,8377,8376,8375,8328,8327,8377,8376,8324,8379,8378,8330,8374,8373,8332,8372,8371,8330,8373,8372,8333,8370,8369,8368,8367,8336,8369,8368,8335,8333,8371,8370,8375,8374,8329,8318,8367,8319,8337,8365,8338,8340,8364,8363,8338,8364,8339,8341,8362,8361,8343,8360,8359,8343,8361,8360,8340,8363,8362,8345,8357,8346,8347,8356,8355,8346,8356,8347,8349,8354,8353,8352,8321,8320,8350,8352,8351,8349,8355,8354,8344,8359,8358,8318,8319,8366,8382,8455,8397,8398,8453,8399,8397,8454,8398,8400,8451,8401,8402,8449,8403,8403,8384,8404,8401,8450,8402,8399,8452,8400,8405,8447,8406,8407,8445,8385,8407,8447,8446,8409,8444,8443,8410,8386,8411,8411,8441,8412,8409,8442,8410,8385,8444,8408,8404,8448,8405,8413,8441,8440,8387,8439,8388,8416,8438,8437,8415,8388,8438,8389,8436,8390,8419,8435,8434,8420,8434,8433,8418,8390,8435,8417,8437,8436,8421,8392,8432,8423,8431,8430,8422,8432,8431,8424,8394,8429,8426,8428,8427,8395,8427,8396,8425,8429,8428,8393,8430,8394,8391,8433,8392,8414,8440,8439,8456,8521,8457,8461,8519,8520,8461,8520,8521,8464,8518,8463,8466,8515,8516,8465,8517,8464,8518,8519,8462,8467,8513,8514,8470,8511,8512,8468,8512,8513,8471,8509,8510,8474,8507,8508,8473,8509,8472,8471,8510,8511,8466,8514,8515,8507,8474,8475,8504,8505,8476,8479,8502,8503,8477,8503,8504,8481,8500,8501,8483,8498,8499,8482,8499,8500,8480,8501,8502,8496,8497,8484,8487,8495,8486,8495,8496,8485,8488,8492,8493,8490,8459,8491,8489,8491,8492,8488,8493,8494,8484,8498,8483,8505,8506,8475,8522,8595,8523,8539,8593,8594,8538,8594,8595,8541,8591,8592,8543,8589,8590,8524,8589,8544,8542,8590,8591,8540,8592,8593,8546,8588,8545,8547,8585,8586,8546,8586,8587,8549,8584,8548,8550,8527,8582,8551,8581,8527,8549,8582,8583,8526,8584,8585,8545,8525,8524,8553,8581,8552,8528,8579,8554,8556,8578,8555,8555,8529,8528,8530,8576,8557,8559,8575,8558,8560,8574,8559,8558,8531,8530,8557,8577,8556,8561,8533,8532,8563,8571,8562,8562,8572,8561,8564,8535,8534,8566,8568,8565,8536,8567,8566,8565,8569,8564,8534,8570,8563,8532,8573,8560,8554,8580,8553,8596,8661,8602,8603,8660,8659,8661,8660,8603,8605,8658,8657,8656,8655,8608,8606,8656,8607,8604,8659,8658,8654,8653,8610,8652,8651,8612,8653,8652,8611,8613,8650,8649,8615,8647,8616,8614,8648,8615,8612,8650,8613,8655,8654,8609,8616,8647,8599,8618,8646,8645,8644,8643,8620,8619,8645,8644,8621,8642,8641,8623,8640,8639,8622,8641,8640,8643,8642,8621,8625,8638,8637,8636,8635,8628,8626,8637,8636,8629,8634,8633,8600,8632,8601,8630,8633,8632,8635,8634,8629,8624,8639,8638,8617,8599,8646,8662,8735,8676,8677,8733,8678,8676,8734,8677,8679,8731,8680,8681,8729,8682,8682,8664,8683,8680,8730,8681,8678,8732,8679,8685,8728,8727,8686,8725,8687,8686,8727,8726,8689,8724,8723,8690,8665,8691,8691,8721,8692,8689,8722,8690,8687,8724,8688,8683,8728,8684,8693,8721,8720,8666,8719,8667,8696,8718,8717,8695,8667,8718,8668,8716,8669,8699,8715,8714,8700,8714,8713,8698,8669,8715,8697,8717,8716,8701,8671,8712,8703,8711,8710,8702,8712,8711,8704,8673,8709,8706,8708,8707,8674,8707,8675,8705,8709,8708,8672,8710,8673,8670,8713,8671,8694,8720,8719,8740,8737,8736,8741,8799,8800,8741,8800,8801,8744,8798,8743,8746,8795,8796,8745,8796,8797,8798,8799,8742,8747,8793,8794,8749,8791,8792,8748,8792,8793,8752,8789,8790,8753,8787,8788,8753,8789,8752,8750,8790,8791,8747,8794,8795,8754,8786,8787,8757,8785,8756,8758,8782,8783,8757,8783,8784,8761,8780,8781,8763,8778,8779,8762,8779,8780,8759,8781,8782,8776,8777,8764,8774,8775,8766,8775,8776,8765,8769,8773,8768,8770,8739,8771,8769,8771,8772,8768,8774,8767,8777,8778,8763,8756,8786,8755,8802,8875,8803,8818,8873,8874,8817,8874,8875,8820,8871,8872,8822,8869,8870,8823,8804,8869,8821,8870,8871,8819,8872,8873,8825,8867,8868,8827,8865,8866,8827,8867,8826,8829,8864,8828,8830,8806,8862,8831,8861,8806,8829,8862,8863,8805,8864,8865,8824,8868,8804,8833,8861,8832,8807,8859,8834,8836,8858,8835,8835,8808,8807,8809,8856,8837,8839,8855,8838,8840,8854,8839,8838,8810,8809,8837,8857,8836,8841,8812,8811,8843,8851,8842,8842,8852,8841,8844,8814,8813,8846,8848,8845,8815,8847,8846,8845,8849,8844,8813,8850,8843,8811,8853,8840,8834,8860,8833,8876,8941,8882,8884,8940,8939,8941,8940,8883,8886,8938,8937,8888,8936,8935,8887,8937,8936,8884,8939,8938,8889,8934,8933,8892,8932,8931,8890,8933,8932,8894,8930,8929,8896,8928,8927,8895,8929,8928,8893,8931,8930,8889,8935,8934,8896,8927,8879,8897,8926,8925,8899,8924,8923,8898,8925,8924,8901,8922,8921,8904,8920,8919,8903,8921,8920,8900,8923,8922,8905,8918,8917,8907,8916,8915,8906,8917,8916,8909,8914,8913,8912,8881,8880,8910,8912,8911,8909,8915,8914,8904,8919,8918,8897,8879,8926,8942,9015,8957,8958,9013,8959,8957,9014,8958,8960,9011,8961,8962,9009,8963,8963,8944,8964,8961,9010,8962,8959,9012,8960,8965,9007,8966,8967,9005,8945,8967,9007,9006,8969,9004,9003,8970,8946,8971,8971,9001,8972,8969,9002,8970,8945,9004,8968,8964,9008,8965,8973,9001,9e3,8947,8999,8948,8976,8998,8997,8975,8948,8998,8949,8996,8950,8979,8995,8994,8980,8994,8993,8978,8950,8995,8977,8997,8996,8981,8952,8992,8983,8991,8990,8982,8992,8991,8984,8954,8989,8986,8988,8987,8955,8987,8956,8985,8989,8988,8953,8990,8954,8951,8993,8952,8974,9e}}}],to=[{uuid:"54513180-0bef-4124-ad3a-473b7686bdb8",type:"MeshNormalMaterial",wireframe:!1,wireframeLinejoin:"round",wireframeLinewidth:1}],w8={metadata:Qa,object:ja,geometries:eo,materials:to};console.log(w8);const l7=5;let R2=new i8;const o1=new p1(75,window.innerWidth/window.innerHeight,.1,1e3);o1.position.set(0,l7,0);let Z5=new n8({antialias:!0});Z5.setPixelRatio(window.devicePixelRatio);Z5.setSize(window.innerWidth,window.innerHeight);document.body.appendChild(Z5.domElement);let N1=new X0;N1.position.copy(o1.position);N1.quaternion.copy(o1.quaternion);let $5=new Ka(o1,N1,document.body),zt=new Ja;const T8=document.getElementById("blocker"),H7=document.getElementById("instructions");H7.addEventListener("click",function(){$5.lock()});$5.addEventListener("lock",function(){H7.style.display="none",T8.style.display="none"});$5.addEventListener("unlock",function(){T8.style.display="block",H7.style.display=""});R2.add($5.getObject());const Y4=15;let J3=!1,Y3=!1,F5=!1,O5=!1;const no=function(a){switch(a.code){case"ArrowUp":case"KeyW":J3=!0;break;case"ArrowLeft":case"KeyA":F5=!0;break;case"ArrowDown":case"KeyS":Y3=!0;break;case"ArrowRight":case"KeyD":O5=!0;break}},io=function(a){switch(a.code){case"ArrowUp":case"KeyW":J3=!1;break;case"ArrowLeft":case"KeyA":F5=!1;break;case"ArrowDown":case"KeyS":Y3=!1;break;case"ArrowRight":case"KeyD":O5=!1;break}};document.addEventListener("keydown",no);document.addEventListener("keyup",io);let i4=new S8(16777215,16777215,.1);i4.color.setHSL(.6,.6,.6);i4.groundColor.setHSL(.1,1,.4);i4.position.set(0,50,0);R2.add(i4);let L1=new b8(16777215,1);L1.color.setHSL(.1,1,.95);L1.position.set(-1,1.75,1);L1.position.multiplyScalar(100);R2.add(L1);L1.castShadow=!0;L1.shadow.mapSize.width=2048;L1.shadow.mapSize.height=2048;let s4=50;L1.shadow.camera.left=-s4;L1.shadow.camera.right=s4;L1.shadow.camera.top=s4;L1.shadow.camera.bottom=-s4;L1.shadow.camera.far=13500;let so=new z2(1,1,2);const A8=new S1(so,new x8);A8.position.set(0,-3,-3);R2.add(A8);let ro=new qa;ro.load(w8,function(a){R2.add(a)},function(a){},function(a){console.error("An error happened")});let Ft=0;function E8(){requestAnimationFrame(E8),Z5.render(R2,o1);const a=performance.now();if($5.isLocked){const n=a-Ft;if(J3||Y3){const i=new A(1,0,0);i.applyQuaternion(o1.quaternion);const s=new A;s.copy(o1.up),s.cross(i),s.normalize(),s.multiplyScalar((Number(J3)-Number(Y3))*Y4*n/1e3);const r=new A;r.copy(o1.position),r.add(s),o1.position.copy(r);const o=new A;o.copy(N1.position),o.add(s),N1.position.copy(o)}(O5||F5)&&(o1.translateX((Number(O5)-Number(F5))*Y4*n/1e3),N1.translateX((Number(O5)-Number(F5))*Y4*n/1e3))}const e=new A;e.copy(o1.up),e.negate(),zt.set(N1.position,e);const t=zt.intersectObjects(R2.children);if(t.length>0&&(!t[0].face.normal.equals(o1.up)||t[0].distance!=l7)){const n=new A;n.copy(t[0].face.normal),n.multiplyScalar(l7);const i=new A;i.copy(t[0].point),i.add(n),N1.position.copy(i);const s=new N2;s.setFromUnitVectors(o1.up,t[0].face.normal),N1.applyQuaternion(s),o1.up.copy(t[0].face.normal)}o1.position.lerp(N1.position,.05),o1.quaternion.slerp(N1.quaternion,.1),Ft=a}E8();window.addEventListener("resize",ao,!1);function ao(){o1.aspect=window.innerWidth/window.innerHeight,o1.updateProjectionMatrix(),Z5.setSize(window.innerWidth,window.innerHeight)}
